// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.5.0
// source: job_manager.proto

package youtu_job

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type JobConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunTimeoutSec  *int32 `protobuf:"varint,1,opt,name=run_timeout_sec,json=runTimeoutSec,def=0" json:"run_timeout_sec,omitempty"`
	AtmostOnce     *bool  `protobuf:"varint,2,opt,name=atmost_once,json=atmostOnce,def=0" json:"atmost_once,omitempty"`    // deprecated
	RestartDead    *bool  `protobuf:"varint,3,opt,name=restart_dead,json=restartDead,def=0" json:"restart_dead,omitempty"` // deprecated
	EstimateRunSec *int32 `protobuf:"varint,4,opt,name=estimate_run_sec,json=estimateRunSec" json:"estimate_run_sec,omitempty"`
	AutoClearInput *bool  `protobuf:"varint,5,opt,name=auto_clear_input,json=autoClearInput,def=0" json:"auto_clear_input,omitempty"`
	AutoDelete     *bool  `protobuf:"varint,6,opt,name=auto_delete,json=autoDelete,def=0" json:"auto_delete,omitempty"`
	MaxRetryTimes  *int32 `protobuf:"varint,7,opt,name=max_retry_times,json=maxRetryTimes,def=5" json:"max_retry_times,omitempty"` // 1:once. <0:unlimit
	JobExpireTime  *int32 `protobuf:"varint,8,opt,name=job_expire_time,json=jobExpireTime,def=0" json:"job_expire_time,omitempty"` // >0: expire work
}

// Default values for JobConfig fields.
const (
	Default_JobConfig_RunTimeoutSec  = int32(0)
	Default_JobConfig_AtmostOnce     = bool(false)
	Default_JobConfig_RestartDead    = bool(false)
	Default_JobConfig_AutoClearInput = bool(false)
	Default_JobConfig_AutoDelete     = bool(false)
	Default_JobConfig_MaxRetryTimes  = int32(5)
	Default_JobConfig_JobExpireTime  = int32(0)
)

func (x *JobConfig) Reset() {
	*x = JobConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_job_manager_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobConfig) ProtoMessage() {}

func (x *JobConfig) ProtoReflect() protoreflect.Message {
	mi := &file_job_manager_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobConfig.ProtoReflect.Descriptor instead.
func (*JobConfig) Descriptor() ([]byte, []int) {
	return file_job_manager_proto_rawDescGZIP(), []int{0}
}

func (x *JobConfig) GetRunTimeoutSec() int32 {
	if x != nil && x.RunTimeoutSec != nil {
		return *x.RunTimeoutSec
	}
	return Default_JobConfig_RunTimeoutSec
}

func (x *JobConfig) GetAtmostOnce() bool {
	if x != nil && x.AtmostOnce != nil {
		return *x.AtmostOnce
	}
	return Default_JobConfig_AtmostOnce
}

func (x *JobConfig) GetRestartDead() bool {
	if x != nil && x.RestartDead != nil {
		return *x.RestartDead
	}
	return Default_JobConfig_RestartDead
}

func (x *JobConfig) GetEstimateRunSec() int32 {
	if x != nil && x.EstimateRunSec != nil {
		return *x.EstimateRunSec
	}
	return 0
}

func (x *JobConfig) GetAutoClearInput() bool {
	if x != nil && x.AutoClearInput != nil {
		return *x.AutoClearInput
	}
	return Default_JobConfig_AutoClearInput
}

func (x *JobConfig) GetAutoDelete() bool {
	if x != nil && x.AutoDelete != nil {
		return *x.AutoDelete
	}
	return Default_JobConfig_AutoDelete
}

func (x *JobConfig) GetMaxRetryTimes() int32 {
	if x != nil && x.MaxRetryTimes != nil {
		return *x.MaxRetryTimes
	}
	return Default_JobConfig_MaxRetryTimes
}

func (x *JobConfig) GetJobExpireTime() int32 {
	if x != nil && x.JobExpireTime != nil {
		return *x.JobExpireTime
	}
	return Default_JobConfig_JobExpireTime
}

type JobLife struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateTime               *uint64  `protobuf:"varint,1,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	EnqueueTime              *uint64  `protobuf:"varint,2,opt,name=enqueue_time,json=enqueueTime" json:"enqueue_time,omitempty"`
	StartTime                *uint64  `protobuf:"varint,3,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	EndTime                  *uint64  `protobuf:"varint,4,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	CancelTime               *uint64  `protobuf:"varint,5,opt,name=cancel_time,json=cancelTime" json:"cancel_time,omitempty"`
	Progress                 *float32 `protobuf:"fixed32,6,opt,name=progress" json:"progress,omitempty"` // [0-1]
	EstimateEndTime          *uint64  `protobuf:"varint,7,opt,name=estimate_end_time,json=estimateEndTime" json:"estimate_end_time,omitempty"`
	WorkerToken              *string  `protobuf:"bytes,8,opt,name=worker_token,json=workerToken" json:"worker_token,omitempty"`
	JobToken                 *string  `protobuf:"bytes,9,opt,name=job_token,json=jobToken" json:"job_token,omitempty"`
	EstimateStartTime        *uint64  `protobuf:"varint,10,opt,name=estimate_start_time,json=estimateStartTime" json:"estimate_start_time,omitempty"`
	RefreshEstimateStartTime *uint64  `protobuf:"varint,11,opt,name=refresh_estimate_start_time,json=refreshEstimateStartTime" json:"refresh_estimate_start_time,omitempty"`
	RetryTimes               *uint32  `protobuf:"varint,12,opt,name=retry_times,json=retryTimes" json:"retry_times,omitempty"`
}

func (x *JobLife) Reset() {
	*x = JobLife{}
	if protoimpl.UnsafeEnabled {
		mi := &file_job_manager_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobLife) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobLife) ProtoMessage() {}

func (x *JobLife) ProtoReflect() protoreflect.Message {
	mi := &file_job_manager_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobLife.ProtoReflect.Descriptor instead.
func (*JobLife) Descriptor() ([]byte, []int) {
	return file_job_manager_proto_rawDescGZIP(), []int{1}
}

func (x *JobLife) GetCreateTime() uint64 {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return 0
}

func (x *JobLife) GetEnqueueTime() uint64 {
	if x != nil && x.EnqueueTime != nil {
		return *x.EnqueueTime
	}
	return 0
}

func (x *JobLife) GetStartTime() uint64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *JobLife) GetEndTime() uint64 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

func (x *JobLife) GetCancelTime() uint64 {
	if x != nil && x.CancelTime != nil {
		return *x.CancelTime
	}
	return 0
}

func (x *JobLife) GetProgress() float32 {
	if x != nil && x.Progress != nil {
		return *x.Progress
	}
	return 0
}

func (x *JobLife) GetEstimateEndTime() uint64 {
	if x != nil && x.EstimateEndTime != nil {
		return *x.EstimateEndTime
	}
	return 0
}

func (x *JobLife) GetWorkerToken() string {
	if x != nil && x.WorkerToken != nil {
		return *x.WorkerToken
	}
	return ""
}

func (x *JobLife) GetJobToken() string {
	if x != nil && x.JobToken != nil {
		return *x.JobToken
	}
	return ""
}

func (x *JobLife) GetEstimateStartTime() uint64 {
	if x != nil && x.EstimateStartTime != nil {
		return *x.EstimateStartTime
	}
	return 0
}

func (x *JobLife) GetRefreshEstimateStartTime() uint64 {
	if x != nil && x.RefreshEstimateStartTime != nil {
		return *x.RefreshEstimateStartTime
	}
	return 0
}

func (x *JobLife) GetRetryTimes() uint32 {
	if x != nil && x.RetryTimes != nil {
		return *x.RetryTimes
	}
	return 0
}

type JobInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content []byte  `protobuf:"bytes,1,opt,name=content" json:"content,omitempty"`
	Url     *string `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
}

func (x *JobInput) Reset() {
	*x = JobInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_job_manager_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobInput) ProtoMessage() {}

func (x *JobInput) ProtoReflect() protoreflect.Message {
	mi := &file_job_manager_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobInput.ProtoReflect.Descriptor instead.
func (*JobInput) Descriptor() ([]byte, []int) {
	return file_job_manager_proto_rawDescGZIP(), []int{2}
}

func (x *JobInput) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *JobInput) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

type JobOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content   []byte  `protobuf:"bytes,1,opt,name=content" json:"content,omitempty"`
	Url       *string `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	Errorcode *int32  `protobuf:"varint,3,opt,name=errorcode" json:"errorcode,omitempty"`
	Errormsg  *string `protobuf:"bytes,4,opt,name=errormsg" json:"errormsg,omitempty"`
}

func (x *JobOutput) Reset() {
	*x = JobOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_job_manager_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobOutput) ProtoMessage() {}

func (x *JobOutput) ProtoReflect() protoreflect.Message {
	mi := &file_job_manager_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobOutput.ProtoReflect.Descriptor instead.
func (*JobOutput) Descriptor() ([]byte, []int) {
	return file_job_manager_proto_rawDescGZIP(), []int{3}
}

func (x *JobOutput) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *JobOutput) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *JobOutput) GetErrorcode() int32 {
	if x != nil && x.Errorcode != nil {
		return *x.Errorcode
	}
	return 0
}

func (x *JobOutput) GetErrormsg() string {
	if x != nil && x.Errormsg != nil {
		return *x.Errormsg
	}
	return ""
}

type JobInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     *string    `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Type   *string    `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Input  *JobInput  `protobuf:"bytes,3,opt,name=input" json:"input,omitempty"` // deprecated
	Output *JobOutput `protobuf:"bytes,4,opt,name=output" json:"output,omitempty"`
	Status *JobStatus `protobuf:"varint,5,opt,name=status,enum=youtu.job.JobStatus" json:"status,omitempty"`
	Life   *JobLife   `protobuf:"bytes,6,opt,name=life" json:"life,omitempty"`
	Config *JobConfig `protobuf:"bytes,7,opt,name=config" json:"config,omitempty"`
}

func (x *JobInfo) Reset() {
	*x = JobInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_job_manager_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobInfo) ProtoMessage() {}

func (x *JobInfo) ProtoReflect() protoreflect.Message {
	mi := &file_job_manager_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobInfo.ProtoReflect.Descriptor instead.
func (*JobInfo) Descriptor() ([]byte, []int) {
	return file_job_manager_proto_rawDescGZIP(), []int{4}
}

func (x *JobInfo) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *JobInfo) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *JobInfo) GetInput() *JobInput {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *JobInfo) GetOutput() *JobOutput {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *JobInfo) GetStatus() JobStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return JobStatus_INIT
}

func (x *JobInfo) GetLife() *JobLife {
	if x != nil {
		return x.Life
	}
	return nil
}

func (x *JobInfo) GetConfig() *JobConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type JobQueueRuntime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WaitTime    *uint64 `protobuf:"varint,1,opt,name=wait_time,json=waitTime" json:"wait_time,omitempty"`
	RefreshTime *uint64 `protobuf:"varint,2,opt,name=refresh_time,json=refreshTime" json:"refresh_time,omitempty"`
}

func (x *JobQueueRuntime) Reset() {
	*x = JobQueueRuntime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_job_manager_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobQueueRuntime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobQueueRuntime) ProtoMessage() {}

func (x *JobQueueRuntime) ProtoReflect() protoreflect.Message {
	mi := &file_job_manager_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobQueueRuntime.ProtoReflect.Descriptor instead.
func (*JobQueueRuntime) Descriptor() ([]byte, []int) {
	return file_job_manager_proto_rawDescGZIP(), []int{5}
}

func (x *JobQueueRuntime) GetWaitTime() uint64 {
	if x != nil && x.WaitTime != nil {
		return *x.WaitTime
	}
	return 0
}

func (x *JobQueueRuntime) GetRefreshTime() uint64 {
	if x != nil && x.RefreshTime != nil {
		return *x.RefreshTime
	}
	return 0
}

type AllocJobIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	JobType   *string `protobuf:"bytes,2,opt,name=job_type,json=jobType" json:"job_type,omitempty"`
}

func (x *AllocJobIdReq) Reset() {
	*x = AllocJobIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_job_manager_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllocJobIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocJobIdReq) ProtoMessage() {}

func (x *AllocJobIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_job_manager_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocJobIdReq.ProtoReflect.Descriptor instead.
func (*AllocJobIdReq) Descriptor() ([]byte, []int) {
	return file_job_manager_proto_rawDescGZIP(), []int{6}
}

func (x *AllocJobIdReq) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *AllocJobIdReq) GetJobType() string {
	if x != nil && x.JobType != nil {
		return *x.JobType
	}
	return ""
}

type AllocJobIdRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Errorcode *int32  `protobuf:"varint,2,opt,name=errorcode" json:"errorcode,omitempty"`
	Errormsg  *string `protobuf:"bytes,3,opt,name=errormsg" json:"errormsg,omitempty"`
	JobId     *string `protobuf:"bytes,4,opt,name=job_id,json=jobId" json:"job_id,omitempty"`
}

func (x *AllocJobIdRsp) Reset() {
	*x = AllocJobIdRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_job_manager_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllocJobIdRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocJobIdRsp) ProtoMessage() {}

func (x *AllocJobIdRsp) ProtoReflect() protoreflect.Message {
	mi := &file_job_manager_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocJobIdRsp.ProtoReflect.Descriptor instead.
func (*AllocJobIdRsp) Descriptor() ([]byte, []int) {
	return file_job_manager_proto_rawDescGZIP(), []int{7}
}

func (x *AllocJobIdRsp) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *AllocJobIdRsp) GetErrorcode() int32 {
	if x != nil && x.Errorcode != nil {
		return *x.Errorcode
	}
	return 0
}

func (x *AllocJobIdRsp) GetErrormsg() string {
	if x != nil && x.Errormsg != nil {
		return *x.Errormsg
	}
	return ""
}

func (x *AllocJobIdRsp) GetJobId() string {
	if x != nil && x.JobId != nil {
		return *x.JobId
	}
	return ""
}

type AddJobReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId    *string    `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	JobType      *string    `protobuf:"bytes,2,opt,name=job_type,json=jobType" json:"job_type,omitempty"`
	JobInput     *JobInput  `protobuf:"bytes,3,opt,name=job_input,json=jobInput" json:"job_input,omitempty"`
	JobConfig    *JobConfig `protobuf:"bytes,4,opt,name=job_config,json=jobConfig" json:"job_config,omitempty"`
	JobId        *string    `protobuf:"bytes,5,opt,name=job_id,json=jobId" json:"job_id,omitempty"`
	MaxQueueSize *int32     `protobuf:"varint,6,opt,name=max_queue_size,json=maxQueueSize" json:"max_queue_size,omitempty"`
}

func (x *AddJobReq) Reset() {
	*x = AddJobReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_job_manager_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddJobReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddJobReq) ProtoMessage() {}

func (x *AddJobReq) ProtoReflect() protoreflect.Message {
	mi := &file_job_manager_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddJobReq.ProtoReflect.Descriptor instead.
func (*AddJobReq) Descriptor() ([]byte, []int) {
	return file_job_manager_proto_rawDescGZIP(), []int{8}
}

func (x *AddJobReq) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *AddJobReq) GetJobType() string {
	if x != nil && x.JobType != nil {
		return *x.JobType
	}
	return ""
}

func (x *AddJobReq) GetJobInput() *JobInput {
	if x != nil {
		return x.JobInput
	}
	return nil
}

func (x *AddJobReq) GetJobConfig() *JobConfig {
	if x != nil {
		return x.JobConfig
	}
	return nil
}

func (x *AddJobReq) GetJobId() string {
	if x != nil && x.JobId != nil {
		return *x.JobId
	}
	return ""
}

func (x *AddJobReq) GetMaxQueueSize() int32 {
	if x != nil && x.MaxQueueSize != nil {
		return *x.MaxQueueSize
	}
	return 0
}

type AddJobRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Errorcode *int32  `protobuf:"varint,2,opt,name=errorcode" json:"errorcode,omitempty"`
	Errormsg  *string `protobuf:"bytes,3,opt,name=errormsg" json:"errormsg,omitempty"`
	JobId     *string `protobuf:"bytes,4,opt,name=job_id,json=jobId" json:"job_id,omitempty"`
}

func (x *AddJobRsp) Reset() {
	*x = AddJobRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_job_manager_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddJobRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddJobRsp) ProtoMessage() {}

func (x *AddJobRsp) ProtoReflect() protoreflect.Message {
	mi := &file_job_manager_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddJobRsp.ProtoReflect.Descriptor instead.
func (*AddJobRsp) Descriptor() ([]byte, []int) {
	return file_job_manager_proto_rawDescGZIP(), []int{9}
}

func (x *AddJobRsp) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *AddJobRsp) GetErrorcode() int32 {
	if x != nil && x.Errorcode != nil {
		return *x.Errorcode
	}
	return 0
}

func (x *AddJobRsp) GetErrormsg() string {
	if x != nil && x.Errormsg != nil {
		return *x.Errormsg
	}
	return ""
}

func (x *AddJobRsp) GetJobId() string {
	if x != nil && x.JobId != nil {
		return *x.JobId
	}
	return ""
}

type QueryJobReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	JobId     *string `protobuf:"bytes,2,opt,name=job_id,json=jobId" json:"job_id,omitempty"`
	NeedInput *bool   `protobuf:"varint,3,opt,name=need_input,json=needInput,def=0" json:"need_input,omitempty"`
}

// Default values for QueryJobReq fields.
const (
	Default_QueryJobReq_NeedInput = bool(false)
)

func (x *QueryJobReq) Reset() {
	*x = QueryJobReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_job_manager_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryJobReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryJobReq) ProtoMessage() {}

func (x *QueryJobReq) ProtoReflect() protoreflect.Message {
	mi := &file_job_manager_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryJobReq.ProtoReflect.Descriptor instead.
func (*QueryJobReq) Descriptor() ([]byte, []int) {
	return file_job_manager_proto_rawDescGZIP(), []int{10}
}

func (x *QueryJobReq) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *QueryJobReq) GetJobId() string {
	if x != nil && x.JobId != nil {
		return *x.JobId
	}
	return ""
}

func (x *QueryJobReq) GetNeedInput() bool {
	if x != nil && x.NeedInput != nil {
		return *x.NeedInput
	}
	return Default_QueryJobReq_NeedInput
}

type QueryJobRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string   `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Errorcode *int32    `protobuf:"varint,2,opt,name=errorcode" json:"errorcode,omitempty"`
	Errormsg  *string   `protobuf:"bytes,3,opt,name=errormsg" json:"errormsg,omitempty"`
	JobInfo   *JobInfo  `protobuf:"bytes,4,opt,name=job_info,json=jobInfo" json:"job_info,omitempty"`
	JobInput  *JobInput `protobuf:"bytes,5,opt,name=job_input,json=jobInput" json:"job_input,omitempty"`
}

func (x *QueryJobRsp) Reset() {
	*x = QueryJobRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_job_manager_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryJobRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryJobRsp) ProtoMessage() {}

func (x *QueryJobRsp) ProtoReflect() protoreflect.Message {
	mi := &file_job_manager_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryJobRsp.ProtoReflect.Descriptor instead.
func (*QueryJobRsp) Descriptor() ([]byte, []int) {
	return file_job_manager_proto_rawDescGZIP(), []int{11}
}

func (x *QueryJobRsp) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *QueryJobRsp) GetErrorcode() int32 {
	if x != nil && x.Errorcode != nil {
		return *x.Errorcode
	}
	return 0
}

func (x *QueryJobRsp) GetErrormsg() string {
	if x != nil && x.Errormsg != nil {
		return *x.Errormsg
	}
	return ""
}

func (x *QueryJobRsp) GetJobInfo() *JobInfo {
	if x != nil {
		return x.JobInfo
	}
	return nil
}

func (x *QueryJobRsp) GetJobInput() *JobInput {
	if x != nil {
		return x.JobInput
	}
	return nil
}

type QueryJobInQueueReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	JobType   *string `protobuf:"bytes,2,opt,name=job_type,json=jobType" json:"job_type,omitempty"`
	Verbose   *bool   `protobuf:"varint,3,opt,name=verbose" json:"verbose,omitempty"`
}

func (x *QueryJobInQueueReq) Reset() {
	*x = QueryJobInQueueReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_job_manager_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryJobInQueueReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryJobInQueueReq) ProtoMessage() {}

func (x *QueryJobInQueueReq) ProtoReflect() protoreflect.Message {
	mi := &file_job_manager_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryJobInQueueReq.ProtoReflect.Descriptor instead.
func (*QueryJobInQueueReq) Descriptor() ([]byte, []int) {
	return file_job_manager_proto_rawDescGZIP(), []int{12}
}

func (x *QueryJobInQueueReq) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *QueryJobInQueueReq) GetJobType() string {
	if x != nil && x.JobType != nil {
		return *x.JobType
	}
	return ""
}

func (x *QueryJobInQueueReq) GetVerbose() bool {
	if x != nil && x.Verbose != nil {
		return *x.Verbose
	}
	return false
}

type QueryJobInQueueRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string    `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Errorcode *int32     `protobuf:"varint,2,opt,name=errorcode" json:"errorcode,omitempty"`
	Errormsg  *string    `protobuf:"bytes,3,opt,name=errormsg" json:"errormsg,omitempty"`
	JobInfos  []*JobInfo `protobuf:"bytes,4,rep,name=job_infos,json=jobInfos" json:"job_infos,omitempty"`
	JobIds    []string   `protobuf:"bytes,5,rep,name=job_ids,json=jobIds" json:"job_ids,omitempty"`
}

func (x *QueryJobInQueueRsp) Reset() {
	*x = QueryJobInQueueRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_job_manager_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryJobInQueueRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryJobInQueueRsp) ProtoMessage() {}

func (x *QueryJobInQueueRsp) ProtoReflect() protoreflect.Message {
	mi := &file_job_manager_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryJobInQueueRsp.ProtoReflect.Descriptor instead.
func (*QueryJobInQueueRsp) Descriptor() ([]byte, []int) {
	return file_job_manager_proto_rawDescGZIP(), []int{13}
}

func (x *QueryJobInQueueRsp) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *QueryJobInQueueRsp) GetErrorcode() int32 {
	if x != nil && x.Errorcode != nil {
		return *x.Errorcode
	}
	return 0
}

func (x *QueryJobInQueueRsp) GetErrormsg() string {
	if x != nil && x.Errormsg != nil {
		return *x.Errormsg
	}
	return ""
}

func (x *QueryJobInQueueRsp) GetJobInfos() []*JobInfo {
	if x != nil {
		return x.JobInfos
	}
	return nil
}

func (x *QueryJobInQueueRsp) GetJobIds() []string {
	if x != nil {
		return x.JobIds
	}
	return nil
}

type GetQueueSummaryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	JobType   *string `protobuf:"bytes,2,opt,name=job_type,json=jobType" json:"job_type,omitempty"`
	Verbose   *bool   `protobuf:"varint,3,opt,name=verbose,def=0" json:"verbose,omitempty"`
	Fast      *bool   `protobuf:"varint,4,opt,name=fast,def=0" json:"fast,omitempty"`
}

// Default values for GetQueueSummaryReq fields.
const (
	Default_GetQueueSummaryReq_Verbose = bool(false)
	Default_GetQueueSummaryReq_Fast    = bool(false)
)

func (x *GetQueueSummaryReq) Reset() {
	*x = GetQueueSummaryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_job_manager_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetQueueSummaryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQueueSummaryReq) ProtoMessage() {}

func (x *GetQueueSummaryReq) ProtoReflect() protoreflect.Message {
	mi := &file_job_manager_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQueueSummaryReq.ProtoReflect.Descriptor instead.
func (*GetQueueSummaryReq) Descriptor() ([]byte, []int) {
	return file_job_manager_proto_rawDescGZIP(), []int{14}
}

func (x *GetQueueSummaryReq) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *GetQueueSummaryReq) GetJobType() string {
	if x != nil && x.JobType != nil {
		return *x.JobType
	}
	return ""
}

func (x *GetQueueSummaryReq) GetVerbose() bool {
	if x != nil && x.Verbose != nil {
		return *x.Verbose
	}
	return Default_GetQueueSummaryReq_Verbose
}

func (x *GetQueueSummaryReq) GetFast() bool {
	if x != nil && x.Fast != nil {
		return *x.Fast
	}
	return Default_GetQueueSummaryReq_Fast
}

type JobSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId   *string  `protobuf:"bytes,1,opt,name=job_id,json=jobId" json:"job_id,omitempty"`
	JobLife *JobLife `protobuf:"bytes,3,opt,name=job_life,json=jobLife" json:"job_life,omitempty"`
}

func (x *JobSummary) Reset() {
	*x = JobSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_job_manager_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobSummary) ProtoMessage() {}

func (x *JobSummary) ProtoReflect() protoreflect.Message {
	mi := &file_job_manager_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobSummary.ProtoReflect.Descriptor instead.
func (*JobSummary) Descriptor() ([]byte, []int) {
	return file_job_manager_proto_rawDescGZIP(), []int{15}
}

func (x *JobSummary) GetJobId() string {
	if x != nil && x.JobId != nil {
		return *x.JobId
	}
	return ""
}

func (x *JobSummary) GetJobLife() *JobLife {
	if x != nil {
		return x.JobLife
	}
	return nil
}

type WorkerSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkerToken *string `protobuf:"bytes,1,opt,name=worker_token,json=workerToken" json:"worker_token,omitempty"`
	JobNum      *int32  `protobuf:"varint,2,opt,name=job_num,json=jobNum" json:"job_num,omitempty"`
}

func (x *WorkerSummary) Reset() {
	*x = WorkerSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_job_manager_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkerSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerSummary) ProtoMessage() {}

func (x *WorkerSummary) ProtoReflect() protoreflect.Message {
	mi := &file_job_manager_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerSummary.ProtoReflect.Descriptor instead.
func (*WorkerSummary) Descriptor() ([]byte, []int) {
	return file_job_manager_proto_rawDescGZIP(), []int{16}
}

func (x *WorkerSummary) GetWorkerToken() string {
	if x != nil && x.WorkerToken != nil {
		return *x.WorkerToken
	}
	return ""
}

func (x *WorkerSummary) GetJobNum() int32 {
	if x != nil && x.JobNum != nil {
		return *x.JobNum
	}
	return 0
}

type GetQueueSummaryRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId   *string          `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Errorcode   *int32           `protobuf:"varint,2,opt,name=errorcode" json:"errorcode,omitempty"`
	Errormsg    *string          `protobuf:"bytes,3,opt,name=errormsg" json:"errormsg,omitempty"`
	QueueJobNum *int32           `protobuf:"varint,4,opt,name=queue_job_num,json=queueJobNum" json:"queue_job_num,omitempty"`
	WaitJobNum  *int32           `protobuf:"varint,5,opt,name=wait_job_num,json=waitJobNum" json:"wait_job_num,omitempty"`
	RunJobNum   *int32           `protobuf:"varint,6,opt,name=run_job_num,json=runJobNum" json:"run_job_num,omitempty"`
	Jobs        []*JobSummary    `protobuf:"bytes,7,rep,name=jobs" json:"jobs,omitempty"`
	Workers     []*WorkerSummary `protobuf:"bytes,8,rep,name=workers" json:"workers,omitempty"`
}

func (x *GetQueueSummaryRsp) Reset() {
	*x = GetQueueSummaryRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_job_manager_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetQueueSummaryRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQueueSummaryRsp) ProtoMessage() {}

func (x *GetQueueSummaryRsp) ProtoReflect() protoreflect.Message {
	mi := &file_job_manager_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQueueSummaryRsp.ProtoReflect.Descriptor instead.
func (*GetQueueSummaryRsp) Descriptor() ([]byte, []int) {
	return file_job_manager_proto_rawDescGZIP(), []int{17}
}

func (x *GetQueueSummaryRsp) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *GetQueueSummaryRsp) GetErrorcode() int32 {
	if x != nil && x.Errorcode != nil {
		return *x.Errorcode
	}
	return 0
}

func (x *GetQueueSummaryRsp) GetErrormsg() string {
	if x != nil && x.Errormsg != nil {
		return *x.Errormsg
	}
	return ""
}

func (x *GetQueueSummaryRsp) GetQueueJobNum() int32 {
	if x != nil && x.QueueJobNum != nil {
		return *x.QueueJobNum
	}
	return 0
}

func (x *GetQueueSummaryRsp) GetWaitJobNum() int32 {
	if x != nil && x.WaitJobNum != nil {
		return *x.WaitJobNum
	}
	return 0
}

func (x *GetQueueSummaryRsp) GetRunJobNum() int32 {
	if x != nil && x.RunJobNum != nil {
		return *x.RunJobNum
	}
	return 0
}

func (x *GetQueueSummaryRsp) GetJobs() []*JobSummary {
	if x != nil {
		return x.Jobs
	}
	return nil
}

func (x *GetQueueSummaryRsp) GetWorkers() []*WorkerSummary {
	if x != nil {
		return x.Workers
	}
	return nil
}

type GetQueueRuntimeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	JobType   *string `protobuf:"bytes,2,opt,name=job_type,json=jobType" json:"job_type,omitempty"`
}

func (x *GetQueueRuntimeReq) Reset() {
	*x = GetQueueRuntimeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_job_manager_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetQueueRuntimeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQueueRuntimeReq) ProtoMessage() {}

func (x *GetQueueRuntimeReq) ProtoReflect() protoreflect.Message {
	mi := &file_job_manager_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQueueRuntimeReq.ProtoReflect.Descriptor instead.
func (*GetQueueRuntimeReq) Descriptor() ([]byte, []int) {
	return file_job_manager_proto_rawDescGZIP(), []int{18}
}

func (x *GetQueueRuntimeReq) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *GetQueueRuntimeReq) GetJobType() string {
	if x != nil && x.JobType != nil {
		return *x.JobType
	}
	return ""
}

type GetQueueRuntimeRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string          `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Errorcode *int32           `protobuf:"varint,2,opt,name=errorcode" json:"errorcode,omitempty"`
	Errormsg  *string          `protobuf:"bytes,3,opt,name=errormsg" json:"errormsg,omitempty"`
	Runtime   *JobQueueRuntime `protobuf:"bytes,4,opt,name=runtime" json:"runtime,omitempty"`
}

func (x *GetQueueRuntimeRsp) Reset() {
	*x = GetQueueRuntimeRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_job_manager_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetQueueRuntimeRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQueueRuntimeRsp) ProtoMessage() {}

func (x *GetQueueRuntimeRsp) ProtoReflect() protoreflect.Message {
	mi := &file_job_manager_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQueueRuntimeRsp.ProtoReflect.Descriptor instead.
func (*GetQueueRuntimeRsp) Descriptor() ([]byte, []int) {
	return file_job_manager_proto_rawDescGZIP(), []int{19}
}

func (x *GetQueueRuntimeRsp) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *GetQueueRuntimeRsp) GetErrorcode() int32 {
	if x != nil && x.Errorcode != nil {
		return *x.Errorcode
	}
	return 0
}

func (x *GetQueueRuntimeRsp) GetErrormsg() string {
	if x != nil && x.Errormsg != nil {
		return *x.Errormsg
	}
	return ""
}

func (x *GetQueueRuntimeRsp) GetRuntime() *JobQueueRuntime {
	if x != nil {
		return x.Runtime
	}
	return nil
}

type CancelJobReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	JobId     *string `protobuf:"bytes,2,opt,name=job_id,json=jobId" json:"job_id,omitempty"`
}

func (x *CancelJobReq) Reset() {
	*x = CancelJobReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_job_manager_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelJobReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelJobReq) ProtoMessage() {}

func (x *CancelJobReq) ProtoReflect() protoreflect.Message {
	mi := &file_job_manager_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelJobReq.ProtoReflect.Descriptor instead.
func (*CancelJobReq) Descriptor() ([]byte, []int) {
	return file_job_manager_proto_rawDescGZIP(), []int{20}
}

func (x *CancelJobReq) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *CancelJobReq) GetJobId() string {
	if x != nil && x.JobId != nil {
		return *x.JobId
	}
	return ""
}

type CancelJobRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Errorcode *int32  `protobuf:"varint,2,opt,name=errorcode" json:"errorcode,omitempty"`
	Errormsg  *string `protobuf:"bytes,3,opt,name=errormsg" json:"errormsg,omitempty"`
}

func (x *CancelJobRsp) Reset() {
	*x = CancelJobRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_job_manager_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelJobRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelJobRsp) ProtoMessage() {}

func (x *CancelJobRsp) ProtoReflect() protoreflect.Message {
	mi := &file_job_manager_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelJobRsp.ProtoReflect.Descriptor instead.
func (*CancelJobRsp) Descriptor() ([]byte, []int) {
	return file_job_manager_proto_rawDescGZIP(), []int{21}
}

func (x *CancelJobRsp) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *CancelJobRsp) GetErrorcode() int32 {
	if x != nil && x.Errorcode != nil {
		return *x.Errorcode
	}
	return 0
}

func (x *CancelJobRsp) GetErrormsg() string {
	if x != nil && x.Errormsg != nil {
		return *x.Errormsg
	}
	return ""
}

type RestartJobReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	JobId     *string `protobuf:"bytes,2,opt,name=job_id,json=jobId" json:"job_id,omitempty"`
}

func (x *RestartJobReq) Reset() {
	*x = RestartJobReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_job_manager_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestartJobReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartJobReq) ProtoMessage() {}

func (x *RestartJobReq) ProtoReflect() protoreflect.Message {
	mi := &file_job_manager_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartJobReq.ProtoReflect.Descriptor instead.
func (*RestartJobReq) Descriptor() ([]byte, []int) {
	return file_job_manager_proto_rawDescGZIP(), []int{22}
}

func (x *RestartJobReq) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *RestartJobReq) GetJobId() string {
	if x != nil && x.JobId != nil {
		return *x.JobId
	}
	return ""
}

type RestartJobRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Errorcode *int32  `protobuf:"varint,2,opt,name=errorcode" json:"errorcode,omitempty"`
	Errormsg  *string `protobuf:"bytes,3,opt,name=errormsg" json:"errormsg,omitempty"`
}

func (x *RestartJobRsp) Reset() {
	*x = RestartJobRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_job_manager_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestartJobRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartJobRsp) ProtoMessage() {}

func (x *RestartJobRsp) ProtoReflect() protoreflect.Message {
	mi := &file_job_manager_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartJobRsp.ProtoReflect.Descriptor instead.
func (*RestartJobRsp) Descriptor() ([]byte, []int) {
	return file_job_manager_proto_rawDescGZIP(), []int{23}
}

func (x *RestartJobRsp) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *RestartJobRsp) GetErrorcode() int32 {
	if x != nil && x.Errorcode != nil {
		return *x.Errorcode
	}
	return 0
}

func (x *RestartJobRsp) GetErrormsg() string {
	if x != nil && x.Errormsg != nil {
		return *x.Errormsg
	}
	return ""
}

type FetchJobReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId   *string `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	JobType     *string `protobuf:"bytes,2,opt,name=job_type,json=jobType" json:"job_type,omitempty"`
	WorkerToken *string `protobuf:"bytes,3,opt,name=worker_token,json=workerToken" json:"worker_token,omitempty"`
	JobToken    *string `protobuf:"bytes,4,opt,name=job_token,json=jobToken" json:"job_token,omitempty"`
}

func (x *FetchJobReq) Reset() {
	*x = FetchJobReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_job_manager_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchJobReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchJobReq) ProtoMessage() {}

func (x *FetchJobReq) ProtoReflect() protoreflect.Message {
	mi := &file_job_manager_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchJobReq.ProtoReflect.Descriptor instead.
func (*FetchJobReq) Descriptor() ([]byte, []int) {
	return file_job_manager_proto_rawDescGZIP(), []int{24}
}

func (x *FetchJobReq) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *FetchJobReq) GetJobType() string {
	if x != nil && x.JobType != nil {
		return *x.JobType
	}
	return ""
}

func (x *FetchJobReq) GetWorkerToken() string {
	if x != nil && x.WorkerToken != nil {
		return *x.WorkerToken
	}
	return ""
}

func (x *FetchJobReq) GetJobToken() string {
	if x != nil && x.JobToken != nil {
		return *x.JobToken
	}
	return ""
}

type FetchJobRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string   `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Errorcode *int32    `protobuf:"varint,2,opt,name=errorcode" json:"errorcode,omitempty"`
	Errormsg  *string   `protobuf:"bytes,3,opt,name=errormsg" json:"errormsg,omitempty"`
	JobId     *string   `protobuf:"bytes,4,opt,name=job_id,json=jobId" json:"job_id,omitempty"`
	JobInput  *JobInput `protobuf:"bytes,5,opt,name=job_input,json=jobInput" json:"job_input,omitempty"`
	Progress  *float32  `protobuf:"fixed32,6,opt,name=progress" json:"progress,omitempty"`
}

func (x *FetchJobRsp) Reset() {
	*x = FetchJobRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_job_manager_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchJobRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchJobRsp) ProtoMessage() {}

func (x *FetchJobRsp) ProtoReflect() protoreflect.Message {
	mi := &file_job_manager_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchJobRsp.ProtoReflect.Descriptor instead.
func (*FetchJobRsp) Descriptor() ([]byte, []int) {
	return file_job_manager_proto_rawDescGZIP(), []int{25}
}

func (x *FetchJobRsp) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *FetchJobRsp) GetErrorcode() int32 {
	if x != nil && x.Errorcode != nil {
		return *x.Errorcode
	}
	return 0
}

func (x *FetchJobRsp) GetErrormsg() string {
	if x != nil && x.Errormsg != nil {
		return *x.Errormsg
	}
	return ""
}

func (x *FetchJobRsp) GetJobId() string {
	if x != nil && x.JobId != nil {
		return *x.JobId
	}
	return ""
}

func (x *FetchJobRsp) GetJobInput() *JobInput {
	if x != nil {
		return x.JobInput
	}
	return nil
}

func (x *FetchJobRsp) GetProgress() float32 {
	if x != nil && x.Progress != nil {
		return *x.Progress
	}
	return 0
}

type ReportJobReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId       *string    `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	JobId           *string    `protobuf:"bytes,2,opt,name=job_id,json=jobId" json:"job_id,omitempty"`
	JobStatus       *JobStatus `protobuf:"varint,3,opt,name=job_status,json=jobStatus,enum=youtu.job.JobStatus" json:"job_status,omitempty"`
	JobOutput       *JobOutput `protobuf:"bytes,4,opt,name=job_output,json=jobOutput" json:"job_output,omitempty"`
	Progress        *float32   `protobuf:"fixed32,5,opt,name=progress" json:"progress,omitempty"`
	EstimateEndTime *uint64    `protobuf:"varint,6,opt,name=estimate_end_time,json=estimateEndTime" json:"estimate_end_time,omitempty"`
	WorkerToken     *string    `protobuf:"bytes,7,opt,name=worker_token,json=workerToken" json:"worker_token,omitempty"`
	JobToken        *string    `protobuf:"bytes,8,opt,name=job_token,json=jobToken" json:"job_token,omitempty"`
	JobRet          *int32     `protobuf:"varint,9,opt,name=job_ret,json=jobRet" json:"job_ret,omitempty"`
}

func (x *ReportJobReq) Reset() {
	*x = ReportJobReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_job_manager_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportJobReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportJobReq) ProtoMessage() {}

func (x *ReportJobReq) ProtoReflect() protoreflect.Message {
	mi := &file_job_manager_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportJobReq.ProtoReflect.Descriptor instead.
func (*ReportJobReq) Descriptor() ([]byte, []int) {
	return file_job_manager_proto_rawDescGZIP(), []int{26}
}

func (x *ReportJobReq) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *ReportJobReq) GetJobId() string {
	if x != nil && x.JobId != nil {
		return *x.JobId
	}
	return ""
}

func (x *ReportJobReq) GetJobStatus() JobStatus {
	if x != nil && x.JobStatus != nil {
		return *x.JobStatus
	}
	return JobStatus_INIT
}

func (x *ReportJobReq) GetJobOutput() *JobOutput {
	if x != nil {
		return x.JobOutput
	}
	return nil
}

func (x *ReportJobReq) GetProgress() float32 {
	if x != nil && x.Progress != nil {
		return *x.Progress
	}
	return 0
}

func (x *ReportJobReq) GetEstimateEndTime() uint64 {
	if x != nil && x.EstimateEndTime != nil {
		return *x.EstimateEndTime
	}
	return 0
}

func (x *ReportJobReq) GetWorkerToken() string {
	if x != nil && x.WorkerToken != nil {
		return *x.WorkerToken
	}
	return ""
}

func (x *ReportJobReq) GetJobToken() string {
	if x != nil && x.JobToken != nil {
		return *x.JobToken
	}
	return ""
}

func (x *ReportJobReq) GetJobRet() int32 {
	if x != nil && x.JobRet != nil {
		return *x.JobRet
	}
	return 0
}

type ReportJobRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Errorcode *int32  `protobuf:"varint,2,opt,name=errorcode" json:"errorcode,omitempty"`
	Errormsg  *string `protobuf:"bytes,3,opt,name=errormsg" json:"errormsg,omitempty"`
}

func (x *ReportJobRsp) Reset() {
	*x = ReportJobRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_job_manager_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportJobRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportJobRsp) ProtoMessage() {}

func (x *ReportJobRsp) ProtoReflect() protoreflect.Message {
	mi := &file_job_manager_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportJobRsp.ProtoReflect.Descriptor instead.
func (*ReportJobRsp) Descriptor() ([]byte, []int) {
	return file_job_manager_proto_rawDescGZIP(), []int{27}
}

func (x *ReportJobRsp) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *ReportJobRsp) GetErrorcode() int32 {
	if x != nil && x.Errorcode != nil {
		return *x.Errorcode
	}
	return 0
}

func (x *ReportJobRsp) GetErrormsg() string {
	if x != nil && x.Errormsg != nil {
		return *x.Errormsg
	}
	return ""
}

type ReportWorkerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId   *string  `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	WorkerToken *string  `protobuf:"bytes,2,opt,name=worker_token,json=workerToken" json:"worker_token,omitempty"`
	JobType     *string  `protobuf:"bytes,3,opt,name=job_type,json=jobType" json:"job_type,omitempty"`
	JobIds      []string `protobuf:"bytes,4,rep,name=job_ids,json=jobIds" json:"job_ids,omitempty"`
	JobTokens   []string `protobuf:"bytes,5,rep,name=job_tokens,json=jobTokens" json:"job_tokens,omitempty"`
	ThreadNum   *int32   `protobuf:"varint,6,opt,name=thread_num,json=threadNum" json:"thread_num,omitempty"`
}

func (x *ReportWorkerReq) Reset() {
	*x = ReportWorkerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_job_manager_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportWorkerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportWorkerReq) ProtoMessage() {}

func (x *ReportWorkerReq) ProtoReflect() protoreflect.Message {
	mi := &file_job_manager_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportWorkerReq.ProtoReflect.Descriptor instead.
func (*ReportWorkerReq) Descriptor() ([]byte, []int) {
	return file_job_manager_proto_rawDescGZIP(), []int{28}
}

func (x *ReportWorkerReq) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *ReportWorkerReq) GetWorkerToken() string {
	if x != nil && x.WorkerToken != nil {
		return *x.WorkerToken
	}
	return ""
}

func (x *ReportWorkerReq) GetJobType() string {
	if x != nil && x.JobType != nil {
		return *x.JobType
	}
	return ""
}

func (x *ReportWorkerReq) GetJobIds() []string {
	if x != nil {
		return x.JobIds
	}
	return nil
}

func (x *ReportWorkerReq) GetJobTokens() []string {
	if x != nil {
		return x.JobTokens
	}
	return nil
}

func (x *ReportWorkerReq) GetThreadNum() int32 {
	if x != nil && x.ThreadNum != nil {
		return *x.ThreadNum
	}
	return 0
}

type ReportWorkerRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Errorcode *int32  `protobuf:"varint,2,opt,name=errorcode" json:"errorcode,omitempty"`
	Errormsg  *string `protobuf:"bytes,3,opt,name=errormsg" json:"errormsg,omitempty"`
}

func (x *ReportWorkerRsp) Reset() {
	*x = ReportWorkerRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_job_manager_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportWorkerRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportWorkerRsp) ProtoMessage() {}

func (x *ReportWorkerRsp) ProtoReflect() protoreflect.Message {
	mi := &file_job_manager_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportWorkerRsp.ProtoReflect.Descriptor instead.
func (*ReportWorkerRsp) Descriptor() ([]byte, []int) {
	return file_job_manager_proto_rawDescGZIP(), []int{29}
}

func (x *ReportWorkerRsp) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *ReportWorkerRsp) GetErrorcode() int32 {
	if x != nil && x.Errorcode != nil {
		return *x.Errorcode
	}
	return 0
}

func (x *ReportWorkerRsp) GetErrormsg() string {
	if x != nil && x.Errormsg != nil {
		return *x.Errormsg
	}
	return ""
}

type ClearQueueReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	JobType   *string `protobuf:"bytes,2,opt,name=job_type,json=jobType" json:"job_type,omitempty"`
}

func (x *ClearQueueReq) Reset() {
	*x = ClearQueueReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_job_manager_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearQueueReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearQueueReq) ProtoMessage() {}

func (x *ClearQueueReq) ProtoReflect() protoreflect.Message {
	mi := &file_job_manager_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearQueueReq.ProtoReflect.Descriptor instead.
func (*ClearQueueReq) Descriptor() ([]byte, []int) {
	return file_job_manager_proto_rawDescGZIP(), []int{30}
}

func (x *ClearQueueReq) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *ClearQueueReq) GetJobType() string {
	if x != nil && x.JobType != nil {
		return *x.JobType
	}
	return ""
}

type ClearQueueRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Errorcode *int32  `protobuf:"varint,2,opt,name=errorcode" json:"errorcode,omitempty"`
	Errormsg  *string `protobuf:"bytes,3,opt,name=errormsg" json:"errormsg,omitempty"`
}

func (x *ClearQueueRsp) Reset() {
	*x = ClearQueueRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_job_manager_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearQueueRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearQueueRsp) ProtoMessage() {}

func (x *ClearQueueRsp) ProtoReflect() protoreflect.Message {
	mi := &file_job_manager_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearQueueRsp.ProtoReflect.Descriptor instead.
func (*ClearQueueRsp) Descriptor() ([]byte, []int) {
	return file_job_manager_proto_rawDescGZIP(), []int{31}
}

func (x *ClearQueueRsp) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *ClearQueueRsp) GetErrorcode() int32 {
	if x != nil && x.Errorcode != nil {
		return *x.Errorcode
	}
	return 0
}

func (x *ClearQueueRsp) GetErrormsg() string {
	if x != nil && x.Errormsg != nil {
		return *x.Errormsg
	}
	return ""
}

var File_job_manager_proto protoreflect.FileDescriptor

var file_job_manager_proto_rawDesc = []byte{
	0x0a, 0x11, 0x6a, 0x6f, 0x62, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x09, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x2e, 0x6a, 0x6f, 0x62, 0x1a, 0x10,
	0x6a, 0x6f, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xe1, 0x02, 0x0a, 0x09, 0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x29,
	0x0a, 0x0f, 0x72, 0x75, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65,
	0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x0d, 0x72, 0x75, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x12, 0x26, 0x0a, 0x0b, 0x61, 0x74, 0x6d,
	0x6f, 0x73, 0x74, 0x5f, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x6d, 0x6f, 0x73, 0x74, 0x4f, 0x6e, 0x63,
	0x65, 0x12, 0x28, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x61,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0b,
	0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x65, 0x61, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x65,
	0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x52,
	0x75, 0x6e, 0x53, 0x65, 0x63, 0x12, 0x2f, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x63, 0x6c,
	0x65, 0x61, 0x72, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x6f, 0x43, 0x6c, 0x65, 0x61,
	0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x26, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x29,
	0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x35, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x52,
	0x65, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x0f, 0x6a, 0x6f, 0x62,
	0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x0d, 0x6a, 0x6f, 0x62, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0xc0, 0x03, 0x0a, 0x07, 0x4a, 0x6f, 0x62, 0x4c, 0x69, 0x66, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x65,
	0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x6f,
	0x62, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a,
	0x6f, 0x62, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x73, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x5f, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x72, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x74,
	0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0x36, 0x0a, 0x08, 0x4a, 0x6f, 0x62, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22,
	0x71, 0x0a, 0x09, 0x4a, 0x6f, 0x62, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x6d,
	0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x6d,
	0x73, 0x67, 0x22, 0x8a, 0x02, 0x0a, 0x07, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x4a, 0x6f,
	0x62, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x2c, 0x0a,
	0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x79, 0x6f, 0x75, 0x74, 0x75, 0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x4a, 0x6f, 0x62, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x79, 0x6f,
	0x75, 0x74, 0x75, 0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x04, 0x6c, 0x69, 0x66,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x2e,
	0x6a, 0x6f, 0x62, 0x2e, 0x4a, 0x6f, 0x62, 0x4c, 0x69, 0x66, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x66,
	0x65, 0x12, 0x2c, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x4a, 0x6f,
	0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22,
	0x51, 0x0a, 0x0f, 0x4a, 0x6f, 0x62, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x77, 0x61, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x49, 0x0a, 0x0d, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x4a, 0x6f, 0x62, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x54, 0x79, 0x70, 0x65, 0x22, 0x7f, 0x0a,
	0x0d, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x4a, 0x6f, 0x62, 0x49, 0x64, 0x52, 0x73, 0x70, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x6d, 0x73, 0x67, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x22, 0xe9,
	0x01, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6a,
	0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a,
	0x6f, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x6f, 0x75, 0x74,
	0x75, 0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x08,
	0x6a, 0x6f, 0x62, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x33, 0x0a, 0x0a, 0x6a, 0x6f, 0x62, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79,
	0x6f, 0x75, 0x74, 0x75, 0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x09, 0x6a, 0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x15, 0x0a,
	0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a,
	0x6f, 0x62, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x61,
	0x78, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x7b, 0x0a, 0x09, 0x41, 0x64,
	0x64, 0x4a, 0x6f, 0x62, 0x52, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x6d, 0x73, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x6d, 0x73, 0x67,
	0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x22, 0x69, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0a,
	0x6e, 0x65, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x09, 0x6e, 0x65, 0x65, 0x64, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x22, 0xc7, 0x01, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x52,
	0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x6d, 0x73, 0x67, 0x12, 0x2d, 0x0a, 0x08, 0x6a,
	0x6f, 0x62, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x79, 0x6f, 0x75, 0x74, 0x75, 0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x09, 0x6a, 0x6f,
	0x62, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x6f, 0x75, 0x74, 0x75, 0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x52, 0x08, 0x6a, 0x6f, 0x62, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x68, 0x0a, 0x12,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x22, 0xb7, 0x01, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x73, 0x70, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x6d, 0x73, 0x67, 0x12, 0x2f, 0x0a, 0x09, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x6f, 0x75, 0x74,
	0x75, 0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6a,
	0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6a, 0x6f, 0x62, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x73,
	0x22, 0x8a, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1f, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x07, 0x76, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x65, 0x12, 0x19, 0x0a, 0x04, 0x66, 0x61, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x04, 0x66, 0x61, 0x73, 0x74, 0x22, 0x52, 0x0a,
	0x0a, 0x4a, 0x6f, 0x62, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x6a,
	0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62,
	0x49, 0x64, 0x12, 0x2d, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x2e, 0x6a, 0x6f, 0x62,
	0x2e, 0x4a, 0x6f, 0x62, 0x4c, 0x69, 0x66, 0x65, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x4c, 0x69, 0x66,
	0x65, 0x22, 0x4b, 0x0a, 0x0d, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6a, 0x6f, 0x62, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6a, 0x6f, 0x62, 0x4e, 0x75, 0x6d, 0x22, 0xb2,
	0x02, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x52, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x6d, 0x73, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x6d, 0x73, 0x67, 0x12, 0x22,
	0x0a, 0x0d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4a, 0x6f, 0x62, 0x4e,
	0x75, 0x6d, 0x12, 0x20, 0x0a, 0x0c, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x77, 0x61, 0x69, 0x74, 0x4a, 0x6f,
	0x62, 0x4e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0b, 0x72, 0x75, 0x6e, 0x5f, 0x6a, 0x6f, 0x62, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x75, 0x6e, 0x4a, 0x6f,
	0x62, 0x4e, 0x75, 0x6d, 0x12, 0x29, 0x0a, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x4a,
	0x6f, 0x62, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x12,
	0x32, 0x0a, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x07, 0x77, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x73, 0x22, 0x4e, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x54,
	0x79, 0x70, 0x65, 0x22, 0xa3, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x6d, 0x73, 0x67, 0x12, 0x34, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x2e, 0x6a, 0x6f, 0x62,
	0x2e, 0x4a, 0x6f, 0x62, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x52, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x44, 0x0a, 0x0c, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x22,
	0x67, 0x0a, 0x0c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4a, 0x6f, 0x62, 0x52, 0x73, 0x70, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x6d, 0x73, 0x67, 0x22, 0x45, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x22,
	0x68, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x73, 0x70,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x6d, 0x73, 0x67, 0x22, 0x87, 0x01, 0x0a, 0x0b, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x6f, 0x62, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f, 0x62, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0xcb, 0x01, 0x0a, 0x0b, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62,
	0x52, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x6d, 0x73, 0x67, 0x12, 0x15, 0x0a, 0x06,
	0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f,
	0x62, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x09, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x2e, 0x6a,
	0x6f, 0x62, 0x2e, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x08, 0x6a, 0x6f, 0x62,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x22, 0xcf, 0x02, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4a, 0x6f, 0x62, 0x52,
	0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x0a, 0x6a, 0x6f, 0x62, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x79,
	0x6f, 0x75, 0x74, 0x75, 0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x09, 0x6a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a,
	0x0a, 0x6a, 0x6f, 0x62, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x4a, 0x6f,
	0x62, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x09, 0x6a, 0x6f, 0x62, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a,
	0x0a, 0x11, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x65, 0x73, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x6a, 0x6f, 0x62, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6a, 0x6f, 0x62, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6a, 0x6f,
	0x62, 0x5f, 0x72, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6a, 0x6f, 0x62,
	0x52, 0x65, 0x74, 0x22, 0x67, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4a, 0x6f, 0x62,
	0x52, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x6d, 0x73, 0x67, 0x22, 0xc5, 0x01, 0x0a,
	0x0f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x6a, 0x6f, 0x62, 0x49, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6a, 0x6f, 0x62, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6a, 0x6f, 0x62, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x4e, 0x75, 0x6d, 0x22, 0x6a, 0x0a, 0x0f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x52, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x6d, 0x73, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x6d, 0x73, 0x67,
	0x22, 0x49, 0x0a, 0x0d, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x54, 0x79, 0x70, 0x65, 0x22, 0x68, 0x0a, 0x0d, 0x43,
	0x6c, 0x65, 0x61, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x6d, 0x73, 0x67, 0x32, 0xc0, 0x06, 0x0a, 0x11, 0x4a, 0x6f, 0x62, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x4a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x18, 0x2e, 0x79, 0x6f, 0x75, 0x74,
	0x75, 0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x4a, 0x6f, 0x62, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x2e, 0x6a, 0x6f, 0x62, 0x2e,
	0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x4a, 0x6f, 0x62, 0x49, 0x64, 0x52, 0x73, 0x70, 0x12, 0x34, 0x0a,
	0x06, 0x41, 0x64, 0x64, 0x4a, 0x6f, 0x62, 0x12, 0x14, 0x2e, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x2e,
	0x6a, 0x6f, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e,
	0x79, 0x6f, 0x75, 0x74, 0x75, 0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x4a, 0x6f, 0x62,
	0x52, 0x73, 0x70, 0x12, 0x3a, 0x0a, 0x08, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x12,
	0x16, 0x2e, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x2e,
	0x6a, 0x6f, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x52, 0x73, 0x70, 0x12,
	0x4f, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x12, 0x1d, 0x2e, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x1d, 0x2e, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x73, 0x70,
	0x12, 0x4f, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x12, 0x1d, 0x2e, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x2e, 0x6a, 0x6f, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x73,
	0x70, 0x12, 0x4f, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x2e, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x2e, 0x6a, 0x6f, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x2e, 0x6a, 0x6f, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x52,
	0x73, 0x70, 0x12, 0x3d, 0x0a, 0x09, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4a, 0x6f, 0x62, 0x12,
	0x17, 0x2e, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x79, 0x6f, 0x75, 0x74, 0x75,
	0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4a, 0x6f, 0x62, 0x52, 0x73,
	0x70, 0x12, 0x40, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4a, 0x6f, 0x62, 0x12,
	0x18, 0x2e, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x79, 0x6f, 0x75, 0x74,
	0x75, 0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4a, 0x6f, 0x62,
	0x52, 0x73, 0x70, 0x12, 0x3a, 0x0a, 0x08, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x12,
	0x16, 0x2e, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x2e,
	0x6a, 0x6f, 0x62, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x52, 0x73, 0x70, 0x12,
	0x3d, 0x0a, 0x09, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4a, 0x6f, 0x62, 0x12, 0x17, 0x2e, 0x79,
	0x6f, 0x75, 0x74, 0x75, 0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4a,
	0x6f, 0x62, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x2e, 0x6a, 0x6f,
	0x62, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x73, 0x70, 0x12, 0x46,
	0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x1a,
	0x2e, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x79, 0x6f, 0x75,
	0x74, 0x75, 0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x52, 0x73, 0x70, 0x12, 0x40, 0x0a, 0x0a, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x12, 0x18, 0x2e, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x2e, 0x6a, 0x6f, 0x62,
	0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x18,
	0x2e, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x73, 0x70, 0x42, 0x12, 0x5a, 0x0d, 0x61, 0x70, 0x69, 0x2f,
	0x79, 0x6f, 0x75, 0x74, 0x75, 0x5f, 0x6a, 0x6f, 0x62, 0x80, 0x01, 0x01,
}

var (
	file_job_manager_proto_rawDescOnce sync.Once
	file_job_manager_proto_rawDescData = file_job_manager_proto_rawDesc
)

func file_job_manager_proto_rawDescGZIP() []byte {
	file_job_manager_proto_rawDescOnce.Do(func() {
		file_job_manager_proto_rawDescData = protoimpl.X.CompressGZIP(file_job_manager_proto_rawDescData)
	})
	return file_job_manager_proto_rawDescData
}

var file_job_manager_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_job_manager_proto_goTypes = []interface{}{
	(*JobConfig)(nil),          // 0: youtu.job.JobConfig
	(*JobLife)(nil),            // 1: youtu.job.JobLife
	(*JobInput)(nil),           // 2: youtu.job.JobInput
	(*JobOutput)(nil),          // 3: youtu.job.JobOutput
	(*JobInfo)(nil),            // 4: youtu.job.JobInfo
	(*JobQueueRuntime)(nil),    // 5: youtu.job.JobQueueRuntime
	(*AllocJobIdReq)(nil),      // 6: youtu.job.AllocJobIdReq
	(*AllocJobIdRsp)(nil),      // 7: youtu.job.AllocJobIdRsp
	(*AddJobReq)(nil),          // 8: youtu.job.AddJobReq
	(*AddJobRsp)(nil),          // 9: youtu.job.AddJobRsp
	(*QueryJobReq)(nil),        // 10: youtu.job.QueryJobReq
	(*QueryJobRsp)(nil),        // 11: youtu.job.QueryJobRsp
	(*QueryJobInQueueReq)(nil), // 12: youtu.job.QueryJobInQueueReq
	(*QueryJobInQueueRsp)(nil), // 13: youtu.job.QueryJobInQueueRsp
	(*GetQueueSummaryReq)(nil), // 14: youtu.job.GetQueueSummaryReq
	(*JobSummary)(nil),         // 15: youtu.job.JobSummary
	(*WorkerSummary)(nil),      // 16: youtu.job.WorkerSummary
	(*GetQueueSummaryRsp)(nil), // 17: youtu.job.GetQueueSummaryRsp
	(*GetQueueRuntimeReq)(nil), // 18: youtu.job.GetQueueRuntimeReq
	(*GetQueueRuntimeRsp)(nil), // 19: youtu.job.GetQueueRuntimeRsp
	(*CancelJobReq)(nil),       // 20: youtu.job.CancelJobReq
	(*CancelJobRsp)(nil),       // 21: youtu.job.CancelJobRsp
	(*RestartJobReq)(nil),      // 22: youtu.job.RestartJobReq
	(*RestartJobRsp)(nil),      // 23: youtu.job.RestartJobRsp
	(*FetchJobReq)(nil),        // 24: youtu.job.FetchJobReq
	(*FetchJobRsp)(nil),        // 25: youtu.job.FetchJobRsp
	(*ReportJobReq)(nil),       // 26: youtu.job.ReportJobReq
	(*ReportJobRsp)(nil),       // 27: youtu.job.ReportJobRsp
	(*ReportWorkerReq)(nil),    // 28: youtu.job.ReportWorkerReq
	(*ReportWorkerRsp)(nil),    // 29: youtu.job.ReportWorkerRsp
	(*ClearQueueReq)(nil),      // 30: youtu.job.ClearQueueReq
	(*ClearQueueRsp)(nil),      // 31: youtu.job.ClearQueueRsp
	(JobStatus)(0),             // 32: youtu.job.JobStatus
}
var file_job_manager_proto_depIdxs = []int32{
	2,  // 0: youtu.job.JobInfo.input:type_name -> youtu.job.JobInput
	3,  // 1: youtu.job.JobInfo.output:type_name -> youtu.job.JobOutput
	32, // 2: youtu.job.JobInfo.status:type_name -> youtu.job.JobStatus
	1,  // 3: youtu.job.JobInfo.life:type_name -> youtu.job.JobLife
	0,  // 4: youtu.job.JobInfo.config:type_name -> youtu.job.JobConfig
	2,  // 5: youtu.job.AddJobReq.job_input:type_name -> youtu.job.JobInput
	0,  // 6: youtu.job.AddJobReq.job_config:type_name -> youtu.job.JobConfig
	4,  // 7: youtu.job.QueryJobRsp.job_info:type_name -> youtu.job.JobInfo
	2,  // 8: youtu.job.QueryJobRsp.job_input:type_name -> youtu.job.JobInput
	4,  // 9: youtu.job.QueryJobInQueueRsp.job_infos:type_name -> youtu.job.JobInfo
	1,  // 10: youtu.job.JobSummary.job_life:type_name -> youtu.job.JobLife
	15, // 11: youtu.job.GetQueueSummaryRsp.jobs:type_name -> youtu.job.JobSummary
	16, // 12: youtu.job.GetQueueSummaryRsp.workers:type_name -> youtu.job.WorkerSummary
	5,  // 13: youtu.job.GetQueueRuntimeRsp.runtime:type_name -> youtu.job.JobQueueRuntime
	2,  // 14: youtu.job.FetchJobRsp.job_input:type_name -> youtu.job.JobInput
	32, // 15: youtu.job.ReportJobReq.job_status:type_name -> youtu.job.JobStatus
	3,  // 16: youtu.job.ReportJobReq.job_output:type_name -> youtu.job.JobOutput
	6,  // 17: youtu.job.JobManagerService.AllocJobId:input_type -> youtu.job.AllocJobIdReq
	8,  // 18: youtu.job.JobManagerService.AddJob:input_type -> youtu.job.AddJobReq
	10, // 19: youtu.job.JobManagerService.QueryJob:input_type -> youtu.job.QueryJobReq
	12, // 20: youtu.job.JobManagerService.QueryJobInQueue:input_type -> youtu.job.QueryJobInQueueReq
	14, // 21: youtu.job.JobManagerService.GetQueueSummary:input_type -> youtu.job.GetQueueSummaryReq
	18, // 22: youtu.job.JobManagerService.GetQueueRuntime:input_type -> youtu.job.GetQueueRuntimeReq
	20, // 23: youtu.job.JobManagerService.CancelJob:input_type -> youtu.job.CancelJobReq
	22, // 24: youtu.job.JobManagerService.RestartJob:input_type -> youtu.job.RestartJobReq
	24, // 25: youtu.job.JobManagerService.FetchJob:input_type -> youtu.job.FetchJobReq
	26, // 26: youtu.job.JobManagerService.ReportJob:input_type -> youtu.job.ReportJobReq
	28, // 27: youtu.job.JobManagerService.ReportWorker:input_type -> youtu.job.ReportWorkerReq
	30, // 28: youtu.job.JobManagerService.ClearQueue:input_type -> youtu.job.ClearQueueReq
	7,  // 29: youtu.job.JobManagerService.AllocJobId:output_type -> youtu.job.AllocJobIdRsp
	9,  // 30: youtu.job.JobManagerService.AddJob:output_type -> youtu.job.AddJobRsp
	11, // 31: youtu.job.JobManagerService.QueryJob:output_type -> youtu.job.QueryJobRsp
	13, // 32: youtu.job.JobManagerService.QueryJobInQueue:output_type -> youtu.job.QueryJobInQueueRsp
	17, // 33: youtu.job.JobManagerService.GetQueueSummary:output_type -> youtu.job.GetQueueSummaryRsp
	19, // 34: youtu.job.JobManagerService.GetQueueRuntime:output_type -> youtu.job.GetQueueRuntimeRsp
	21, // 35: youtu.job.JobManagerService.CancelJob:output_type -> youtu.job.CancelJobRsp
	23, // 36: youtu.job.JobManagerService.RestartJob:output_type -> youtu.job.RestartJobRsp
	25, // 37: youtu.job.JobManagerService.FetchJob:output_type -> youtu.job.FetchJobRsp
	27, // 38: youtu.job.JobManagerService.ReportJob:output_type -> youtu.job.ReportJobRsp
	29, // 39: youtu.job.JobManagerService.ReportWorker:output_type -> youtu.job.ReportWorkerRsp
	31, // 40: youtu.job.JobManagerService.ClearQueue:output_type -> youtu.job.ClearQueueRsp
	29, // [29:41] is the sub-list for method output_type
	17, // [17:29] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_job_manager_proto_init() }
func file_job_manager_proto_init() {
	if File_job_manager_proto != nil {
		return
	}
	file_job_public_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_job_manager_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_job_manager_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobLife); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_job_manager_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_job_manager_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_job_manager_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_job_manager_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobQueueRuntime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_job_manager_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllocJobIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_job_manager_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllocJobIdRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_job_manager_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddJobReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_job_manager_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddJobRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_job_manager_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryJobReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_job_manager_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryJobRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_job_manager_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryJobInQueueReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_job_manager_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryJobInQueueRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_job_manager_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetQueueSummaryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_job_manager_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_job_manager_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkerSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_job_manager_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetQueueSummaryRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_job_manager_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetQueueRuntimeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_job_manager_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetQueueRuntimeRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_job_manager_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelJobReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_job_manager_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelJobRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_job_manager_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestartJobReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_job_manager_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestartJobRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_job_manager_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchJobReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_job_manager_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchJobRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_job_manager_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportJobReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_job_manager_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportJobRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_job_manager_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportWorkerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_job_manager_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportWorkerRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_job_manager_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearQueueReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_job_manager_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearQueueRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_job_manager_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_job_manager_proto_goTypes,
		DependencyIndexes: file_job_manager_proto_depIdxs,
		MessageInfos:      file_job_manager_proto_msgTypes,
	}.Build()
	File_job_manager_proto = out.File
	file_job_manager_proto_rawDesc = nil
	file_job_manager_proto_goTypes = nil
	file_job_manager_proto_depIdxs = nil
}
