// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.5.0
// source: zeus_api.proto

package youtu_zeus

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ZeusService_Retrieve_FullMethodName                 = "/youtu.zeus.ZeusService/Retrieve"
	ZeusService_AddFeas_FullMethodName                  = "/youtu.zeus.ZeusService/AddFeas"
	ZeusService_GetFeas_FullMethodName                  = "/youtu.zeus.ZeusService/GetFeas"
	ZeusService_GetFeasByEntity_FullMethodName          = "/youtu.zeus.ZeusService/GetFeasByEntity"
	ZeusService_UpdateFeas_FullMethodName               = "/youtu.zeus.ZeusService/UpdateFeas"
	ZeusService_DeleteFeas_FullMethodName               = "/youtu.zeus.ZeusService/DeleteFeas"
	ZeusService_DeleteEntitys_FullMethodName            = "/youtu.zeus.ZeusService/DeleteEntitys"
	ZeusService_UpdateEntityId_FullMethodName           = "/youtu.zeus.ZeusService/UpdateEntityId"
	ZeusService_UpdateFeatures_FullMethodName           = "/youtu.zeus.ZeusService/UpdateFeatures"
	ZeusService_UpdateExtendInfos_FullMethodName        = "/youtu.zeus.ZeusService/UpdateExtendInfos"
	ZeusService_TriggerPageUpdate_FullMethodName        = "/youtu.zeus.ZeusService/TriggerPageUpdate"
	ZeusService_GetGroupPageIds_FullMethodName          = "/youtu.zeus.ZeusService/GetGroupPageIds"
	ZeusService_GetPageFeaEntityIds_FullMethodName      = "/youtu.zeus.ZeusService/GetPageFeaEntityIds"
	ZeusService_GetPageFeatures_FullMethodName          = "/youtu.zeus.ZeusService/GetPageFeatures"
	ZeusService_ClearFeatures_FullMethodName            = "/youtu.zeus.ZeusService/ClearFeatures"
	ZeusService_CreateGroup_FullMethodName              = "/youtu.zeus.ZeusService/CreateGroup"
	ZeusService_GetGroupSize_FullMethodName             = "/youtu.zeus.ZeusService/GetGroupSize"
	ZeusService_GetGroupFeaIds_FullMethodName           = "/youtu.zeus.ZeusService/GetGroupFeaIds"
	ZeusService_GetGroupEntityIds_FullMethodName        = "/youtu.zeus.ZeusService/GetGroupEntityIds"
	ZeusService_GetGroupDetail_FullMethodName           = "/youtu.zeus.ZeusService/GetGroupDetail"
	ZeusService_TruncateGroup_FullMethodName            = "/youtu.zeus.ZeusService/TruncateGroup"
	ZeusService_AddFeatureConfig_FullMethodName         = "/youtu.zeus.ZeusService/AddFeatureConfig"
	ZeusService_DeleteFeatureConfig_FullMethodName      = "/youtu.zeus.ZeusService/DeleteFeatureConfig"
	ZeusService_DeleteGroup_FullMethodName              = "/youtu.zeus.ZeusService/DeleteGroup"
	ZeusService_DeleteGroupAsync_FullMethodName         = "/youtu.zeus.ZeusService/DeleteGroupAsync"
	ZeusService_GetDeleteGroupAsyncState_FullMethodName = "/youtu.zeus.ZeusService/GetDeleteGroupAsyncState"
	ZeusService_TrimCache_FullMethodName                = "/youtu.zeus.ZeusService/TrimCache"
	ZeusService_DeleteCache_FullMethodName              = "/youtu.zeus.ZeusService/DeleteCache"
	ZeusService_WarmUpCache_FullMethodName              = "/youtu.zeus.ZeusService/WarmUpCache"
)

// ZeusServiceClient is the client API for ZeusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ZeusServiceClient interface {
	Retrieve(ctx context.Context, in *RetrieveReq, opts ...grpc.CallOption) (*RetrieveRsp, error)
	// fea related
	AddFeas(ctx context.Context, in *AddFeasReq, opts ...grpc.CallOption) (*AddFeasRsp, error)
	GetFeas(ctx context.Context, in *GetFeasReq, opts ...grpc.CallOption) (*GetFeasRsp, error)
	GetFeasByEntity(ctx context.Context, in *GetFeasByEntityReq, opts ...grpc.CallOption) (*GetFeasByEntityRsp, error)
	UpdateFeas(ctx context.Context, in *UpdateFeasReq, opts ...grpc.CallOption) (*UpdateFeasRsp, error)
	DeleteFeas(ctx context.Context, in *DeleteFeasReq, opts ...grpc.CallOption) (*DeleteFeasRsp, error)
	DeleteEntitys(ctx context.Context, in *DeleteEntitysReq, opts ...grpc.CallOption) (*DeleteEntitysRsp, error)
	UpdateEntityId(ctx context.Context, in *UpdateEntityIdReq, opts ...grpc.CallOption) (*UpdateEntityIdRsp, error)
	UpdateFeatures(ctx context.Context, in *UpdateFeaturesReq, opts ...grpc.CallOption) (*UpdateFeaturesRsp, error)
	UpdateExtendInfos(ctx context.Context, in *UpdateExtendInfosReq, opts ...grpc.CallOption) (*UpdateExtendInfosRsp, error)
	// page related
	TriggerPageUpdate(ctx context.Context, in *TriggerPageUpdateReq, opts ...grpc.CallOption) (*TriggerPageUpdateRsp, error)
	GetGroupPageIds(ctx context.Context, in *GetGroupPageIdsReq, opts ...grpc.CallOption) (*GetGroupPageIdsRsp, error)
	GetPageFeaEntityIds(ctx context.Context, in *GetPageFeaEntityIdsReq, opts ...grpc.CallOption) (*GetPageFeaEntityIdsRsp, error)
	GetPageFeatures(ctx context.Context, in *GetPageFeaturesReq, opts ...grpc.CallOption) (*GetPageFeaturesRsp, error)
	ClearFeatures(ctx context.Context, in *ClearFeaturesReq, opts ...grpc.CallOption) (*ClearFeaturesRsp, error)
	// group related
	CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*CreateGroupRsp, error)
	GetGroupSize(ctx context.Context, in *GetGroupSizeReq, opts ...grpc.CallOption) (*GetGroupSizeRsp, error)
	GetGroupFeaIds(ctx context.Context, in *GetGroupFeaIdsReq, opts ...grpc.CallOption) (*GetGroupFeaIdsRsp, error)
	GetGroupEntityIds(ctx context.Context, in *GetGroupEntityIdsReq, opts ...grpc.CallOption) (*GetGroupEntityIdsRsp, error)
	GetGroupDetail(ctx context.Context, in *GetGroupDetailReq, opts ...grpc.CallOption) (*GetGroupDetailRsp, error)
	TruncateGroup(ctx context.Context, in *TruncateGroupReq, opts ...grpc.CallOption) (*TruncateGroupRsp, error)
	AddFeatureConfig(ctx context.Context, in *AddFeatureConfigReq, opts ...grpc.CallOption) (*AddFeatureConfigRsp, error)
	DeleteFeatureConfig(ctx context.Context, in *DeleteFeatureConfigReq, opts ...grpc.CallOption) (*DeleteFeatureConfigRsp, error)
	DeleteGroup(ctx context.Context, in *DeleteGroupReq, opts ...grpc.CallOption) (*DeleteGroupRsp, error)
	DeleteGroupAsync(ctx context.Context, in *DeleteGroupReq, opts ...grpc.CallOption) (*DeleteGroupRsp, error)
	GetDeleteGroupAsyncState(ctx context.Context, in *GetDeleteGroupAsyncStateReq, opts ...grpc.CallOption) (*GetDeleteGroupAsyncStateRsp, error)
	// cache related
	TrimCache(ctx context.Context, in *TrimCacheReq, opts ...grpc.CallOption) (*TrimCacheRsp, error)
	DeleteCache(ctx context.Context, in *DeleteCacheReq, opts ...grpc.CallOption) (*DeleteCacheRsp, error)
	WarmUpCache(ctx context.Context, in *WarmUpCacheReq, opts ...grpc.CallOption) (*WarmUpCacheRsp, error)
}

type zeusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewZeusServiceClient(cc grpc.ClientConnInterface) ZeusServiceClient {
	return &zeusServiceClient{cc}
}

func (c *zeusServiceClient) Retrieve(ctx context.Context, in *RetrieveReq, opts ...grpc.CallOption) (*RetrieveRsp, error) {
	out := new(RetrieveRsp)
	err := c.cc.Invoke(ctx, ZeusService_Retrieve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zeusServiceClient) AddFeas(ctx context.Context, in *AddFeasReq, opts ...grpc.CallOption) (*AddFeasRsp, error) {
	out := new(AddFeasRsp)
	err := c.cc.Invoke(ctx, ZeusService_AddFeas_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zeusServiceClient) GetFeas(ctx context.Context, in *GetFeasReq, opts ...grpc.CallOption) (*GetFeasRsp, error) {
	out := new(GetFeasRsp)
	err := c.cc.Invoke(ctx, ZeusService_GetFeas_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zeusServiceClient) GetFeasByEntity(ctx context.Context, in *GetFeasByEntityReq, opts ...grpc.CallOption) (*GetFeasByEntityRsp, error) {
	out := new(GetFeasByEntityRsp)
	err := c.cc.Invoke(ctx, ZeusService_GetFeasByEntity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zeusServiceClient) UpdateFeas(ctx context.Context, in *UpdateFeasReq, opts ...grpc.CallOption) (*UpdateFeasRsp, error) {
	out := new(UpdateFeasRsp)
	err := c.cc.Invoke(ctx, ZeusService_UpdateFeas_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zeusServiceClient) DeleteFeas(ctx context.Context, in *DeleteFeasReq, opts ...grpc.CallOption) (*DeleteFeasRsp, error) {
	out := new(DeleteFeasRsp)
	err := c.cc.Invoke(ctx, ZeusService_DeleteFeas_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zeusServiceClient) DeleteEntitys(ctx context.Context, in *DeleteEntitysReq, opts ...grpc.CallOption) (*DeleteEntitysRsp, error) {
	out := new(DeleteEntitysRsp)
	err := c.cc.Invoke(ctx, ZeusService_DeleteEntitys_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zeusServiceClient) UpdateEntityId(ctx context.Context, in *UpdateEntityIdReq, opts ...grpc.CallOption) (*UpdateEntityIdRsp, error) {
	out := new(UpdateEntityIdRsp)
	err := c.cc.Invoke(ctx, ZeusService_UpdateEntityId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zeusServiceClient) UpdateFeatures(ctx context.Context, in *UpdateFeaturesReq, opts ...grpc.CallOption) (*UpdateFeaturesRsp, error) {
	out := new(UpdateFeaturesRsp)
	err := c.cc.Invoke(ctx, ZeusService_UpdateFeatures_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zeusServiceClient) UpdateExtendInfos(ctx context.Context, in *UpdateExtendInfosReq, opts ...grpc.CallOption) (*UpdateExtendInfosRsp, error) {
	out := new(UpdateExtendInfosRsp)
	err := c.cc.Invoke(ctx, ZeusService_UpdateExtendInfos_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zeusServiceClient) TriggerPageUpdate(ctx context.Context, in *TriggerPageUpdateReq, opts ...grpc.CallOption) (*TriggerPageUpdateRsp, error) {
	out := new(TriggerPageUpdateRsp)
	err := c.cc.Invoke(ctx, ZeusService_TriggerPageUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zeusServiceClient) GetGroupPageIds(ctx context.Context, in *GetGroupPageIdsReq, opts ...grpc.CallOption) (*GetGroupPageIdsRsp, error) {
	out := new(GetGroupPageIdsRsp)
	err := c.cc.Invoke(ctx, ZeusService_GetGroupPageIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zeusServiceClient) GetPageFeaEntityIds(ctx context.Context, in *GetPageFeaEntityIdsReq, opts ...grpc.CallOption) (*GetPageFeaEntityIdsRsp, error) {
	out := new(GetPageFeaEntityIdsRsp)
	err := c.cc.Invoke(ctx, ZeusService_GetPageFeaEntityIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zeusServiceClient) GetPageFeatures(ctx context.Context, in *GetPageFeaturesReq, opts ...grpc.CallOption) (*GetPageFeaturesRsp, error) {
	out := new(GetPageFeaturesRsp)
	err := c.cc.Invoke(ctx, ZeusService_GetPageFeatures_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zeusServiceClient) ClearFeatures(ctx context.Context, in *ClearFeaturesReq, opts ...grpc.CallOption) (*ClearFeaturesRsp, error) {
	out := new(ClearFeaturesRsp)
	err := c.cc.Invoke(ctx, ZeusService_ClearFeatures_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zeusServiceClient) CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*CreateGroupRsp, error) {
	out := new(CreateGroupRsp)
	err := c.cc.Invoke(ctx, ZeusService_CreateGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zeusServiceClient) GetGroupSize(ctx context.Context, in *GetGroupSizeReq, opts ...grpc.CallOption) (*GetGroupSizeRsp, error) {
	out := new(GetGroupSizeRsp)
	err := c.cc.Invoke(ctx, ZeusService_GetGroupSize_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zeusServiceClient) GetGroupFeaIds(ctx context.Context, in *GetGroupFeaIdsReq, opts ...grpc.CallOption) (*GetGroupFeaIdsRsp, error) {
	out := new(GetGroupFeaIdsRsp)
	err := c.cc.Invoke(ctx, ZeusService_GetGroupFeaIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zeusServiceClient) GetGroupEntityIds(ctx context.Context, in *GetGroupEntityIdsReq, opts ...grpc.CallOption) (*GetGroupEntityIdsRsp, error) {
	out := new(GetGroupEntityIdsRsp)
	err := c.cc.Invoke(ctx, ZeusService_GetGroupEntityIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zeusServiceClient) GetGroupDetail(ctx context.Context, in *GetGroupDetailReq, opts ...grpc.CallOption) (*GetGroupDetailRsp, error) {
	out := new(GetGroupDetailRsp)
	err := c.cc.Invoke(ctx, ZeusService_GetGroupDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zeusServiceClient) TruncateGroup(ctx context.Context, in *TruncateGroupReq, opts ...grpc.CallOption) (*TruncateGroupRsp, error) {
	out := new(TruncateGroupRsp)
	err := c.cc.Invoke(ctx, ZeusService_TruncateGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zeusServiceClient) AddFeatureConfig(ctx context.Context, in *AddFeatureConfigReq, opts ...grpc.CallOption) (*AddFeatureConfigRsp, error) {
	out := new(AddFeatureConfigRsp)
	err := c.cc.Invoke(ctx, ZeusService_AddFeatureConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zeusServiceClient) DeleteFeatureConfig(ctx context.Context, in *DeleteFeatureConfigReq, opts ...grpc.CallOption) (*DeleteFeatureConfigRsp, error) {
	out := new(DeleteFeatureConfigRsp)
	err := c.cc.Invoke(ctx, ZeusService_DeleteFeatureConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zeusServiceClient) DeleteGroup(ctx context.Context, in *DeleteGroupReq, opts ...grpc.CallOption) (*DeleteGroupRsp, error) {
	out := new(DeleteGroupRsp)
	err := c.cc.Invoke(ctx, ZeusService_DeleteGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zeusServiceClient) DeleteGroupAsync(ctx context.Context, in *DeleteGroupReq, opts ...grpc.CallOption) (*DeleteGroupRsp, error) {
	out := new(DeleteGroupRsp)
	err := c.cc.Invoke(ctx, ZeusService_DeleteGroupAsync_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zeusServiceClient) GetDeleteGroupAsyncState(ctx context.Context, in *GetDeleteGroupAsyncStateReq, opts ...grpc.CallOption) (*GetDeleteGroupAsyncStateRsp, error) {
	out := new(GetDeleteGroupAsyncStateRsp)
	err := c.cc.Invoke(ctx, ZeusService_GetDeleteGroupAsyncState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zeusServiceClient) TrimCache(ctx context.Context, in *TrimCacheReq, opts ...grpc.CallOption) (*TrimCacheRsp, error) {
	out := new(TrimCacheRsp)
	err := c.cc.Invoke(ctx, ZeusService_TrimCache_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zeusServiceClient) DeleteCache(ctx context.Context, in *DeleteCacheReq, opts ...grpc.CallOption) (*DeleteCacheRsp, error) {
	out := new(DeleteCacheRsp)
	err := c.cc.Invoke(ctx, ZeusService_DeleteCache_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zeusServiceClient) WarmUpCache(ctx context.Context, in *WarmUpCacheReq, opts ...grpc.CallOption) (*WarmUpCacheRsp, error) {
	out := new(WarmUpCacheRsp)
	err := c.cc.Invoke(ctx, ZeusService_WarmUpCache_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZeusServiceServer is the server API for ZeusService service.
// All implementations must embed UnimplementedZeusServiceServer
// for forward compatibility
type ZeusServiceServer interface {
	Retrieve(context.Context, *RetrieveReq) (*RetrieveRsp, error)
	// fea related
	AddFeas(context.Context, *AddFeasReq) (*AddFeasRsp, error)
	GetFeas(context.Context, *GetFeasReq) (*GetFeasRsp, error)
	GetFeasByEntity(context.Context, *GetFeasByEntityReq) (*GetFeasByEntityRsp, error)
	UpdateFeas(context.Context, *UpdateFeasReq) (*UpdateFeasRsp, error)
	DeleteFeas(context.Context, *DeleteFeasReq) (*DeleteFeasRsp, error)
	DeleteEntitys(context.Context, *DeleteEntitysReq) (*DeleteEntitysRsp, error)
	UpdateEntityId(context.Context, *UpdateEntityIdReq) (*UpdateEntityIdRsp, error)
	UpdateFeatures(context.Context, *UpdateFeaturesReq) (*UpdateFeaturesRsp, error)
	UpdateExtendInfos(context.Context, *UpdateExtendInfosReq) (*UpdateExtendInfosRsp, error)
	// page related
	TriggerPageUpdate(context.Context, *TriggerPageUpdateReq) (*TriggerPageUpdateRsp, error)
	GetGroupPageIds(context.Context, *GetGroupPageIdsReq) (*GetGroupPageIdsRsp, error)
	GetPageFeaEntityIds(context.Context, *GetPageFeaEntityIdsReq) (*GetPageFeaEntityIdsRsp, error)
	GetPageFeatures(context.Context, *GetPageFeaturesReq) (*GetPageFeaturesRsp, error)
	ClearFeatures(context.Context, *ClearFeaturesReq) (*ClearFeaturesRsp, error)
	// group related
	CreateGroup(context.Context, *CreateGroupReq) (*CreateGroupRsp, error)
	GetGroupSize(context.Context, *GetGroupSizeReq) (*GetGroupSizeRsp, error)
	GetGroupFeaIds(context.Context, *GetGroupFeaIdsReq) (*GetGroupFeaIdsRsp, error)
	GetGroupEntityIds(context.Context, *GetGroupEntityIdsReq) (*GetGroupEntityIdsRsp, error)
	GetGroupDetail(context.Context, *GetGroupDetailReq) (*GetGroupDetailRsp, error)
	TruncateGroup(context.Context, *TruncateGroupReq) (*TruncateGroupRsp, error)
	AddFeatureConfig(context.Context, *AddFeatureConfigReq) (*AddFeatureConfigRsp, error)
	DeleteFeatureConfig(context.Context, *DeleteFeatureConfigReq) (*DeleteFeatureConfigRsp, error)
	DeleteGroup(context.Context, *DeleteGroupReq) (*DeleteGroupRsp, error)
	DeleteGroupAsync(context.Context, *DeleteGroupReq) (*DeleteGroupRsp, error)
	GetDeleteGroupAsyncState(context.Context, *GetDeleteGroupAsyncStateReq) (*GetDeleteGroupAsyncStateRsp, error)
	// cache related
	TrimCache(context.Context, *TrimCacheReq) (*TrimCacheRsp, error)
	DeleteCache(context.Context, *DeleteCacheReq) (*DeleteCacheRsp, error)
	WarmUpCache(context.Context, *WarmUpCacheReq) (*WarmUpCacheRsp, error)
	mustEmbedUnimplementedZeusServiceServer()
}

// UnimplementedZeusServiceServer must be embedded to have forward compatible implementations.
type UnimplementedZeusServiceServer struct {
}

func (UnimplementedZeusServiceServer) Retrieve(context.Context, *RetrieveReq) (*RetrieveRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedZeusServiceServer) AddFeas(context.Context, *AddFeasReq) (*AddFeasRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFeas not implemented")
}
func (UnimplementedZeusServiceServer) GetFeas(context.Context, *GetFeasReq) (*GetFeasRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeas not implemented")
}
func (UnimplementedZeusServiceServer) GetFeasByEntity(context.Context, *GetFeasByEntityReq) (*GetFeasByEntityRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeasByEntity not implemented")
}
func (UnimplementedZeusServiceServer) UpdateFeas(context.Context, *UpdateFeasReq) (*UpdateFeasRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFeas not implemented")
}
func (UnimplementedZeusServiceServer) DeleteFeas(context.Context, *DeleteFeasReq) (*DeleteFeasRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFeas not implemented")
}
func (UnimplementedZeusServiceServer) DeleteEntitys(context.Context, *DeleteEntitysReq) (*DeleteEntitysRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEntitys not implemented")
}
func (UnimplementedZeusServiceServer) UpdateEntityId(context.Context, *UpdateEntityIdReq) (*UpdateEntityIdRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEntityId not implemented")
}
func (UnimplementedZeusServiceServer) UpdateFeatures(context.Context, *UpdateFeaturesReq) (*UpdateFeaturesRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFeatures not implemented")
}
func (UnimplementedZeusServiceServer) UpdateExtendInfos(context.Context, *UpdateExtendInfosReq) (*UpdateExtendInfosRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExtendInfos not implemented")
}
func (UnimplementedZeusServiceServer) TriggerPageUpdate(context.Context, *TriggerPageUpdateReq) (*TriggerPageUpdateRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerPageUpdate not implemented")
}
func (UnimplementedZeusServiceServer) GetGroupPageIds(context.Context, *GetGroupPageIdsReq) (*GetGroupPageIdsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupPageIds not implemented")
}
func (UnimplementedZeusServiceServer) GetPageFeaEntityIds(context.Context, *GetPageFeaEntityIdsReq) (*GetPageFeaEntityIdsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPageFeaEntityIds not implemented")
}
func (UnimplementedZeusServiceServer) GetPageFeatures(context.Context, *GetPageFeaturesReq) (*GetPageFeaturesRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPageFeatures not implemented")
}
func (UnimplementedZeusServiceServer) ClearFeatures(context.Context, *ClearFeaturesReq) (*ClearFeaturesRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearFeatures not implemented")
}
func (UnimplementedZeusServiceServer) CreateGroup(context.Context, *CreateGroupReq) (*CreateGroupRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedZeusServiceServer) GetGroupSize(context.Context, *GetGroupSizeReq) (*GetGroupSizeRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupSize not implemented")
}
func (UnimplementedZeusServiceServer) GetGroupFeaIds(context.Context, *GetGroupFeaIdsReq) (*GetGroupFeaIdsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupFeaIds not implemented")
}
func (UnimplementedZeusServiceServer) GetGroupEntityIds(context.Context, *GetGroupEntityIdsReq) (*GetGroupEntityIdsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupEntityIds not implemented")
}
func (UnimplementedZeusServiceServer) GetGroupDetail(context.Context, *GetGroupDetailReq) (*GetGroupDetailRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupDetail not implemented")
}
func (UnimplementedZeusServiceServer) TruncateGroup(context.Context, *TruncateGroupReq) (*TruncateGroupRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TruncateGroup not implemented")
}
func (UnimplementedZeusServiceServer) AddFeatureConfig(context.Context, *AddFeatureConfigReq) (*AddFeatureConfigRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFeatureConfig not implemented")
}
func (UnimplementedZeusServiceServer) DeleteFeatureConfig(context.Context, *DeleteFeatureConfigReq) (*DeleteFeatureConfigRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFeatureConfig not implemented")
}
func (UnimplementedZeusServiceServer) DeleteGroup(context.Context, *DeleteGroupReq) (*DeleteGroupRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (UnimplementedZeusServiceServer) DeleteGroupAsync(context.Context, *DeleteGroupReq) (*DeleteGroupRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroupAsync not implemented")
}
func (UnimplementedZeusServiceServer) GetDeleteGroupAsyncState(context.Context, *GetDeleteGroupAsyncStateReq) (*GetDeleteGroupAsyncStateRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeleteGroupAsyncState not implemented")
}
func (UnimplementedZeusServiceServer) TrimCache(context.Context, *TrimCacheReq) (*TrimCacheRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrimCache not implemented")
}
func (UnimplementedZeusServiceServer) DeleteCache(context.Context, *DeleteCacheReq) (*DeleteCacheRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCache not implemented")
}
func (UnimplementedZeusServiceServer) WarmUpCache(context.Context, *WarmUpCacheReq) (*WarmUpCacheRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WarmUpCache not implemented")
}
func (UnimplementedZeusServiceServer) mustEmbedUnimplementedZeusServiceServer() {}

// UnsafeZeusServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ZeusServiceServer will
// result in compilation errors.
type UnsafeZeusServiceServer interface {
	mustEmbedUnimplementedZeusServiceServer()
}

func RegisterZeusServiceServer(s grpc.ServiceRegistrar, srv ZeusServiceServer) {
	s.RegisterService(&ZeusService_ServiceDesc, srv)
}

func _ZeusService_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeusServiceServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZeusService_Retrieve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeusServiceServer).Retrieve(ctx, req.(*RetrieveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZeusService_AddFeas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFeasReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeusServiceServer).AddFeas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZeusService_AddFeas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeusServiceServer).AddFeas(ctx, req.(*AddFeasReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZeusService_GetFeas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeasReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeusServiceServer).GetFeas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZeusService_GetFeas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeusServiceServer).GetFeas(ctx, req.(*GetFeasReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZeusService_GetFeasByEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeasByEntityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeusServiceServer).GetFeasByEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZeusService_GetFeasByEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeusServiceServer).GetFeasByEntity(ctx, req.(*GetFeasByEntityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZeusService_UpdateFeas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFeasReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeusServiceServer).UpdateFeas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZeusService_UpdateFeas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeusServiceServer).UpdateFeas(ctx, req.(*UpdateFeasReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZeusService_DeleteFeas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFeasReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeusServiceServer).DeleteFeas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZeusService_DeleteFeas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeusServiceServer).DeleteFeas(ctx, req.(*DeleteFeasReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZeusService_DeleteEntitys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEntitysReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeusServiceServer).DeleteEntitys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZeusService_DeleteEntitys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeusServiceServer).DeleteEntitys(ctx, req.(*DeleteEntitysReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZeusService_UpdateEntityId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEntityIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeusServiceServer).UpdateEntityId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZeusService_UpdateEntityId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeusServiceServer).UpdateEntityId(ctx, req.(*UpdateEntityIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZeusService_UpdateFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFeaturesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeusServiceServer).UpdateFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZeusService_UpdateFeatures_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeusServiceServer).UpdateFeatures(ctx, req.(*UpdateFeaturesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZeusService_UpdateExtendInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExtendInfosReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeusServiceServer).UpdateExtendInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZeusService_UpdateExtendInfos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeusServiceServer).UpdateExtendInfos(ctx, req.(*UpdateExtendInfosReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZeusService_TriggerPageUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerPageUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeusServiceServer).TriggerPageUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZeusService_TriggerPageUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeusServiceServer).TriggerPageUpdate(ctx, req.(*TriggerPageUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZeusService_GetGroupPageIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupPageIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeusServiceServer).GetGroupPageIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZeusService_GetGroupPageIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeusServiceServer).GetGroupPageIds(ctx, req.(*GetGroupPageIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZeusService_GetPageFeaEntityIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPageFeaEntityIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeusServiceServer).GetPageFeaEntityIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZeusService_GetPageFeaEntityIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeusServiceServer).GetPageFeaEntityIds(ctx, req.(*GetPageFeaEntityIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZeusService_GetPageFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPageFeaturesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeusServiceServer).GetPageFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZeusService_GetPageFeatures_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeusServiceServer).GetPageFeatures(ctx, req.(*GetPageFeaturesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZeusService_ClearFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearFeaturesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeusServiceServer).ClearFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZeusService_ClearFeatures_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeusServiceServer).ClearFeatures(ctx, req.(*ClearFeaturesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZeusService_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeusServiceServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZeusService_CreateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeusServiceServer).CreateGroup(ctx, req.(*CreateGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZeusService_GetGroupSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupSizeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeusServiceServer).GetGroupSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZeusService_GetGroupSize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeusServiceServer).GetGroupSize(ctx, req.(*GetGroupSizeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZeusService_GetGroupFeaIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupFeaIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeusServiceServer).GetGroupFeaIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZeusService_GetGroupFeaIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeusServiceServer).GetGroupFeaIds(ctx, req.(*GetGroupFeaIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZeusService_GetGroupEntityIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupEntityIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeusServiceServer).GetGroupEntityIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZeusService_GetGroupEntityIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeusServiceServer).GetGroupEntityIds(ctx, req.(*GetGroupEntityIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZeusService_GetGroupDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeusServiceServer).GetGroupDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZeusService_GetGroupDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeusServiceServer).GetGroupDetail(ctx, req.(*GetGroupDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZeusService_TruncateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TruncateGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeusServiceServer).TruncateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZeusService_TruncateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeusServiceServer).TruncateGroup(ctx, req.(*TruncateGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZeusService_AddFeatureConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFeatureConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeusServiceServer).AddFeatureConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZeusService_AddFeatureConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeusServiceServer).AddFeatureConfig(ctx, req.(*AddFeatureConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZeusService_DeleteFeatureConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFeatureConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeusServiceServer).DeleteFeatureConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZeusService_DeleteFeatureConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeusServiceServer).DeleteFeatureConfig(ctx, req.(*DeleteFeatureConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZeusService_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeusServiceServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZeusService_DeleteGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeusServiceServer).DeleteGroup(ctx, req.(*DeleteGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZeusService_DeleteGroupAsync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeusServiceServer).DeleteGroupAsync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZeusService_DeleteGroupAsync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeusServiceServer).DeleteGroupAsync(ctx, req.(*DeleteGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZeusService_GetDeleteGroupAsyncState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeleteGroupAsyncStateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeusServiceServer).GetDeleteGroupAsyncState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZeusService_GetDeleteGroupAsyncState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeusServiceServer).GetDeleteGroupAsyncState(ctx, req.(*GetDeleteGroupAsyncStateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZeusService_TrimCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrimCacheReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeusServiceServer).TrimCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZeusService_TrimCache_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeusServiceServer).TrimCache(ctx, req.(*TrimCacheReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZeusService_DeleteCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCacheReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeusServiceServer).DeleteCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZeusService_DeleteCache_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeusServiceServer).DeleteCache(ctx, req.(*DeleteCacheReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZeusService_WarmUpCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WarmUpCacheReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeusServiceServer).WarmUpCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZeusService_WarmUpCache_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeusServiceServer).WarmUpCache(ctx, req.(*WarmUpCacheReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ZeusService_ServiceDesc is the grpc.ServiceDesc for ZeusService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ZeusService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "youtu.zeus.ZeusService",
	HandlerType: (*ZeusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Retrieve",
			Handler:    _ZeusService_Retrieve_Handler,
		},
		{
			MethodName: "AddFeas",
			Handler:    _ZeusService_AddFeas_Handler,
		},
		{
			MethodName: "GetFeas",
			Handler:    _ZeusService_GetFeas_Handler,
		},
		{
			MethodName: "GetFeasByEntity",
			Handler:    _ZeusService_GetFeasByEntity_Handler,
		},
		{
			MethodName: "UpdateFeas",
			Handler:    _ZeusService_UpdateFeas_Handler,
		},
		{
			MethodName: "DeleteFeas",
			Handler:    _ZeusService_DeleteFeas_Handler,
		},
		{
			MethodName: "DeleteEntitys",
			Handler:    _ZeusService_DeleteEntitys_Handler,
		},
		{
			MethodName: "UpdateEntityId",
			Handler:    _ZeusService_UpdateEntityId_Handler,
		},
		{
			MethodName: "UpdateFeatures",
			Handler:    _ZeusService_UpdateFeatures_Handler,
		},
		{
			MethodName: "UpdateExtendInfos",
			Handler:    _ZeusService_UpdateExtendInfos_Handler,
		},
		{
			MethodName: "TriggerPageUpdate",
			Handler:    _ZeusService_TriggerPageUpdate_Handler,
		},
		{
			MethodName: "GetGroupPageIds",
			Handler:    _ZeusService_GetGroupPageIds_Handler,
		},
		{
			MethodName: "GetPageFeaEntityIds",
			Handler:    _ZeusService_GetPageFeaEntityIds_Handler,
		},
		{
			MethodName: "GetPageFeatures",
			Handler:    _ZeusService_GetPageFeatures_Handler,
		},
		{
			MethodName: "ClearFeatures",
			Handler:    _ZeusService_ClearFeatures_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _ZeusService_CreateGroup_Handler,
		},
		{
			MethodName: "GetGroupSize",
			Handler:    _ZeusService_GetGroupSize_Handler,
		},
		{
			MethodName: "GetGroupFeaIds",
			Handler:    _ZeusService_GetGroupFeaIds_Handler,
		},
		{
			MethodName: "GetGroupEntityIds",
			Handler:    _ZeusService_GetGroupEntityIds_Handler,
		},
		{
			MethodName: "GetGroupDetail",
			Handler:    _ZeusService_GetGroupDetail_Handler,
		},
		{
			MethodName: "TruncateGroup",
			Handler:    _ZeusService_TruncateGroup_Handler,
		},
		{
			MethodName: "AddFeatureConfig",
			Handler:    _ZeusService_AddFeatureConfig_Handler,
		},
		{
			MethodName: "DeleteFeatureConfig",
			Handler:    _ZeusService_DeleteFeatureConfig_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _ZeusService_DeleteGroup_Handler,
		},
		{
			MethodName: "DeleteGroupAsync",
			Handler:    _ZeusService_DeleteGroupAsync_Handler,
		},
		{
			MethodName: "GetDeleteGroupAsyncState",
			Handler:    _ZeusService_GetDeleteGroupAsyncState_Handler,
		},
		{
			MethodName: "TrimCache",
			Handler:    _ZeusService_TrimCache_Handler,
		},
		{
			MethodName: "DeleteCache",
			Handler:    _ZeusService_DeleteCache_Handler,
		},
		{
			MethodName: "WarmUpCache",
			Handler:    _ZeusService_WarmUpCache_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zeus_api.proto",
}
