// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.5.0
// source: zeus.proto

package youtu_zeus

import (
	youtu "zeus/api/youtu"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BitFlag int32

const (
	// 0x0
	BitFlag_BITFLAG_INVALID BitFlag = 0
	// 0x1 - 0x10
	BitFlag_BITFLAG_GET_GROUP_CONFIG  BitFlag = 1 // 0x0001：  请求GroupConfig
	BitFlag_BITFLAG_GET_GROUP_SIZE    BitFlag = 2 // 0x0002：  请求GroupSize
	BitFlag_BITFLAG_GET_GROUP_VERSION BitFlag = 4 // 0x0004：  请求GroupVersion
)

// Enum value maps for BitFlag.
var (
	BitFlag_name = map[int32]string{
		0: "BITFLAG_INVALID",
		1: "BITFLAG_GET_GROUP_CONFIG",
		2: "BITFLAG_GET_GROUP_SIZE",
		4: "BITFLAG_GET_GROUP_VERSION",
	}
	BitFlag_value = map[string]int32{
		"BITFLAG_INVALID":           0,
		"BITFLAG_GET_GROUP_CONFIG":  1,
		"BITFLAG_GET_GROUP_SIZE":    2,
		"BITFLAG_GET_GROUP_VERSION": 4,
	}
)

func (x BitFlag) Enum() *BitFlag {
	p := new(BitFlag)
	*p = x
	return p
}

func (x BitFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BitFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_zeus_proto_enumTypes[0].Descriptor()
}

func (BitFlag) Type() protoreflect.EnumType {
	return &file_zeus_proto_enumTypes[0]
}

func (x BitFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BitFlag) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BitFlag(num)
	return nil
}

// Deprecated: Use BitFlag.Descriptor instead.
func (BitFlag) EnumDescriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{0}
}

type UpdateGroupReq_UpdateGroupType int32

const (
	// 添加 feature_idx 配置
	// 需检查 feature_idx 对应的 FeatureConfig 是否存在；
	// 若存在则返回错误ERR_FEATURE_CONFIG_EXIST，需要业务方调用清空后再添加；
	// 添加成功后将current_feature改为2
	UpdateGroupReq_ADD_FEATURE_CONFIG UpdateGroupReq_UpdateGroupType = 1
	// 删除 feature_idx 配置
	// 需检查当前是否 feature_0/1 配置均存在，否则拒绝删除 feature_idx 对应配置
	// 删除成功后将current_feature改为1-feature_idx
	UpdateGroupReq_DELETE_FEATURE_CONFIG UpdateGroupReq_UpdateGroupType = 2
)

// Enum value maps for UpdateGroupReq_UpdateGroupType.
var (
	UpdateGroupReq_UpdateGroupType_name = map[int32]string{
		1: "ADD_FEATURE_CONFIG",
		2: "DELETE_FEATURE_CONFIG",
	}
	UpdateGroupReq_UpdateGroupType_value = map[string]int32{
		"ADD_FEATURE_CONFIG":    1,
		"DELETE_FEATURE_CONFIG": 2,
	}
)

func (x UpdateGroupReq_UpdateGroupType) Enum() *UpdateGroupReq_UpdateGroupType {
	p := new(UpdateGroupReq_UpdateGroupType)
	*p = x
	return p
}

func (x UpdateGroupReq_UpdateGroupType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateGroupReq_UpdateGroupType) Descriptor() protoreflect.EnumDescriptor {
	return file_zeus_proto_enumTypes[1].Descriptor()
}

func (UpdateGroupReq_UpdateGroupType) Type() protoreflect.EnumType {
	return &file_zeus_proto_enumTypes[1]
}

func (x UpdateGroupReq_UpdateGroupType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *UpdateGroupReq_UpdateGroupType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = UpdateGroupReq_UpdateGroupType(num)
	return nil
}

// Deprecated: Use UpdateGroupReq_UpdateGroupType.Descriptor instead.
func (UpdateGroupReq_UpdateGroupType) EnumDescriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{6, 0}
}

type FeatureConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dimension   *int32             `protobuf:"varint,1,opt,name=dimension" json:"dimension,omitempty"`
	FeatureType *youtu.FeatureType `protobuf:"varint,2,opt,name=feature_type,json=featureType,enum=youtu.FeatureType" json:"feature_type,omitempty"`
	Scale       *float64           `protobuf:"fixed64,3,opt,name=scale" json:"scale,omitempty"`
	FeatureIdx  *int32             `protobuf:"varint,4,opt,name=feature_idx,json=featureIdx" json:"feature_idx,omitempty"`
}

func (x *FeatureConfig) Reset() {
	*x = FeatureConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureConfig) ProtoMessage() {}

func (x *FeatureConfig) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureConfig.ProtoReflect.Descriptor instead.
func (*FeatureConfig) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{0}
}

func (x *FeatureConfig) GetDimension() int32 {
	if x != nil && x.Dimension != nil {
		return *x.Dimension
	}
	return 0
}

func (x *FeatureConfig) GetFeatureType() youtu.FeatureType {
	if x != nil && x.FeatureType != nil {
		return *x.FeatureType
	}
	return youtu.FeatureType(-1)
}

func (x *FeatureConfig) GetScale() float64 {
	if x != nil && x.Scale != nil {
		return *x.Scale
	}
	return 0
}

func (x *FeatureConfig) GetFeatureIdx() int32 {
	if x != nil && x.FeatureIdx != nil {
		return *x.FeatureIdx
	}
	return 0
}

// create group
type CreateGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string         `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	GroupId   *string         `protobuf:"bytes,2,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	Platform  *youtu.Platform `protobuf:"varint,3,opt,name=platform,enum=youtu.Platform" json:"platform,omitempty"`
	Capacity  *int32          `protobuf:"varint,4,opt,name=capacity" json:"capacity,omitempty"` // 支持更新，在updategroup字段（下版本实现）
	// Deprecated: Marked as deprecated in zeus.proto.
	Dimension *int32 `protobuf:"varint,5,opt,name=dimension" json:"dimension,omitempty"`
	// Deprecated: Marked as deprecated in zeus.proto.
	FeatureType   *youtu.FeatureType `protobuf:"varint,6,opt,name=feature_type,json=featureType,enum=youtu.FeatureType" json:"feature_type,omitempty"`
	FeatureConfig *FeatureConfig     `protobuf:"bytes,7,opt,name=feature_config,json=featureConfig" json:"feature_config,omitempty"`
}

func (x *CreateGroupReq) Reset() {
	*x = CreateGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGroupReq) ProtoMessage() {}

func (x *CreateGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGroupReq.ProtoReflect.Descriptor instead.
func (*CreateGroupReq) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{1}
}

func (x *CreateGroupReq) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *CreateGroupReq) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

func (x *CreateGroupReq) GetPlatform() youtu.Platform {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return youtu.Platform(0)
}

func (x *CreateGroupReq) GetCapacity() int32 {
	if x != nil && x.Capacity != nil {
		return *x.Capacity
	}
	return 0
}

// Deprecated: Marked as deprecated in zeus.proto.
func (x *CreateGroupReq) GetDimension() int32 {
	if x != nil && x.Dimension != nil {
		return *x.Dimension
	}
	return 0
}

// Deprecated: Marked as deprecated in zeus.proto.
func (x *CreateGroupReq) GetFeatureType() youtu.FeatureType {
	if x != nil && x.FeatureType != nil {
		return *x.FeatureType
	}
	return youtu.FeatureType(-1)
}

func (x *CreateGroupReq) GetFeatureConfig() *FeatureConfig {
	if x != nil {
		return x.FeatureConfig
	}
	return nil
}

type CreateGroupRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	ErrorCode *int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	ErrorMsg  *string `protobuf:"bytes,3,opt,name=error_msg,json=errorMsg" json:"error_msg,omitempty"`
}

func (x *CreateGroupRsp) Reset() {
	*x = CreateGroupRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGroupRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGroupRsp) ProtoMessage() {}

func (x *CreateGroupRsp) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGroupRsp.ProtoReflect.Descriptor instead.
func (*CreateGroupRsp) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{2}
}

func (x *CreateGroupRsp) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *CreateGroupRsp) GetErrorCode() int32 {
	if x != nil && x.ErrorCode != nil {
		return *x.ErrorCode
	}
	return 0
}

func (x *CreateGroupRsp) GetErrorMsg() string {
	if x != nil && x.ErrorMsg != nil {
		return *x.ErrorMsg
	}
	return ""
}

// describe group
// get group_size|group_version|group_config for group
type DescribeGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	GroupId   *string `protobuf:"bytes,2,opt,name=group_id,json=groupId" json:"group_id,omitempty"` // group_id字段必传
	// 请求类型标志位
	// 通过标志位组合支持单次请求请求GroupConfig、GroupSize、GroupVersion的组合，请求GroupStatus不支持组合
	// 0x0001：  请求GroupConfig
	// 0x0002：  请求GroupSize
	// 0x0004：  请求GroupVersion
	Bitflag *BitFlag `protobuf:"varint,3,opt,name=bitflag,enum=youtu.zeus.BitFlag" json:"bitflag,omitempty"` //支持通过标志位或运算，实现单次请求多个功能
}

func (x *DescribeGroupReq) Reset() {
	*x = DescribeGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeGroupReq) ProtoMessage() {}

func (x *DescribeGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeGroupReq.ProtoReflect.Descriptor instead.
func (*DescribeGroupReq) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{3}
}

func (x *DescribeGroupReq) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *DescribeGroupReq) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

func (x *DescribeGroupReq) GetBitflag() BitFlag {
	if x != nil && x.Bitflag != nil {
		return *x.Bitflag
	}
	return BitFlag_BITFLAG_INVALID
}

type DescribeGroupRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId    *string      `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	ErrorCode    *int32       `protobuf:"varint,2,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	ErrorMsg     *string      `protobuf:"bytes,3,opt,name=error_msg,json=errorMsg" json:"error_msg,omitempty"`
	GroupConfig  *GroupConfig `protobuf:"bytes,4,opt,name=group_config,json=groupConfig" json:"group_config,omitempty"`
	GroupSize    *int32       `protobuf:"varint,5,opt,name=group_size,json=groupSize" json:"group_size,omitempty"`
	GroupVersion *int64       `protobuf:"varint,6,opt,name=group_version,json=groupVersion" json:"group_version,omitempty"`
}

func (x *DescribeGroupRsp) Reset() {
	*x = DescribeGroupRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeGroupRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeGroupRsp) ProtoMessage() {}

func (x *DescribeGroupRsp) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeGroupRsp.ProtoReflect.Descriptor instead.
func (*DescribeGroupRsp) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{4}
}

func (x *DescribeGroupRsp) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *DescribeGroupRsp) GetErrorCode() int32 {
	if x != nil && x.ErrorCode != nil {
		return *x.ErrorCode
	}
	return 0
}

func (x *DescribeGroupRsp) GetErrorMsg() string {
	if x != nil && x.ErrorMsg != nil {
		return *x.ErrorMsg
	}
	return ""
}

func (x *DescribeGroupRsp) GetGroupConfig() *GroupConfig {
	if x != nil {
		return x.GroupConfig
	}
	return nil
}

func (x *DescribeGroupRsp) GetGroupSize() int32 {
	if x != nil && x.GroupSize != nil {
		return *x.GroupSize
	}
	return 0
}

func (x *DescribeGroupRsp) GetGroupVersion() int64 {
	if x != nil && x.GroupVersion != nil {
		return *x.GroupVersion
	}
	return 0
}

type GroupConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId *string `protobuf:"bytes,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	// Deprecated: Marked as deprecated in zeus.proto.
	L5Address *string `protobuf:"bytes,2,opt,name=l5_address,json=l5Address" json:"l5_address,omitempty"`
	// Deprecated: Marked as deprecated in zeus.proto.
	Capacity *uint64         `protobuf:"varint,3,opt,name=capacity" json:"capacity,omitempty"` // deprecated, no use
	Platform *youtu.Platform `protobuf:"varint,4,opt,name=platform,enum=youtu.Platform" json:"platform,omitempty"`
	// Deprecated: Marked as deprecated in zeus.proto.
	Scale *float64 `protobuf:"fixed64,5,opt,name=scale" json:"scale,omitempty"`
	// Deprecated: Marked as deprecated in zeus.proto.
	Dimension      *int32 `protobuf:"varint,6,opt,name=dimension" json:"dimension,omitempty"`
	CurrentFeature *int32 `protobuf:"varint,7,opt,name=current_feature,json=currentFeature" json:"current_feature,omitempty"`
	// Deprecated: Marked as deprecated in zeus.proto.
	CurrentFeatureVersion *int32 `protobuf:"varint,8,opt,name=current_feature_version,json=currentFeatureVersion" json:"current_feature_version,omitempty"`
	// Deprecated: Marked as deprecated in zeus.proto.
	FeatureType *youtu.FeatureType `protobuf:"varint,9,opt,name=feature_type,json=featureType,enum=youtu.FeatureType" json:"feature_type,omitempty"`
	// Deprecated: Marked as deprecated in zeus.proto.
	CutSize        *uint64          `protobuf:"varint,10,opt,name=cut_size,json=cutSize" json:"cut_size,omitempty"` // deprecated, no use
	FeatureConfigs []*FeatureConfig `protobuf:"bytes,11,rep,name=feature_configs,json=featureConfigs" json:"feature_configs,omitempty"`
	// Deprecated: Marked as deprecated in zeus.proto.
	AsyncDeleting *bool `protobuf:"varint,12,opt,name=async_deleting,json=asyncDeleting" json:"async_deleting,omitempty"` // async deleting flag, no need
}

func (x *GroupConfig) Reset() {
	*x = GroupConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupConfig) ProtoMessage() {}

func (x *GroupConfig) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupConfig.ProtoReflect.Descriptor instead.
func (*GroupConfig) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{5}
}

func (x *GroupConfig) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

// Deprecated: Marked as deprecated in zeus.proto.
func (x *GroupConfig) GetL5Address() string {
	if x != nil && x.L5Address != nil {
		return *x.L5Address
	}
	return ""
}

// Deprecated: Marked as deprecated in zeus.proto.
func (x *GroupConfig) GetCapacity() uint64 {
	if x != nil && x.Capacity != nil {
		return *x.Capacity
	}
	return 0
}

func (x *GroupConfig) GetPlatform() youtu.Platform {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return youtu.Platform(0)
}

// Deprecated: Marked as deprecated in zeus.proto.
func (x *GroupConfig) GetScale() float64 {
	if x != nil && x.Scale != nil {
		return *x.Scale
	}
	return 0
}

// Deprecated: Marked as deprecated in zeus.proto.
func (x *GroupConfig) GetDimension() int32 {
	if x != nil && x.Dimension != nil {
		return *x.Dimension
	}
	return 0
}

func (x *GroupConfig) GetCurrentFeature() int32 {
	if x != nil && x.CurrentFeature != nil {
		return *x.CurrentFeature
	}
	return 0
}

// Deprecated: Marked as deprecated in zeus.proto.
func (x *GroupConfig) GetCurrentFeatureVersion() int32 {
	if x != nil && x.CurrentFeatureVersion != nil {
		return *x.CurrentFeatureVersion
	}
	return 0
}

// Deprecated: Marked as deprecated in zeus.proto.
func (x *GroupConfig) GetFeatureType() youtu.FeatureType {
	if x != nil && x.FeatureType != nil {
		return *x.FeatureType
	}
	return youtu.FeatureType(-1)
}

// Deprecated: Marked as deprecated in zeus.proto.
func (x *GroupConfig) GetCutSize() uint64 {
	if x != nil && x.CutSize != nil {
		return *x.CutSize
	}
	return 0
}

func (x *GroupConfig) GetFeatureConfigs() []*FeatureConfig {
	if x != nil {
		return x.FeatureConfigs
	}
	return nil
}

// Deprecated: Marked as deprecated in zeus.proto.
func (x *GroupConfig) GetAsyncDeleting() bool {
	if x != nil && x.AsyncDeleting != nil {
		return *x.AsyncDeleting
	}
	return false
}

// update group
// use to AddFeatureConfig|DeleteFeatureConfig before|after feature_version_update
type UpdateGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId       *string                         `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	GroupId         *string                         `protobuf:"bytes,2,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	UpdateGroupType *UpdateGroupReq_UpdateGroupType `protobuf:"varint,3,opt,name=update_group_type,json=updateGroupType,enum=youtu.zeus.UpdateGroupReq_UpdateGroupType" json:"update_group_type,omitempty"`
	FeatureConfig   *FeatureConfig                  `protobuf:"bytes,4,opt,name=feature_config,json=featureConfig" json:"feature_config,omitempty"`
}

func (x *UpdateGroupReq) Reset() {
	*x = UpdateGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGroupReq) ProtoMessage() {}

func (x *UpdateGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGroupReq.ProtoReflect.Descriptor instead.
func (*UpdateGroupReq) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateGroupReq) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *UpdateGroupReq) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

func (x *UpdateGroupReq) GetUpdateGroupType() UpdateGroupReq_UpdateGroupType {
	if x != nil && x.UpdateGroupType != nil {
		return *x.UpdateGroupType
	}
	return UpdateGroupReq_ADD_FEATURE_CONFIG
}

func (x *UpdateGroupReq) GetFeatureConfig() *FeatureConfig {
	if x != nil {
		return x.FeatureConfig
	}
	return nil
}

type UpdateGroupRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	ErrorCode *int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	ErrorMsg  *string `protobuf:"bytes,3,opt,name=error_msg,json=errorMsg" json:"error_msg,omitempty"`
}

func (x *UpdateGroupRsp) Reset() {
	*x = UpdateGroupRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGroupRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGroupRsp) ProtoMessage() {}

func (x *UpdateGroupRsp) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGroupRsp.ProtoReflect.Descriptor instead.
func (*UpdateGroupRsp) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateGroupRsp) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *UpdateGroupRsp) GetErrorCode() int32 {
	if x != nil && x.ErrorCode != nil {
		return *x.ErrorCode
	}
	return 0
}

func (x *UpdateGroupRsp) GetErrorMsg() string {
	if x != nil && x.ErrorMsg != nil {
		return *x.ErrorMsg
	}
	return ""
}

// delete group
type DeleteGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	GroupId   *string `protobuf:"bytes,2,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
}

func (x *DeleteGroupReq) Reset() {
	*x = DeleteGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGroupReq) ProtoMessage() {}

func (x *DeleteGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGroupReq.ProtoReflect.Descriptor instead.
func (*DeleteGroupReq) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteGroupReq) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *DeleteGroupReq) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

type DeleteGroupRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	ErrorCode *int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	ErrorMsg  *string `protobuf:"bytes,3,opt,name=error_msg,json=errorMsg" json:"error_msg,omitempty"`
}

func (x *DeleteGroupRsp) Reset() {
	*x = DeleteGroupRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGroupRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGroupRsp) ProtoMessage() {}

func (x *DeleteGroupRsp) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGroupRsp.ProtoReflect.Descriptor instead.
func (*DeleteGroupRsp) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteGroupRsp) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *DeleteGroupRsp) GetErrorCode() int32 {
	if x != nil && x.ErrorCode != nil {
		return *x.ErrorCode
	}
	return 0
}

func (x *DeleteGroupRsp) GetErrorMsg() string {
	if x != nil && x.ErrorMsg != nil {
		return *x.ErrorMsg
	}
	return ""
}

// start feature handles
// remember:   miss_ids is treated as failed
type FeaItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeaId      *string `protobuf:"bytes,1,opt,name=fea_id,json=feaId" json:"fea_id,omitempty"` //must not nil
	EntityId   *string `protobuf:"bytes,2,opt,name=entity_id,json=entityId" json:"entity_id,omitempty"`
	Feature_0  []byte  `protobuf:"bytes,3,opt,name=feature_0,json=feature0" json:"feature_0,omitempty"`
	Feature_1  []byte  `protobuf:"bytes,4,opt,name=feature_1,json=feature1" json:"feature_1,omitempty"`
	ExtendInfo []byte  `protobuf:"bytes,5,opt,name=extend_info,json=extendInfo" json:"extend_info,omitempty"`
}

func (x *FeaItem) Reset() {
	*x = FeaItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeaItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeaItem) ProtoMessage() {}

func (x *FeaItem) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeaItem.ProtoReflect.Descriptor instead.
func (*FeaItem) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{10}
}

func (x *FeaItem) GetFeaId() string {
	if x != nil && x.FeaId != nil {
		return *x.FeaId
	}
	return ""
}

func (x *FeaItem) GetEntityId() string {
	if x != nil && x.EntityId != nil {
		return *x.EntityId
	}
	return ""
}

func (x *FeaItem) GetFeature_0() []byte {
	if x != nil {
		return x.Feature_0
	}
	return nil
}

func (x *FeaItem) GetFeature_1() []byte {
	if x != nil {
		return x.Feature_1
	}
	return nil
}

func (x *FeaItem) GetExtendInfo() []byte {
	if x != nil {
		return x.ExtendInfo
	}
	return nil
}

// add features
// force=false: if has fea_id already exists will return ERR_DB_INSERT_DUPLICATE
// force=true: 1.delete fea_items already exist in DB, if fail will return ERR_DELETE_FEA
//
//	2.insert all request fea_items to DB, if fail it's uncertain whether those fea_ids exists in DB
type AddFeasReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId  *string    `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	GroupId    *string    `protobuf:"bytes,2,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	Items      []*FeaItem `protobuf:"bytes,3,rep,name=items" json:"items,omitempty"`
	Force      *bool      `protobuf:"varint,4,opt,name=force,def=0" json:"force,omitempty"`
	FeatureIdx *int32     `protobuf:"varint,5,opt,name=feature_idx,json=featureIdx" json:"feature_idx,omitempty"` // =0/1/2
}

// Default values for AddFeasReq fields.
const (
	Default_AddFeasReq_Force = bool(false)
)

func (x *AddFeasReq) Reset() {
	*x = AddFeasReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFeasReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFeasReq) ProtoMessage() {}

func (x *AddFeasReq) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFeasReq.ProtoReflect.Descriptor instead.
func (*AddFeasReq) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{11}
}

func (x *AddFeasReq) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *AddFeasReq) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

func (x *AddFeasReq) GetItems() []*FeaItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *AddFeasReq) GetForce() bool {
	if x != nil && x.Force != nil {
		return *x.Force
	}
	return Default_AddFeasReq_Force
}

func (x *AddFeasReq) GetFeatureIdx() int32 {
	if x != nil && x.FeatureIdx != nil {
		return *x.FeatureIdx
	}
	return 0
}

type AddFeasRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId    *string  `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	ErrorCode    *int32   `protobuf:"varint,2,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	ErrorMsg     *string  `protobuf:"bytes,3,opt,name=error_msg,json=errorMsg" json:"error_msg,omitempty"`
	FeaIds       []string `protobuf:"bytes,4,rep,name=fea_ids,json=feaIds" json:"fea_ids,omitempty"`               // succeed feature_ids
	FailFeaIds   []string `protobuf:"bytes,5,rep,name=fail_fea_ids,json=failFeaIds" json:"fail_fea_ids,omitempty"` // failed  feature_ids
	GroupVersion *int64   `protobuf:"varint,6,opt,name=group_version,json=groupVersion" json:"group_version,omitempty"`
}

func (x *AddFeasRsp) Reset() {
	*x = AddFeasRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFeasRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFeasRsp) ProtoMessage() {}

func (x *AddFeasRsp) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFeasRsp.ProtoReflect.Descriptor instead.
func (*AddFeasRsp) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{12}
}

func (x *AddFeasRsp) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *AddFeasRsp) GetErrorCode() int32 {
	if x != nil && x.ErrorCode != nil {
		return *x.ErrorCode
	}
	return 0
}

func (x *AddFeasRsp) GetErrorMsg() string {
	if x != nil && x.ErrorMsg != nil {
		return *x.ErrorMsg
	}
	return ""
}

func (x *AddFeasRsp) GetFeaIds() []string {
	if x != nil {
		return x.FeaIds
	}
	return nil
}

func (x *AddFeasRsp) GetFailFeaIds() []string {
	if x != nil {
		return x.FailFeaIds
	}
	return nil
}

func (x *AddFeasRsp) GetGroupVersion() int64 {
	if x != nil && x.GroupVersion != nil {
		return *x.GroupVersion
	}
	return 0
}

// get features
// limit: request len(fea_ids) < 1000
type GetFeasReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId  *string  `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	GroupId    *string  `protobuf:"bytes,2,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	FeaIds     []string `protobuf:"bytes,3,rep,name=fea_ids,json=feaIds" json:"fea_ids,omitempty"`
	FeatureIdx *int32   `protobuf:"varint,4,opt,name=feature_idx,json=featureIdx" json:"feature_idx,omitempty"` // =0/1/2
}

func (x *GetFeasReq) Reset() {
	*x = GetFeasReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFeasReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFeasReq) ProtoMessage() {}

func (x *GetFeasReq) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFeasReq.ProtoReflect.Descriptor instead.
func (*GetFeasReq) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{13}
}

func (x *GetFeasReq) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *GetFeasReq) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

func (x *GetFeasReq) GetFeaIds() []string {
	if x != nil {
		return x.FeaIds
	}
	return nil
}

func (x *GetFeasReq) GetFeatureIdx() int32 {
	if x != nil && x.FeatureIdx != nil {
		return *x.FeatureIdx
	}
	return 0
}

type GetFeasRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string    `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	ErrorCode *int32     `protobuf:"varint,2,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	ErrorMsg  *string    `protobuf:"bytes,3,opt,name=error_msg,json=errorMsg" json:"error_msg,omitempty"`
	Items     []*FeaItem `protobuf:"bytes,4,rep,name=items" json:"items,omitempty"`
}

func (x *GetFeasRsp) Reset() {
	*x = GetFeasRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFeasRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFeasRsp) ProtoMessage() {}

func (x *GetFeasRsp) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFeasRsp.ProtoReflect.Descriptor instead.
func (*GetFeasRsp) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{14}
}

func (x *GetFeasRsp) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *GetFeasRsp) GetErrorCode() int32 {
	if x != nil && x.ErrorCode != nil {
		return *x.ErrorCode
	}
	return 0
}

func (x *GetFeasRsp) GetErrorMsg() string {
	if x != nil && x.ErrorMsg != nil {
		return *x.ErrorMsg
	}
	return ""
}

func (x *GetFeasRsp) GetItems() []*FeaItem {
	if x != nil {
		return x.Items
	}
	return nil
}

// update features
// limit: request len(items) < 1000
type UpdateFeasReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId  *string    `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	GroupId    *string    `protobuf:"bytes,2,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	Items      []*FeaItem `protobuf:"bytes,3,rep,name=items" json:"items,omitempty"`
	FeatureIdx *int32     `protobuf:"varint,4,opt,name=feature_idx,json=featureIdx" json:"feature_idx,omitempty"` // value: 0/1/2
}

func (x *UpdateFeasReq) Reset() {
	*x = UpdateFeasReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFeasReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFeasReq) ProtoMessage() {}

func (x *UpdateFeasReq) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFeasReq.ProtoReflect.Descriptor instead.
func (*UpdateFeasReq) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateFeasReq) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *UpdateFeasReq) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

func (x *UpdateFeasReq) GetItems() []*FeaItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *UpdateFeasReq) GetFeatureIdx() int32 {
	if x != nil && x.FeatureIdx != nil {
		return *x.FeatureIdx
	}
	return 0
}

type UpdateFeasRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId    *string  `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	ErrorCode    *int32   `protobuf:"varint,2,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	ErrorMsg     *string  `protobuf:"bytes,3,opt,name=error_msg,json=errorMsg" json:"error_msg,omitempty"`
	FeaIds       []string `protobuf:"bytes,4,rep,name=fea_ids,json=feaIds" json:"fea_ids,omitempty"` // succeed fea_ids
	GroupVersion *int64   `protobuf:"varint,5,opt,name=group_version,json=groupVersion" json:"group_version,omitempty"`
}

func (x *UpdateFeasRsp) Reset() {
	*x = UpdateFeasRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFeasRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFeasRsp) ProtoMessage() {}

func (x *UpdateFeasRsp) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFeasRsp.ProtoReflect.Descriptor instead.
func (*UpdateFeasRsp) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateFeasRsp) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *UpdateFeasRsp) GetErrorCode() int32 {
	if x != nil && x.ErrorCode != nil {
		return *x.ErrorCode
	}
	return 0
}

func (x *UpdateFeasRsp) GetErrorMsg() string {
	if x != nil && x.ErrorMsg != nil {
		return *x.ErrorMsg
	}
	return ""
}

func (x *UpdateFeasRsp) GetFeaIds() []string {
	if x != nil {
		return x.FeaIds
	}
	return nil
}

func (x *UpdateFeasRsp) GetGroupVersion() int64 {
	if x != nil && x.GroupVersion != nil {
		return *x.GroupVersion
	}
	return 0
}

// delete features
// limit: request len(fea_ids) < 1000
type DeleteFeasReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string  `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	GroupId   *string  `protobuf:"bytes,2,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	FeaIds    []string `protobuf:"bytes,3,rep,name=fea_ids,json=feaIds" json:"fea_ids,omitempty"`
}

func (x *DeleteFeasReq) Reset() {
	*x = DeleteFeasReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFeasReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFeasReq) ProtoMessage() {}

func (x *DeleteFeasReq) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFeasReq.ProtoReflect.Descriptor instead.
func (*DeleteFeasReq) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{17}
}

func (x *DeleteFeasReq) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *DeleteFeasReq) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

func (x *DeleteFeasReq) GetFeaIds() []string {
	if x != nil {
		return x.FeaIds
	}
	return nil
}

type DeleteFeasRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId    *string  `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	ErrorCode    *int32   `protobuf:"varint,2,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	ErrorMsg     *string  `protobuf:"bytes,3,opt,name=error_msg,json=errorMsg" json:"error_msg,omitempty"`
	FeaIds       []string `protobuf:"bytes,4,rep,name=fea_ids,json=feaIds" json:"fea_ids,omitempty"`               // succeed fea_ids
	FailFeaIds   []string `protobuf:"bytes,5,rep,name=fail_fea_ids,json=failFeaIds" json:"fail_fea_ids,omitempty"` // failed fea_ids
	GroupVersion *int64   `protobuf:"varint,6,opt,name=group_version,json=groupVersion" json:"group_version,omitempty"`
}

func (x *DeleteFeasRsp) Reset() {
	*x = DeleteFeasRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFeasRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFeasRsp) ProtoMessage() {}

func (x *DeleteFeasRsp) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFeasRsp.ProtoReflect.Descriptor instead.
func (*DeleteFeasRsp) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{18}
}

func (x *DeleteFeasRsp) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *DeleteFeasRsp) GetErrorCode() int32 {
	if x != nil && x.ErrorCode != nil {
		return *x.ErrorCode
	}
	return 0
}

func (x *DeleteFeasRsp) GetErrorMsg() string {
	if x != nil && x.ErrorMsg != nil {
		return *x.ErrorMsg
	}
	return ""
}

func (x *DeleteFeasRsp) GetFeaIds() []string {
	if x != nil {
		return x.FeaIds
	}
	return nil
}

func (x *DeleteFeasRsp) GetFailFeaIds() []string {
	if x != nil {
		return x.FailFeaIds
	}
	return nil
}

func (x *DeleteFeasRsp) GetGroupVersion() int64 {
	if x != nil && x.GroupVersion != nil {
		return *x.GroupVersion
	}
	return 0
}

// describe entity
type DescribeEntityReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId  *string `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	GroupId    *string `protobuf:"bytes,2,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	EntityId   *string `protobuf:"bytes,3,opt,name=entity_id,json=entityId" json:"entity_id,omitempty"`
	FeatureIdx *int32  `protobuf:"varint,4,opt,name=feature_idx,json=featureIdx" json:"feature_idx,omitempty"` // value: 0/1/2
}

func (x *DescribeEntityReq) Reset() {
	*x = DescribeEntityReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeEntityReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeEntityReq) ProtoMessage() {}

func (x *DescribeEntityReq) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeEntityReq.ProtoReflect.Descriptor instead.
func (*DescribeEntityReq) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{19}
}

func (x *DescribeEntityReq) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *DescribeEntityReq) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

func (x *DescribeEntityReq) GetEntityId() string {
	if x != nil && x.EntityId != nil {
		return *x.EntityId
	}
	return ""
}

func (x *DescribeEntityReq) GetFeatureIdx() int32 {
	if x != nil && x.FeatureIdx != nil {
		return *x.FeatureIdx
	}
	return 0
}

type DescribeEntityRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string    `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	ErrorCode *int32     `protobuf:"varint,2,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	ErrorMsg  *string    `protobuf:"bytes,3,opt,name=error_msg,json=errorMsg" json:"error_msg,omitempty"`
	Items     []*FeaItem `protobuf:"bytes,4,rep,name=items" json:"items,omitempty"`
}

func (x *DescribeEntityRsp) Reset() {
	*x = DescribeEntityRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeEntityRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeEntityRsp) ProtoMessage() {}

func (x *DescribeEntityRsp) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeEntityRsp.ProtoReflect.Descriptor instead.
func (*DescribeEntityRsp) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{20}
}

func (x *DescribeEntityRsp) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *DescribeEntityRsp) GetErrorCode() int32 {
	if x != nil && x.ErrorCode != nil {
		return *x.ErrorCode
	}
	return 0
}

func (x *DescribeEntityRsp) GetErrorMsg() string {
	if x != nil && x.ErrorMsg != nil {
		return *x.ErrorMsg
	}
	return ""
}

func (x *DescribeEntityRsp) GetItems() []*FeaItem {
	if x != nil {
		return x.Items
	}
	return nil
}

// update entity
type UpdateEntityReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string  `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	GroupId   *string  `protobuf:"bytes,2,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	FeaIds    []string `protobuf:"bytes,3,rep,name=fea_ids,json=feaIds" json:"fea_ids,omitempty"`
	EntityId  *string  `protobuf:"bytes,4,opt,name=entity_id,json=entityId" json:"entity_id,omitempty"`
}

func (x *UpdateEntityReq) Reset() {
	*x = UpdateEntityReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateEntityReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEntityReq) ProtoMessage() {}

func (x *UpdateEntityReq) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEntityReq.ProtoReflect.Descriptor instead.
func (*UpdateEntityReq) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{21}
}

func (x *UpdateEntityReq) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *UpdateEntityReq) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

func (x *UpdateEntityReq) GetFeaIds() []string {
	if x != nil {
		return x.FeaIds
	}
	return nil
}

func (x *UpdateEntityReq) GetEntityId() string {
	if x != nil && x.EntityId != nil {
		return *x.EntityId
	}
	return ""
}

// return fea_ids whose entity_id updated successfully
// don't include fea_ids which are not existed
type UpdateEntityRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId    *string  `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	ErrorCode    *int32   `protobuf:"varint,2,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	ErrorMsg     *string  `protobuf:"bytes,3,opt,name=error_msg,json=errorMsg" json:"error_msg,omitempty"`
	FeaIds       []string `protobuf:"bytes,4,rep,name=fea_ids,json=feaIds" json:"fea_ids,omitempty"` // succeed fea_ids(not include miss_ids)
	GroupVersion *int64   `protobuf:"varint,5,opt,name=group_version,json=groupVersion" json:"group_version,omitempty"`
}

func (x *UpdateEntityRsp) Reset() {
	*x = UpdateEntityRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateEntityRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEntityRsp) ProtoMessage() {}

func (x *UpdateEntityRsp) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEntityRsp.ProtoReflect.Descriptor instead.
func (*UpdateEntityRsp) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{22}
}

func (x *UpdateEntityRsp) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *UpdateEntityRsp) GetErrorCode() int32 {
	if x != nil && x.ErrorCode != nil {
		return *x.ErrorCode
	}
	return 0
}

func (x *UpdateEntityRsp) GetErrorMsg() string {
	if x != nil && x.ErrorMsg != nil {
		return *x.ErrorMsg
	}
	return ""
}

func (x *UpdateEntityRsp) GetFeaIds() []string {
	if x != nil {
		return x.FeaIds
	}
	return nil
}

func (x *UpdateEntityRsp) GetGroupVersion() int64 {
	if x != nil && x.GroupVersion != nil {
		return *x.GroupVersion
	}
	return 0
}

// delete entity
type DeleteEntityReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	GroupId   *string `protobuf:"bytes,2,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	EntityId  *string `protobuf:"bytes,3,opt,name=entity_id,json=entityId" json:"entity_id,omitempty"`
}

func (x *DeleteEntityReq) Reset() {
	*x = DeleteEntityReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteEntityReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEntityReq) ProtoMessage() {}

func (x *DeleteEntityReq) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEntityReq.ProtoReflect.Descriptor instead.
func (*DeleteEntityReq) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{23}
}

func (x *DeleteEntityReq) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *DeleteEntityReq) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

func (x *DeleteEntityReq) GetEntityId() string {
	if x != nil && x.EntityId != nil {
		return *x.EntityId
	}
	return ""
}

type DeleteEntityRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId    *string  `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	ErrorCode    *int32   `protobuf:"varint,2,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	ErrorMsg     *string  `protobuf:"bytes,3,opt,name=error_msg,json=errorMsg" json:"error_msg,omitempty"`
	FeaIds       []string `protobuf:"bytes,4,rep,name=fea_ids,json=feaIds" json:"fea_ids,omitempty"` // succeed fea_ids(not include miss_ids)
	GroupVersion *int64   `protobuf:"varint,5,opt,name=group_version,json=groupVersion" json:"group_version,omitempty"`
}

func (x *DeleteEntityRsp) Reset() {
	*x = DeleteEntityRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteEntityRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEntityRsp) ProtoMessage() {}

func (x *DeleteEntityRsp) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEntityRsp.ProtoReflect.Descriptor instead.
func (*DeleteEntityRsp) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{24}
}

func (x *DeleteEntityRsp) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *DeleteEntityRsp) GetErrorCode() int32 {
	if x != nil && x.ErrorCode != nil {
		return *x.ErrorCode
	}
	return 0
}

func (x *DeleteEntityRsp) GetErrorMsg() string {
	if x != nil && x.ErrorMsg != nil {
		return *x.ErrorMsg
	}
	return ""
}

func (x *DeleteEntityRsp) GetFeaIds() []string {
	if x != nil {
		return x.FeaIds
	}
	return nil
}

func (x *DeleteEntityRsp) GetGroupVersion() int64 {
	if x != nil && x.GroupVersion != nil {
		return *x.GroupVersion
	}
	return 0
}

// retrieve
type RetrieveReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId   *string  `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	GroupIds    []string `protobuf:"bytes,2,rep,name=group_ids,json=groupIds" json:"group_ids,omitempty"`
	Features    [][]byte `protobuf:"bytes,3,rep,name=features" json:"features,omitempty"`
	Topn        *uint32  `protobuf:"varint,4,opt,name=topn" json:"topn,omitempty"`
	Threshold   *float32 `protobuf:"fixed32,5,opt,name=threshold" json:"threshold,omitempty"`
	FeatureIdxs []int32  `protobuf:"varint,6,rep,name=feature_idxs,json=featureIdxs" json:"feature_idxs,omitempty"` // value: 0/1, 和group_ids相同idx对应
	NeedSort    *int32   `protobuf:"varint,7,opt,name=need_sort,json=needSort,def=1" json:"need_sort,omitempty"`    // 0 结果非有序 1 结果排序
}

// Default values for RetrieveReq fields.
const (
	Default_RetrieveReq_NeedSort = int32(1)
)

func (x *RetrieveReq) Reset() {
	*x = RetrieveReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveReq) ProtoMessage() {}

func (x *RetrieveReq) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveReq.ProtoReflect.Descriptor instead.
func (*RetrieveReq) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{25}
}

func (x *RetrieveReq) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *RetrieveReq) GetGroupIds() []string {
	if x != nil {
		return x.GroupIds
	}
	return nil
}

func (x *RetrieveReq) GetFeatures() [][]byte {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *RetrieveReq) GetTopn() uint32 {
	if x != nil && x.Topn != nil {
		return *x.Topn
	}
	return 0
}

func (x *RetrieveReq) GetThreshold() float32 {
	if x != nil && x.Threshold != nil {
		return *x.Threshold
	}
	return 0
}

func (x *RetrieveReq) GetFeatureIdxs() []int32 {
	if x != nil {
		return x.FeatureIdxs
	}
	return nil
}

func (x *RetrieveReq) GetNeedSort() int32 {
	if x != nil && x.NeedSort != nil {
		return *x.NeedSort
	}
	return Default_RetrieveReq_NeedSort
}

type RetrieveRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId  *string              `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	ErrorCode  *int32               `protobuf:"varint,2,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	ErrorMsg   *string              `protobuf:"bytes,3,opt,name=error_msg,json=errorMsg" json:"error_msg,omitempty"`
	GroupItems []*GroupRetrieveItem `protobuf:"bytes,4,rep,name=group_items,json=groupItems" json:"group_items,omitempty"`
}

func (x *RetrieveRsp) Reset() {
	*x = RetrieveRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveRsp) ProtoMessage() {}

func (x *RetrieveRsp) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveRsp.ProtoReflect.Descriptor instead.
func (*RetrieveRsp) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{26}
}

func (x *RetrieveRsp) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *RetrieveRsp) GetErrorCode() int32 {
	if x != nil && x.ErrorCode != nil {
		return *x.ErrorCode
	}
	return 0
}

func (x *RetrieveRsp) GetErrorMsg() string {
	if x != nil && x.ErrorMsg != nil {
		return *x.ErrorMsg
	}
	return ""
}

func (x *RetrieveRsp) GetGroupItems() []*GroupRetrieveItem {
	if x != nil {
		return x.GroupItems
	}
	return nil
}

type RetrieveCandidate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeaId      *string  `protobuf:"bytes,1,opt,name=fea_id,json=feaId" json:"fea_id,omitempty"`
	EntityId   *string  `protobuf:"bytes,2,opt,name=entity_id,json=entityId" json:"entity_id,omitempty"`
	Confidence *float32 `protobuf:"fixed32,3,opt,name=confidence" json:"confidence,omitempty"`
	ExtendInfo []byte   `protobuf:"bytes,4,opt,name=extend_info,json=extendInfo" json:"extend_info,omitempty"`
}

func (x *RetrieveCandidate) Reset() {
	*x = RetrieveCandidate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveCandidate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveCandidate) ProtoMessage() {}

func (x *RetrieveCandidate) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveCandidate.ProtoReflect.Descriptor instead.
func (*RetrieveCandidate) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{27}
}

func (x *RetrieveCandidate) GetFeaId() string {
	if x != nil && x.FeaId != nil {
		return *x.FeaId
	}
	return ""
}

func (x *RetrieveCandidate) GetEntityId() string {
	if x != nil && x.EntityId != nil {
		return *x.EntityId
	}
	return ""
}

func (x *RetrieveCandidate) GetConfidence() float32 {
	if x != nil && x.Confidence != nil {
		return *x.Confidence
	}
	return 0
}

func (x *RetrieveCandidate) GetExtendInfo() []byte {
	if x != nil {
		return x.ExtendInfo
	}
	return nil
}

type RetrieveItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*RetrieveCandidate `protobuf:"bytes,1,rep,name=result" json:"result,omitempty"`
}

func (x *RetrieveItem) Reset() {
	*x = RetrieveItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveItem) ProtoMessage() {}

func (x *RetrieveItem) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveItem.ProtoReflect.Descriptor instead.
func (*RetrieveItem) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{28}
}

func (x *RetrieveItem) GetResult() []*RetrieveCandidate {
	if x != nil {
		return x.Result
	}
	return nil
}

type GroupRetrieveItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId            *string         `protobuf:"bytes,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	Items              []*RetrieveItem `protobuf:"bytes,2,rep,name=items" json:"items,omitempty"`
	GroupSize          *int64          `protobuf:"varint,3,opt,name=group_size,json=groupSize" json:"group_size,omitempty"` // < 0: invalid; >=0 valid size
	FeatureIdx         *int32          `protobuf:"varint,4,opt,name=feature_idx,json=featureIdx" json:"feature_idx,omitempty"`
	RetrieveTimecostMs *int32          `protobuf:"varint,5,opt,name=retrieve_timecost_ms,json=retrieveTimecostMs" json:"retrieve_timecost_ms,omitempty"`
}

func (x *GroupRetrieveItem) Reset() {
	*x = GroupRetrieveItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupRetrieveItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupRetrieveItem) ProtoMessage() {}

func (x *GroupRetrieveItem) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupRetrieveItem.ProtoReflect.Descriptor instead.
func (*GroupRetrieveItem) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{29}
}

func (x *GroupRetrieveItem) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

func (x *GroupRetrieveItem) GetItems() []*RetrieveItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *GroupRetrieveItem) GetGroupSize() int64 {
	if x != nil && x.GroupSize != nil {
		return *x.GroupSize
	}
	return 0
}

func (x *GroupRetrieveItem) GetFeatureIdx() int32 {
	if x != nil && x.FeatureIdx != nil {
		return *x.FeatureIdx
	}
	return 0
}

func (x *GroupRetrieveItem) GetRetrieveTimecostMs() int32 {
	if x != nil && x.RetrieveTimecostMs != nil {
		return *x.RetrieveTimecostMs
	}
	return 0
}

var File_zeus_proto protoreflect.FileDescriptor

var file_zeus_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x7a, 0x65, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x79, 0x6f,
	0x75, 0x74, 0x75, 0x2e, 0x7a, 0x65, 0x75, 0x73, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9b, 0x01, 0x0a, 0x0d, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x6d, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x69, 0x6d,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x0c, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x79,
	0x6f, 0x75, 0x74, 0x75, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0b, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69,
	0x64, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x49, 0x64, 0x78, 0x22, 0xb2, 0x02, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x2b, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x2e, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x09, 0x64, 0x69,
	0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0c,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x2e, 0x7a, 0x65, 0x75, 0x73, 0x2e, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x6b, 0x0a, 0x0e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x22, 0x7b, 0x0a, 0x10, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x07, 0x62, 0x69, 0x74, 0x66, 0x6c, 0x61, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x2e, 0x7a, 0x65,
	0x75, 0x73, 0x2e, 0x42, 0x69, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x07, 0x62, 0x69, 0x74, 0x66,
	0x6c, 0x61, 0x67, 0x22, 0xed, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x73, 0x67, 0x12, 0x3a, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x79, 0x6f, 0x75, 0x74,
	0x75, 0x2e, 0x7a, 0x65, 0x75, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x82, 0x04, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0a, 0x6c, 0x35, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x6c, 0x35, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x1e, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x02, 0x18, 0x01, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x12, 0x2b, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x2e, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x18,
	0x0a, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x64, 0x69, 0x6d, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x3a, 0x0a, 0x17, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x02, 0x18, 0x01, 0x52, 0x15, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x39, 0x0a, 0x0c, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x2e, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x08, 0x63, 0x75,
	0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x07, 0x63, 0x75, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x2e, 0x7a, 0x65, 0x75, 0x73, 0x2e,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x29, 0x0a,
	0x0e, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0d, 0x61, 0x73, 0x79, 0x6e, 0x63,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x22, 0xaa, 0x02, 0x0a, 0x0e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x56, 0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2a, 0x2e, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x2e, 0x7a, 0x65, 0x75, 0x73, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a,
	0x0e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x2e, 0x7a, 0x65,
	0x75, 0x73, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x0d, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22,
	0x44, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x44, 0x44, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52,
	0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x10, 0x02, 0x22, 0x6b, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d,
	0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x73, 0x67, 0x22, 0x4a, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x6b,
	0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x73, 0x70,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x22, 0x98, 0x01, 0x0a, 0x07,
	0x46, 0x65, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x15, 0x0a, 0x06, 0x66, 0x65, 0x61, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x65, 0x61, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x30, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x30, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x31, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xaf, 0x01, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x46, 0x65,
	0x61, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x29, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x2e, 0x7a, 0x65, 0x75, 0x73, 0x2e, 0x46, 0x65, 0x61, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1b, 0x0a, 0x05, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x78, 0x22, 0xc7, 0x01, 0x0a, 0x0a, 0x41, 0x64, 0x64,
	0x46, 0x65, 0x61, 0x73, 0x52, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d,
	0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x73, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x65, 0x61, 0x49, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x66,
	0x61, 0x69, 0x6c, 0x5f, 0x66, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x66, 0x61, 0x69, 0x6c, 0x46, 0x65, 0x61, 0x49, 0x64, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x80, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x46, 0x65, 0x61, 0x73, 0x52, 0x65,
	0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x66,
	0x65, 0x61, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x65,
	0x61, 0x49, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x69, 0x64, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x49, 0x64, 0x78, 0x22, 0x92, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x46, 0x65, 0x61,
	0x73, 0x52, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12,
	0x29, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x2e, 0x7a, 0x65, 0x75, 0x73, 0x2e, 0x46, 0x65, 0x61, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x95, 0x01, 0x0a, 0x0d, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x65, 0x61, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x2e, 0x7a, 0x65,
	0x75, 0x73, 0x2e, 0x46, 0x65, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x78,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49,
	0x64, 0x78, 0x22, 0xa8, 0x01, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x65, 0x61,
	0x73, 0x52, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12,
	0x17, 0x0a, 0x07, 0x66, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x66, 0x65, 0x61, 0x49, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x62, 0x0a,
	0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x65, 0x61, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x65, 0x61, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x65, 0x61, 0x49, 0x64,
	0x73, 0x22, 0xca, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x65, 0x61, 0x73,
	0x52, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x17,
	0x0a, 0x07, 0x66, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x66, 0x65, 0x61, 0x49, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x5f,
	0x66, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x66,
	0x61, 0x69, 0x6c, 0x46, 0x65, 0x61, 0x49, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x8b,
	0x01, 0x0a, 0x11, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x78, 0x22, 0x99, 0x01, 0x0a,
	0x11, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x29, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x6f, 0x75, 0x74, 0x75, 0x2e, 0x7a, 0x65, 0x75, 0x73, 0x2e, 0x46, 0x65, 0x61, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x65, 0x61, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x65, 0x61, 0x49, 0x64, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0xaa, 0x01, 0x0a,
	0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x73, 0x70,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x66,
	0x65, 0x61, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x65,
	0x61, 0x49, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x68, 0x0a, 0x0f, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x22, 0xaa, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d,
	0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x73, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x65, 0x61, 0x49, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0xda, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x6f, 0x70, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x78, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x0b, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x78, 0x73, 0x12, 0x1e, 0x0a,
	0x09, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x3a, 0x01, 0x31, 0x52, 0x08, 0x6e, 0x65, 0x65, 0x64, 0x53, 0x6f, 0x72, 0x74, 0x22, 0xa8, 0x01,
	0x0a, 0x0b, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x73, 0x70, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x3e, 0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x79, 0x6f, 0x75, 0x74, 0x75, 0x2e, 0x7a, 0x65, 0x75, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x76, 0x65, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x15,
	0x0a, 0x06, 0x66, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x66, 0x65, 0x61, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x45, 0x0a, 0x0c, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x35, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x2e, 0x7a, 0x65, 0x75, 0x73,
	0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xd0, 0x01, 0x0a, 0x11, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x6f, 0x75,
	0x74, 0x75, 0x2e, 0x7a, 0x65, 0x75, 0x73, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x78, 0x12, 0x30, 0x0a, 0x14, 0x72,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x63, 0x6f, 0x73, 0x74,
	0x5f, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x72, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x63, 0x6f, 0x73, 0x74, 0x4d, 0x73, 0x2a, 0x77, 0x0a,
	0x07, 0x42, 0x69, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x49, 0x54, 0x46,
	0x4c, 0x41, 0x47, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a,
	0x18, 0x42, 0x49, 0x54, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x42,
	0x49, 0x54, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x42, 0x49, 0x54, 0x46, 0x4c,
	0x41, 0x47, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x56, 0x45, 0x52,
	0x53, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x42, 0x13, 0x5a, 0x0e, 0x61, 0x70, 0x69, 0x2f, 0x79, 0x6f,
	0x75, 0x74, 0x75, 0x5f, 0x7a, 0x65, 0x75, 0x73, 0x80, 0x01, 0x01,
}

var (
	file_zeus_proto_rawDescOnce sync.Once
	file_zeus_proto_rawDescData = file_zeus_proto_rawDesc
)

func file_zeus_proto_rawDescGZIP() []byte {
	file_zeus_proto_rawDescOnce.Do(func() {
		file_zeus_proto_rawDescData = protoimpl.X.CompressGZIP(file_zeus_proto_rawDescData)
	})
	return file_zeus_proto_rawDescData
}

var file_zeus_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_zeus_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_zeus_proto_goTypes = []interface{}{
	(BitFlag)(0),                        // 0: youtu.zeus.BitFlag
	(UpdateGroupReq_UpdateGroupType)(0), // 1: youtu.zeus.UpdateGroupReq.UpdateGroupType
	(*FeatureConfig)(nil),               // 2: youtu.zeus.FeatureConfig
	(*CreateGroupReq)(nil),              // 3: youtu.zeus.CreateGroupReq
	(*CreateGroupRsp)(nil),              // 4: youtu.zeus.CreateGroupRsp
	(*DescribeGroupReq)(nil),            // 5: youtu.zeus.DescribeGroupReq
	(*DescribeGroupRsp)(nil),            // 6: youtu.zeus.DescribeGroupRsp
	(*GroupConfig)(nil),                 // 7: youtu.zeus.GroupConfig
	(*UpdateGroupReq)(nil),              // 8: youtu.zeus.UpdateGroupReq
	(*UpdateGroupRsp)(nil),              // 9: youtu.zeus.UpdateGroupRsp
	(*DeleteGroupReq)(nil),              // 10: youtu.zeus.DeleteGroupReq
	(*DeleteGroupRsp)(nil),              // 11: youtu.zeus.DeleteGroupRsp
	(*FeaItem)(nil),                     // 12: youtu.zeus.FeaItem
	(*AddFeasReq)(nil),                  // 13: youtu.zeus.AddFeasReq
	(*AddFeasRsp)(nil),                  // 14: youtu.zeus.AddFeasRsp
	(*GetFeasReq)(nil),                  // 15: youtu.zeus.GetFeasReq
	(*GetFeasRsp)(nil),                  // 16: youtu.zeus.GetFeasRsp
	(*UpdateFeasReq)(nil),               // 17: youtu.zeus.UpdateFeasReq
	(*UpdateFeasRsp)(nil),               // 18: youtu.zeus.UpdateFeasRsp
	(*DeleteFeasReq)(nil),               // 19: youtu.zeus.DeleteFeasReq
	(*DeleteFeasRsp)(nil),               // 20: youtu.zeus.DeleteFeasRsp
	(*DescribeEntityReq)(nil),           // 21: youtu.zeus.DescribeEntityReq
	(*DescribeEntityRsp)(nil),           // 22: youtu.zeus.DescribeEntityRsp
	(*UpdateEntityReq)(nil),             // 23: youtu.zeus.UpdateEntityReq
	(*UpdateEntityRsp)(nil),             // 24: youtu.zeus.UpdateEntityRsp
	(*DeleteEntityReq)(nil),             // 25: youtu.zeus.DeleteEntityReq
	(*DeleteEntityRsp)(nil),             // 26: youtu.zeus.DeleteEntityRsp
	(*RetrieveReq)(nil),                 // 27: youtu.zeus.RetrieveReq
	(*RetrieveRsp)(nil),                 // 28: youtu.zeus.RetrieveRsp
	(*RetrieveCandidate)(nil),           // 29: youtu.zeus.RetrieveCandidate
	(*RetrieveItem)(nil),                // 30: youtu.zeus.RetrieveItem
	(*GroupRetrieveItem)(nil),           // 31: youtu.zeus.GroupRetrieveItem
	(youtu.FeatureType)(0),              // 32: youtu.FeatureType
	(youtu.Platform)(0),                 // 33: youtu.Platform
}
var file_zeus_proto_depIdxs = []int32{
	32, // 0: youtu.zeus.FeatureConfig.feature_type:type_name -> youtu.FeatureType
	33, // 1: youtu.zeus.CreateGroupReq.platform:type_name -> youtu.Platform
	32, // 2: youtu.zeus.CreateGroupReq.feature_type:type_name -> youtu.FeatureType
	2,  // 3: youtu.zeus.CreateGroupReq.feature_config:type_name -> youtu.zeus.FeatureConfig
	0,  // 4: youtu.zeus.DescribeGroupReq.bitflag:type_name -> youtu.zeus.BitFlag
	7,  // 5: youtu.zeus.DescribeGroupRsp.group_config:type_name -> youtu.zeus.GroupConfig
	33, // 6: youtu.zeus.GroupConfig.platform:type_name -> youtu.Platform
	32, // 7: youtu.zeus.GroupConfig.feature_type:type_name -> youtu.FeatureType
	2,  // 8: youtu.zeus.GroupConfig.feature_configs:type_name -> youtu.zeus.FeatureConfig
	1,  // 9: youtu.zeus.UpdateGroupReq.update_group_type:type_name -> youtu.zeus.UpdateGroupReq.UpdateGroupType
	2,  // 10: youtu.zeus.UpdateGroupReq.feature_config:type_name -> youtu.zeus.FeatureConfig
	12, // 11: youtu.zeus.AddFeasReq.items:type_name -> youtu.zeus.FeaItem
	12, // 12: youtu.zeus.GetFeasRsp.items:type_name -> youtu.zeus.FeaItem
	12, // 13: youtu.zeus.UpdateFeasReq.items:type_name -> youtu.zeus.FeaItem
	12, // 14: youtu.zeus.DescribeEntityRsp.items:type_name -> youtu.zeus.FeaItem
	31, // 15: youtu.zeus.RetrieveRsp.group_items:type_name -> youtu.zeus.GroupRetrieveItem
	29, // 16: youtu.zeus.RetrieveItem.result:type_name -> youtu.zeus.RetrieveCandidate
	30, // 17: youtu.zeus.GroupRetrieveItem.items:type_name -> youtu.zeus.RetrieveItem
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_zeus_proto_init() }
func file_zeus_proto_init() {
	if File_zeus_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_zeus_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGroupRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeGroupRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGroupRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGroupRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeaItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFeasReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFeasRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFeasReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFeasRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFeasReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFeasRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFeasReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFeasRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeEntityReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeEntityRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateEntityReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateEntityRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteEntityReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteEntityRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveCandidate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupRetrieveItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zeus_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_zeus_proto_goTypes,
		DependencyIndexes: file_zeus_proto_depIdxs,
		EnumInfos:         file_zeus_proto_enumTypes,
		MessageInfos:      file_zeus_proto_msgTypes,
	}.Build()
	File_zeus_proto = out.File
	file_zeus_proto_rawDesc = nil
	file_zeus_proto_goTypes = nil
	file_zeus_proto_depIdxs = nil
}
