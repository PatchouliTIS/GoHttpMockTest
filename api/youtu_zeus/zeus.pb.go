// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.5.0
// source: zeus.proto

package youtu_zeus

import (
	youtu "zeus/api/youtu"
	youtu_job "zeus/api/youtu_job"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RetrieveControl_CacheStrategy int32

const (
	RetrieveControl_FORCE_CHECK RetrieveControl_CacheStrategy = 1
	RetrieveControl_NICE_CHECK  RetrieveControl_CacheStrategy = 2
)

// Enum value maps for RetrieveControl_CacheStrategy.
var (
	RetrieveControl_CacheStrategy_name = map[int32]string{
		1: "FORCE_CHECK",
		2: "NICE_CHECK",
	}
	RetrieveControl_CacheStrategy_value = map[string]int32{
		"FORCE_CHECK": 1,
		"NICE_CHECK":  2,
	}
)

func (x RetrieveControl_CacheStrategy) Enum() *RetrieveControl_CacheStrategy {
	p := new(RetrieveControl_CacheStrategy)
	*p = x
	return p
}

func (x RetrieveControl_CacheStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RetrieveControl_CacheStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_zeus_proto_enumTypes[0].Descriptor()
}

func (RetrieveControl_CacheStrategy) Type() protoreflect.EnumType {
	return &file_zeus_proto_enumTypes[0]
}

func (x RetrieveControl_CacheStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RetrieveControl_CacheStrategy) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RetrieveControl_CacheStrategy(num)
	return nil
}

// Deprecated: Use RetrieveControl_CacheStrategy.Descriptor instead.
func (RetrieveControl_CacheStrategy) EnumDescriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{56, 0}
}

type FeatureConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dimension   *int32             `protobuf:"varint,1,opt,name=dimension" json:"dimension,omitempty"`
	FeatureType *youtu.FeatureType `protobuf:"varint,2,opt,name=feature_type,json=featureType,enum=youtu.FeatureType" json:"feature_type,omitempty"`
	Scale       *float64           `protobuf:"fixed64,3,opt,name=scale" json:"scale,omitempty"`
	FeatureIdx  *int32             `protobuf:"varint,4,opt,name=feature_idx,json=featureIdx" json:"feature_idx,omitempty"`
}

func (x *FeatureConfig) Reset() {
	*x = FeatureConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureConfig) ProtoMessage() {}

func (x *FeatureConfig) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureConfig.ProtoReflect.Descriptor instead.
func (*FeatureConfig) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{0}
}

func (x *FeatureConfig) GetDimension() int32 {
	if x != nil && x.Dimension != nil {
		return *x.Dimension
	}
	return 0
}

func (x *FeatureConfig) GetFeatureType() youtu.FeatureType {
	if x != nil && x.FeatureType != nil {
		return *x.FeatureType
	}
	return youtu.FeatureType(-1)
}

func (x *FeatureConfig) GetScale() float64 {
	if x != nil && x.Scale != nil {
		return *x.Scale
	}
	return 0
}

func (x *FeatureConfig) GetFeatureIdx() int32 {
	if x != nil && x.FeatureIdx != nil {
		return *x.FeatureIdx
	}
	return 0
}

type CreateGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string         `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	GroupId   *string         `protobuf:"bytes,2,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	Platform  *youtu.Platform `protobuf:"varint,3,opt,name=platform,enum=youtu.Platform" json:"platform,omitempty"`
	Capacity  *int32          `protobuf:"varint,4,opt,name=capacity" json:"capacity,omitempty"`
	// Deprecated: Marked as deprecated in zeus.proto.
	Dimension *int32 `protobuf:"varint,5,opt,name=dimension" json:"dimension,omitempty"`
	// Deprecated: Marked as deprecated in zeus.proto.
	FeatureType   *youtu.FeatureType `protobuf:"varint,6,opt,name=feature_type,json=featureType,enum=youtu.FeatureType" json:"feature_type,omitempty"`
	FeatureConfig *FeatureConfig     `protobuf:"bytes,7,opt,name=feature_config,json=featureConfig" json:"feature_config,omitempty"`
	SubGroupsNum  *int32             `protobuf:"varint,8,opt,name=sub_groups_num,json=subGroupsNum,def=0" json:"sub_groups_num,omitempty"`
	MaxTopn       *int32             `protobuf:"varint,9,opt,name=max_topn,json=maxTopn" json:"max_topn,omitempty"`
	AutoSync      *bool              `protobuf:"varint,10,opt,name=auto_sync,json=autoSync,def=0" json:"auto_sync,omitempty"`
}

// Default values for CreateGroupReq fields.
const (
	Default_CreateGroupReq_SubGroupsNum = int32(0)
	Default_CreateGroupReq_AutoSync     = bool(false)
)

func (x *CreateGroupReq) Reset() {
	*x = CreateGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGroupReq) ProtoMessage() {}

func (x *CreateGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGroupReq.ProtoReflect.Descriptor instead.
func (*CreateGroupReq) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{1}
}

func (x *CreateGroupReq) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *CreateGroupReq) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

func (x *CreateGroupReq) GetPlatform() youtu.Platform {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return youtu.Platform(0)
}

func (x *CreateGroupReq) GetCapacity() int32 {
	if x != nil && x.Capacity != nil {
		return *x.Capacity
	}
	return 0
}

// Deprecated: Marked as deprecated in zeus.proto.
func (x *CreateGroupReq) GetDimension() int32 {
	if x != nil && x.Dimension != nil {
		return *x.Dimension
	}
	return 0
}

// Deprecated: Marked as deprecated in zeus.proto.
func (x *CreateGroupReq) GetFeatureType() youtu.FeatureType {
	if x != nil && x.FeatureType != nil {
		return *x.FeatureType
	}
	return youtu.FeatureType(-1)
}

func (x *CreateGroupReq) GetFeatureConfig() *FeatureConfig {
	if x != nil {
		return x.FeatureConfig
	}
	return nil
}

func (x *CreateGroupReq) GetSubGroupsNum() int32 {
	if x != nil && x.SubGroupsNum != nil {
		return *x.SubGroupsNum
	}
	return Default_CreateGroupReq_SubGroupsNum
}

func (x *CreateGroupReq) GetMaxTopn() int32 {
	if x != nil && x.MaxTopn != nil {
		return *x.MaxTopn
	}
	return 0
}

func (x *CreateGroupReq) GetAutoSync() bool {
	if x != nil && x.AutoSync != nil {
		return *x.AutoSync
	}
	return Default_CreateGroupReq_AutoSync
}

type CreateGroupRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Errorcode *int32  `protobuf:"varint,2,opt,name=errorcode" json:"errorcode,omitempty"`
	Errormsg  *string `protobuf:"bytes,3,opt,name=errormsg" json:"errormsg,omitempty"`
}

func (x *CreateGroupRsp) Reset() {
	*x = CreateGroupRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGroupRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGroupRsp) ProtoMessage() {}

func (x *CreateGroupRsp) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGroupRsp.ProtoReflect.Descriptor instead.
func (*CreateGroupRsp) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{2}
}

func (x *CreateGroupRsp) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *CreateGroupRsp) GetErrorcode() int32 {
	if x != nil && x.Errorcode != nil {
		return *x.Errorcode
	}
	return 0
}

func (x *CreateGroupRsp) GetErrormsg() string {
	if x != nil && x.Errormsg != nil {
		return *x.Errormsg
	}
	return ""
}

// Not recommend, pls use DeleteGroupAsync
// Delete Group will delete group completely, including both
// group's meta data and data
// Even if an ERROR is returned, the data and metadata may be deleted
type DeleteGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId   *string `protobuf:"bytes,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	SessionId *string `protobuf:"bytes,2,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
}

func (x *DeleteGroupReq) Reset() {
	*x = DeleteGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGroupReq) ProtoMessage() {}

func (x *DeleteGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGroupReq.ProtoReflect.Descriptor instead.
func (*DeleteGroupReq) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteGroupReq) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

func (x *DeleteGroupReq) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

type DeleteGroupRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Errorcode *int32  `protobuf:"varint,2,opt,name=errorcode" json:"errorcode,omitempty"`
	Errormsg  *string `protobuf:"bytes,3,opt,name=errormsg" json:"errormsg,omitempty"`
}

func (x *DeleteGroupRsp) Reset() {
	*x = DeleteGroupRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGroupRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGroupRsp) ProtoMessage() {}

func (x *DeleteGroupRsp) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGroupRsp.ProtoReflect.Descriptor instead.
func (*DeleteGroupRsp) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteGroupRsp) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *DeleteGroupRsp) GetErrorcode() int32 {
	if x != nil && x.Errorcode != nil {
		return *x.Errorcode
	}
	return 0
}

func (x *DeleteGroupRsp) GetErrormsg() string {
	if x != nil && x.Errormsg != nil {
		return *x.Errormsg
	}
	return ""
}

type JobContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId *string `protobuf:"bytes,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
}

func (x *JobContent) Reset() {
	*x = JobContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobContent) ProtoMessage() {}

func (x *JobContent) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobContent.ProtoReflect.Descriptor instead.
func (*JobContent) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{5}
}

func (x *JobContent) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

type GetDeleteGroupAsyncStateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	GroupId   *string `protobuf:"bytes,2,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
}

func (x *GetDeleteGroupAsyncStateReq) Reset() {
	*x = GetDeleteGroupAsyncStateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeleteGroupAsyncStateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeleteGroupAsyncStateReq) ProtoMessage() {}

func (x *GetDeleteGroupAsyncStateReq) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeleteGroupAsyncStateReq.ProtoReflect.Descriptor instead.
func (*GetDeleteGroupAsyncStateReq) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{6}
}

func (x *GetDeleteGroupAsyncStateReq) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *GetDeleteGroupAsyncStateReq) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

type GetDeleteGroupAsyncStateRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string            `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Errorcode *int32             `protobuf:"varint,2,opt,name=errorcode" json:"errorcode,omitempty"`
	Errormsg  *string            `protobuf:"bytes,3,opt,name=errormsg" json:"errormsg,omitempty"`
	JobInfo   *youtu_job.JobInfo `protobuf:"bytes,4,opt,name=job_info,json=jobInfo" json:"job_info,omitempty"`
}

func (x *GetDeleteGroupAsyncStateRsp) Reset() {
	*x = GetDeleteGroupAsyncStateRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeleteGroupAsyncStateRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeleteGroupAsyncStateRsp) ProtoMessage() {}

func (x *GetDeleteGroupAsyncStateRsp) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeleteGroupAsyncStateRsp.ProtoReflect.Descriptor instead.
func (*GetDeleteGroupAsyncStateRsp) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{7}
}

func (x *GetDeleteGroupAsyncStateRsp) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *GetDeleteGroupAsyncStateRsp) GetErrorcode() int32 {
	if x != nil && x.Errorcode != nil {
		return *x.Errorcode
	}
	return 0
}

func (x *GetDeleteGroupAsyncStateRsp) GetErrormsg() string {
	if x != nil && x.Errormsg != nil {
		return *x.Errormsg
	}
	return ""
}

func (x *GetDeleteGroupAsyncStateRsp) GetJobInfo() *youtu_job.JobInfo {
	if x != nil {
		return x.JobInfo
	}
	return nil
}

type DeletePageDataReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	GroupId   *string `protobuf:"bytes,2,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	PageId    *string `protobuf:"bytes,3,opt,name=page_id,json=pageId" json:"page_id,omitempty"`
}

func (x *DeletePageDataReq) Reset() {
	*x = DeletePageDataReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePageDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePageDataReq) ProtoMessage() {}

func (x *DeletePageDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePageDataReq.ProtoReflect.Descriptor instead.
func (*DeletePageDataReq) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{8}
}

func (x *DeletePageDataReq) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *DeletePageDataReq) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

func (x *DeletePageDataReq) GetPageId() string {
	if x != nil && x.PageId != nil {
		return *x.PageId
	}
	return ""
}

type DeletePageDataRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Errorcode *int32  `protobuf:"varint,2,opt,name=errorcode" json:"errorcode,omitempty"`
	Errormsg  *string `protobuf:"bytes,3,opt,name=errormsg" json:"errormsg,omitempty"`
}

func (x *DeletePageDataRsp) Reset() {
	*x = DeletePageDataRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePageDataRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePageDataRsp) ProtoMessage() {}

func (x *DeletePageDataRsp) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePageDataRsp.ProtoReflect.Descriptor instead.
func (*DeletePageDataRsp) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{9}
}

func (x *DeletePageDataRsp) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *DeletePageDataRsp) GetErrorcode() int32 {
	if x != nil && x.Errorcode != nil {
		return *x.Errorcode
	}
	return 0
}

func (x *DeletePageDataRsp) GetErrormsg() string {
	if x != nil && x.Errormsg != nil {
		return *x.Errormsg
	}
	return ""
}

// TruncateGroup will only delete group's data,
// leaving group's meta data untouched
type TruncateGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	GroupId   *string `protobuf:"bytes,2,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
}

func (x *TruncateGroupReq) Reset() {
	*x = TruncateGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TruncateGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TruncateGroupReq) ProtoMessage() {}

func (x *TruncateGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TruncateGroupReq.ProtoReflect.Descriptor instead.
func (*TruncateGroupReq) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{10}
}

func (x *TruncateGroupReq) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *TruncateGroupReq) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

type TruncateGroupRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Errorcode *int32  `protobuf:"varint,2,opt,name=errorcode" json:"errorcode,omitempty"`
	Errormsg  *string `protobuf:"bytes,3,opt,name=errormsg" json:"errormsg,omitempty"`
}

func (x *TruncateGroupRsp) Reset() {
	*x = TruncateGroupRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TruncateGroupRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TruncateGroupRsp) ProtoMessage() {}

func (x *TruncateGroupRsp) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TruncateGroupRsp.ProtoReflect.Descriptor instead.
func (*TruncateGroupRsp) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{11}
}

func (x *TruncateGroupRsp) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *TruncateGroupRsp) GetErrorcode() int32 {
	if x != nil && x.Errorcode != nil {
		return *x.Errorcode
	}
	return 0
}

func (x *TruncateGroupRsp) GetErrormsg() string {
	if x != nil && x.Errormsg != nil {
		return *x.Errormsg
	}
	return ""
}

// If succ will also set current_feature = 2
type AddFeatureConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId     *string        `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	GroupId       *string        `protobuf:"bytes,2,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	FeatureConfig *FeatureConfig `protobuf:"bytes,3,opt,name=feature_config,json=featureConfig" json:"feature_config,omitempty"`
}

func (x *AddFeatureConfigReq) Reset() {
	*x = AddFeatureConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFeatureConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFeatureConfigReq) ProtoMessage() {}

func (x *AddFeatureConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFeatureConfigReq.ProtoReflect.Descriptor instead.
func (*AddFeatureConfigReq) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{12}
}

func (x *AddFeatureConfigReq) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *AddFeatureConfigReq) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

func (x *AddFeatureConfigReq) GetFeatureConfig() *FeatureConfig {
	if x != nil {
		return x.FeatureConfig
	}
	return nil
}

type AddFeatureConfigRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Errorcode *int32  `protobuf:"varint,2,opt,name=errorcode" json:"errorcode,omitempty"`
	Errormsg  *string `protobuf:"bytes,3,opt,name=errormsg" json:"errormsg,omitempty"`
}

func (x *AddFeatureConfigRsp) Reset() {
	*x = AddFeatureConfigRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFeatureConfigRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFeatureConfigRsp) ProtoMessage() {}

func (x *AddFeatureConfigRsp) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFeatureConfigRsp.ProtoReflect.Descriptor instead.
func (*AddFeatureConfigRsp) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{13}
}

func (x *AddFeatureConfigRsp) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *AddFeatureConfigRsp) GetErrorcode() int32 {
	if x != nil && x.Errorcode != nil {
		return *x.Errorcode
	}
	return 0
}

func (x *AddFeatureConfigRsp) GetErrormsg() string {
	if x != nil && x.Errormsg != nil {
		return *x.Errormsg
	}
	return ""
}

// If succ will also set current_feature = 1-feature_idx
type DeleteFeatureConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId  *string `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	GroupId    *string `protobuf:"bytes,2,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	FeatureIdx *int32  `protobuf:"varint,3,opt,name=feature_idx,json=featureIdx" json:"feature_idx,omitempty"`
}

func (x *DeleteFeatureConfigReq) Reset() {
	*x = DeleteFeatureConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFeatureConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFeatureConfigReq) ProtoMessage() {}

func (x *DeleteFeatureConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFeatureConfigReq.ProtoReflect.Descriptor instead.
func (*DeleteFeatureConfigReq) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteFeatureConfigReq) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *DeleteFeatureConfigReq) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

func (x *DeleteFeatureConfigReq) GetFeatureIdx() int32 {
	if x != nil && x.FeatureIdx != nil {
		return *x.FeatureIdx
	}
	return 0
}

type DeleteFeatureConfigRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Errorcode *int32  `protobuf:"varint,2,opt,name=errorcode" json:"errorcode,omitempty"`
	Errormsg  *string `protobuf:"bytes,3,opt,name=errormsg" json:"errormsg,omitempty"`
}

func (x *DeleteFeatureConfigRsp) Reset() {
	*x = DeleteFeatureConfigRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFeatureConfigRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFeatureConfigRsp) ProtoMessage() {}

func (x *DeleteFeatureConfigRsp) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFeatureConfigRsp.ProtoReflect.Descriptor instead.
func (*DeleteFeatureConfigRsp) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteFeatureConfigRsp) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *DeleteFeatureConfigRsp) GetErrorcode() int32 {
	if x != nil && x.Errorcode != nil {
		return *x.Errorcode
	}
	return 0
}

func (x *DeleteFeatureConfigRsp) GetErrormsg() string {
	if x != nil && x.Errormsg != nil {
		return *x.Errormsg
	}
	return ""
}

type FeaItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeaId      *string `protobuf:"bytes,1,opt,name=fea_id,json=feaId" json:"fea_id,omitempty"`
	EntityId   *string `protobuf:"bytes,2,opt,name=entity_id,json=entityId" json:"entity_id,omitempty"`
	Feature_0  []byte  `protobuf:"bytes,3,opt,name=feature_0,json=feature0" json:"feature_0,omitempty"`
	Feature_1  []byte  `protobuf:"bytes,4,opt,name=feature_1,json=feature1" json:"feature_1,omitempty"`
	ExtendInfo []byte  `protobuf:"bytes,5,opt,name=extend_info,json=extendInfo" json:"extend_info,omitempty"`
}

func (x *FeaItem) Reset() {
	*x = FeaItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeaItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeaItem) ProtoMessage() {}

func (x *FeaItem) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeaItem.ProtoReflect.Descriptor instead.
func (*FeaItem) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{16}
}

func (x *FeaItem) GetFeaId() string {
	if x != nil && x.FeaId != nil {
		return *x.FeaId
	}
	return ""
}

func (x *FeaItem) GetEntityId() string {
	if x != nil && x.EntityId != nil {
		return *x.EntityId
	}
	return ""
}

func (x *FeaItem) GetFeature_0() []byte {
	if x != nil {
		return x.Feature_0
	}
	return nil
}

func (x *FeaItem) GetFeature_1() []byte {
	if x != nil {
		return x.Feature_1
	}
	return nil
}

func (x *FeaItem) GetExtendInfo() []byte {
	if x != nil {
		return x.ExtendInfo
	}
	return nil
}

// force=false: if has fea_id already exists will return ERR_DB_INSERT_DUPLICATE
// force=true: 1.delete fea_items already exist in DB, if fail will return ERR_DELETE_FEA
//
//	2.insert all request fea_items to DB, if fail it's uncertain whether those fea_ids exists in DB
type AddFeasReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId  *string    `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	GroupId    *string    `protobuf:"bytes,2,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	Items      []*FeaItem `protobuf:"bytes,3,rep,name=items" json:"items,omitempty"`
	Force      *bool      `protobuf:"varint,4,opt,name=force,def=0" json:"force,omitempty"`
	FeatureIdx *int32     `protobuf:"varint,5,opt,name=feature_idx,json=featureIdx" json:"feature_idx,omitempty"` // =0/1/2
}

// Default values for AddFeasReq fields.
const (
	Default_AddFeasReq_Force = bool(false)
)

func (x *AddFeasReq) Reset() {
	*x = AddFeasReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFeasReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFeasReq) ProtoMessage() {}

func (x *AddFeasReq) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFeasReq.ProtoReflect.Descriptor instead.
func (*AddFeasReq) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{17}
}

func (x *AddFeasReq) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *AddFeasReq) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

func (x *AddFeasReq) GetItems() []*FeaItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *AddFeasReq) GetForce() bool {
	if x != nil && x.Force != nil {
		return *x.Force
	}
	return Default_AddFeasReq_Force
}

func (x *AddFeasReq) GetFeatureIdx() int32 {
	if x != nil && x.FeatureIdx != nil {
		return *x.FeatureIdx
	}
	return 0
}

type AddFeasRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string  `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Errorcode *int32   `protobuf:"varint,2,opt,name=errorcode" json:"errorcode,omitempty"`
	Errormsg  *string  `protobuf:"bytes,3,opt,name=errormsg" json:"errormsg,omitempty"`
	FeaIds    []string `protobuf:"bytes,4,rep,name=fea_ids,json=feaIds" json:"fea_ids,omitempty"` // return succ fea_id
}

func (x *AddFeasRsp) Reset() {
	*x = AddFeasRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFeasRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFeasRsp) ProtoMessage() {}

func (x *AddFeasRsp) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFeasRsp.ProtoReflect.Descriptor instead.
func (*AddFeasRsp) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{18}
}

func (x *AddFeasRsp) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *AddFeasRsp) GetErrorcode() int32 {
	if x != nil && x.Errorcode != nil {
		return *x.Errorcode
	}
	return 0
}

func (x *AddFeasRsp) GetErrormsg() string {
	if x != nil && x.Errormsg != nil {
		return *x.Errormsg
	}
	return ""
}

func (x *AddFeasRsp) GetFeaIds() []string {
	if x != nil {
		return x.FeaIds
	}
	return nil
}

// limit: request fea_ids < 10000
type GetFeasReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId  *string  `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	GroupId    *string  `protobuf:"bytes,2,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	FeaIds     []string `protobuf:"bytes,3,rep,name=fea_ids,json=feaIds" json:"fea_ids,omitempty"`
	FeatureIdx *int32   `protobuf:"varint,4,opt,name=feature_idx,json=featureIdx" json:"feature_idx,omitempty"` // =0/1/2
}

func (x *GetFeasReq) Reset() {
	*x = GetFeasReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFeasReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFeasReq) ProtoMessage() {}

func (x *GetFeasReq) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFeasReq.ProtoReflect.Descriptor instead.
func (*GetFeasReq) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{19}
}

func (x *GetFeasReq) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *GetFeasReq) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

func (x *GetFeasReq) GetFeaIds() []string {
	if x != nil {
		return x.FeaIds
	}
	return nil
}

func (x *GetFeasReq) GetFeatureIdx() int32 {
	if x != nil && x.FeatureIdx != nil {
		return *x.FeatureIdx
	}
	return 0
}

type GetFeasRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string    `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Errorcode *int32     `protobuf:"varint,2,opt,name=errorcode" json:"errorcode,omitempty"`
	Errormsg  *string    `protobuf:"bytes,3,opt,name=errormsg" json:"errormsg,omitempty"`
	Items     []*FeaItem `protobuf:"bytes,4,rep,name=items" json:"items,omitempty"`
}

func (x *GetFeasRsp) Reset() {
	*x = GetFeasRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFeasRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFeasRsp) ProtoMessage() {}

func (x *GetFeasRsp) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFeasRsp.ProtoReflect.Descriptor instead.
func (*GetFeasRsp) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{20}
}

func (x *GetFeasRsp) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *GetFeasRsp) GetErrorcode() int32 {
	if x != nil && x.Errorcode != nil {
		return *x.Errorcode
	}
	return 0
}

func (x *GetFeasRsp) GetErrormsg() string {
	if x != nil && x.Errormsg != nil {
		return *x.Errormsg
	}
	return ""
}

func (x *GetFeasRsp) GetItems() []*FeaItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type GetFeasByEntityReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId  *string `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	GroupId    *string `protobuf:"bytes,2,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	EntityId   *string `protobuf:"bytes,3,opt,name=entity_id,json=entityId" json:"entity_id,omitempty"`
	FeatureIdx *int32  `protobuf:"varint,4,opt,name=feature_idx,json=featureIdx" json:"feature_idx,omitempty"` // =0/1/2
}

func (x *GetFeasByEntityReq) Reset() {
	*x = GetFeasByEntityReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFeasByEntityReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFeasByEntityReq) ProtoMessage() {}

func (x *GetFeasByEntityReq) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFeasByEntityReq.ProtoReflect.Descriptor instead.
func (*GetFeasByEntityReq) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{21}
}

func (x *GetFeasByEntityReq) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *GetFeasByEntityReq) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

func (x *GetFeasByEntityReq) GetEntityId() string {
	if x != nil && x.EntityId != nil {
		return *x.EntityId
	}
	return ""
}

func (x *GetFeasByEntityReq) GetFeatureIdx() int32 {
	if x != nil && x.FeatureIdx != nil {
		return *x.FeatureIdx
	}
	return 0
}

type GetFeasByEntityRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string    `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Errorcode *int32     `protobuf:"varint,2,opt,name=errorcode" json:"errorcode,omitempty"`
	Errormsg  *string    `protobuf:"bytes,3,opt,name=errormsg" json:"errormsg,omitempty"`
	Items     []*FeaItem `protobuf:"bytes,4,rep,name=items" json:"items,omitempty"`
}

func (x *GetFeasByEntityRsp) Reset() {
	*x = GetFeasByEntityRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFeasByEntityRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFeasByEntityRsp) ProtoMessage() {}

func (x *GetFeasByEntityRsp) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFeasByEntityRsp.ProtoReflect.Descriptor instead.
func (*GetFeasByEntityRsp) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{22}
}

func (x *GetFeasByEntityRsp) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *GetFeasByEntityRsp) GetErrorcode() int32 {
	if x != nil && x.Errorcode != nil {
		return *x.Errorcode
	}
	return 0
}

func (x *GetFeasByEntityRsp) GetErrormsg() string {
	if x != nil && x.Errormsg != nil {
		return *x.Errormsg
	}
	return ""
}

func (x *GetFeasByEntityRsp) GetItems() []*FeaItem {
	if x != nil {
		return x.Items
	}
	return nil
}

// 1. items only supports size=1
// 2. API will return error if items.size>1
// 3. FeaItem should contain fea_id, entity_id,feature,extend_info;
type UpdateFeasReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId  *string    `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	GroupId    *string    `protobuf:"bytes,2,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	Items      []*FeaItem `protobuf:"bytes,3,rep,name=items" json:"items,omitempty"`
	FeatureIdx *int32     `protobuf:"varint,4,opt,name=feature_idx,json=featureIdx" json:"feature_idx,omitempty"` // =0/1/2
}

func (x *UpdateFeasReq) Reset() {
	*x = UpdateFeasReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFeasReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFeasReq) ProtoMessage() {}

func (x *UpdateFeasReq) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFeasReq.ProtoReflect.Descriptor instead.
func (*UpdateFeasReq) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{23}
}

func (x *UpdateFeasReq) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *UpdateFeasReq) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

func (x *UpdateFeasReq) GetItems() []*FeaItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *UpdateFeasReq) GetFeatureIdx() int32 {
	if x != nil && x.FeatureIdx != nil {
		return *x.FeatureIdx
	}
	return 0
}

type UpdateFeasRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Errorcode *int32  `protobuf:"varint,2,opt,name=errorcode" json:"errorcode,omitempty"`
	Errormsg  *string `protobuf:"bytes,3,opt,name=errormsg" json:"errormsg,omitempty"`
}

func (x *UpdateFeasRsp) Reset() {
	*x = UpdateFeasRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFeasRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFeasRsp) ProtoMessage() {}

func (x *UpdateFeasRsp) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFeasRsp.ProtoReflect.Descriptor instead.
func (*UpdateFeasRsp) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{24}
}

func (x *UpdateFeasRsp) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *UpdateFeasRsp) GetErrorcode() int32 {
	if x != nil && x.Errorcode != nil {
		return *x.Errorcode
	}
	return 0
}

func (x *UpdateFeasRsp) GetErrormsg() string {
	if x != nil && x.Errormsg != nil {
		return *x.Errormsg
	}
	return ""
}

type UpdateEntityIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string  `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	GroupId   *string  `protobuf:"bytes,2,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	FeaIds    []string `protobuf:"bytes,3,rep,name=fea_ids,json=feaIds" json:"fea_ids,omitempty"`
	EntityId  *string  `protobuf:"bytes,4,opt,name=entity_id,json=entityId" json:"entity_id,omitempty"`
}

func (x *UpdateEntityIdReq) Reset() {
	*x = UpdateEntityIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateEntityIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEntityIdReq) ProtoMessage() {}

func (x *UpdateEntityIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEntityIdReq.ProtoReflect.Descriptor instead.
func (*UpdateEntityIdReq) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{25}
}

func (x *UpdateEntityIdReq) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *UpdateEntityIdReq) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

func (x *UpdateEntityIdReq) GetFeaIds() []string {
	if x != nil {
		return x.FeaIds
	}
	return nil
}

func (x *UpdateEntityIdReq) GetEntityId() string {
	if x != nil && x.EntityId != nil {
		return *x.EntityId
	}
	return ""
}

// return fea_ids whose entity_id updated successfully
// not including fea_ids which are not existed
type UpdateEntityIdRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode *int32   `protobuf:"varint,1,opt,name=errorcode" json:"errorcode,omitempty"`
	Errormsg  *string  `protobuf:"bytes,2,opt,name=errormsg" json:"errormsg,omitempty"`
	SessionId *string  `protobuf:"bytes,3,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	FeaIds    []string `protobuf:"bytes,4,rep,name=fea_ids,json=feaIds" json:"fea_ids,omitempty"` // succ fea_ids
}

func (x *UpdateEntityIdRsp) Reset() {
	*x = UpdateEntityIdRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateEntityIdRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEntityIdRsp) ProtoMessage() {}

func (x *UpdateEntityIdRsp) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEntityIdRsp.ProtoReflect.Descriptor instead.
func (*UpdateEntityIdRsp) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{26}
}

func (x *UpdateEntityIdRsp) GetErrorcode() int32 {
	if x != nil && x.Errorcode != nil {
		return *x.Errorcode
	}
	return 0
}

func (x *UpdateEntityIdRsp) GetErrormsg() string {
	if x != nil && x.Errormsg != nil {
		return *x.Errormsg
	}
	return ""
}

func (x *UpdateEntityIdRsp) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *UpdateEntityIdRsp) GetFeaIds() []string {
	if x != nil {
		return x.FeaIds
	}
	return nil
}

// 1. features only supports size=1
// 2. API will return error if features.size!=1
// 3. check_empty = true: if feature_idx not empty will do not update
type UpdateFeaturesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId  *string  `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	GroupId    *string  `protobuf:"bytes,2,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	FeaIds     []string `protobuf:"bytes,3,rep,name=fea_ids,json=feaIds" json:"fea_ids,omitempty"` // fea_ids和features相同idx对应
	Features_0 [][]byte `protobuf:"bytes,4,rep,name=features_0,json=features0" json:"features_0,omitempty"`
	Features_1 [][]byte `protobuf:"bytes,5,rep,name=features_1,json=features1" json:"features_1,omitempty"`
	FeatureIdx *int32   `protobuf:"varint,6,opt,name=feature_idx,json=featureIdx" json:"feature_idx,omitempty"` // =0/1/2
	CheckEmpty *bool    `protobuf:"varint,7,opt,name=check_empty,json=checkEmpty,def=0" json:"check_empty,omitempty"`
	SyncType   *int32   `protobuf:"varint,8,opt,name=sync_type,json=syncType" json:"sync_type,omitempty"` // 0:sync searcher; 1:do not sync;
}

// Default values for UpdateFeaturesReq fields.
const (
	Default_UpdateFeaturesReq_CheckEmpty = bool(false)
)

func (x *UpdateFeaturesReq) Reset() {
	*x = UpdateFeaturesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFeaturesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFeaturesReq) ProtoMessage() {}

func (x *UpdateFeaturesReq) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFeaturesReq.ProtoReflect.Descriptor instead.
func (*UpdateFeaturesReq) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{27}
}

func (x *UpdateFeaturesReq) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *UpdateFeaturesReq) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

func (x *UpdateFeaturesReq) GetFeaIds() []string {
	if x != nil {
		return x.FeaIds
	}
	return nil
}

func (x *UpdateFeaturesReq) GetFeatures_0() [][]byte {
	if x != nil {
		return x.Features_0
	}
	return nil
}

func (x *UpdateFeaturesReq) GetFeatures_1() [][]byte {
	if x != nil {
		return x.Features_1
	}
	return nil
}

func (x *UpdateFeaturesReq) GetFeatureIdx() int32 {
	if x != nil && x.FeatureIdx != nil {
		return *x.FeatureIdx
	}
	return 0
}

func (x *UpdateFeaturesReq) GetCheckEmpty() bool {
	if x != nil && x.CheckEmpty != nil {
		return *x.CheckEmpty
	}
	return Default_UpdateFeaturesReq_CheckEmpty
}

func (x *UpdateFeaturesReq) GetSyncType() int32 {
	if x != nil && x.SyncType != nil {
		return *x.SyncType
	}
	return 0
}

type UpdateFeaturesRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode *int32  `protobuf:"varint,1,opt,name=errorcode" json:"errorcode,omitempty"`
	Errormsg  *string `protobuf:"bytes,2,opt,name=errormsg" json:"errormsg,omitempty"`
	SessionId *string `protobuf:"bytes,3,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
}

func (x *UpdateFeaturesRsp) Reset() {
	*x = UpdateFeaturesRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFeaturesRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFeaturesRsp) ProtoMessage() {}

func (x *UpdateFeaturesRsp) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFeaturesRsp.ProtoReflect.Descriptor instead.
func (*UpdateFeaturesRsp) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{28}
}

func (x *UpdateFeaturesRsp) GetErrorcode() int32 {
	if x != nil && x.Errorcode != nil {
		return *x.Errorcode
	}
	return 0
}

func (x *UpdateFeaturesRsp) GetErrormsg() string {
	if x != nil && x.Errormsg != nil {
		return *x.Errormsg
	}
	return ""
}

func (x *UpdateFeaturesRsp) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

// trigger lazy page loading (page_version will auto-increment)
// used after the page inventory feature is updated
type TriggerPageUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId  *string `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	GroupId    *string `protobuf:"bytes,2,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	PageId     *string `protobuf:"bytes,3,opt,name=page_id,json=pageId" json:"page_id,omitempty"`
	FeatureIdx *int32  `protobuf:"varint,4,opt,name=feature_idx,json=featureIdx" json:"feature_idx,omitempty"` // =0/1/2
}

func (x *TriggerPageUpdateReq) Reset() {
	*x = TriggerPageUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerPageUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerPageUpdateReq) ProtoMessage() {}

func (x *TriggerPageUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerPageUpdateReq.ProtoReflect.Descriptor instead.
func (*TriggerPageUpdateReq) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{29}
}

func (x *TriggerPageUpdateReq) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *TriggerPageUpdateReq) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

func (x *TriggerPageUpdateReq) GetPageId() string {
	if x != nil && x.PageId != nil {
		return *x.PageId
	}
	return ""
}

func (x *TriggerPageUpdateReq) GetFeatureIdx() int32 {
	if x != nil && x.FeatureIdx != nil {
		return *x.FeatureIdx
	}
	return 0
}

type TriggerPageUpdateRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Errorcode *int32  `protobuf:"varint,2,opt,name=errorcode" json:"errorcode,omitempty"`
	Errormsg  *string `protobuf:"bytes,3,opt,name=errormsg" json:"errormsg,omitempty"`
}

func (x *TriggerPageUpdateRsp) Reset() {
	*x = TriggerPageUpdateRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerPageUpdateRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerPageUpdateRsp) ProtoMessage() {}

func (x *TriggerPageUpdateRsp) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerPageUpdateRsp.ProtoReflect.Descriptor instead.
func (*TriggerPageUpdateRsp) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{30}
}

func (x *TriggerPageUpdateRsp) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *TriggerPageUpdateRsp) GetErrorcode() int32 {
	if x != nil && x.Errorcode != nil {
		return *x.Errorcode
	}
	return 0
}

func (x *TriggerPageUpdateRsp) GetErrormsg() string {
	if x != nil && x.Errormsg != nil {
		return *x.Errormsg
	}
	return ""
}

// 1. extend_infos only supports size=1
// 2. API will return error if extend_infos.size!=1
type UpdateExtendInfosReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId   *string  `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	GroupId     *string  `protobuf:"bytes,2,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	FeaIds      []string `protobuf:"bytes,3,rep,name=fea_ids,json=feaIds" json:"fea_ids,omitempty"` // fea_ids和extend_infos相同idx对应
	ExtendInfos [][]byte `protobuf:"bytes,4,rep,name=extend_infos,json=extendInfos" json:"extend_infos,omitempty"`
}

func (x *UpdateExtendInfosReq) Reset() {
	*x = UpdateExtendInfosReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateExtendInfosReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateExtendInfosReq) ProtoMessage() {}

func (x *UpdateExtendInfosReq) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateExtendInfosReq.ProtoReflect.Descriptor instead.
func (*UpdateExtendInfosReq) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{31}
}

func (x *UpdateExtendInfosReq) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *UpdateExtendInfosReq) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

func (x *UpdateExtendInfosReq) GetFeaIds() []string {
	if x != nil {
		return x.FeaIds
	}
	return nil
}

func (x *UpdateExtendInfosReq) GetExtendInfos() [][]byte {
	if x != nil {
		return x.ExtendInfos
	}
	return nil
}

type UpdateExtendInfosRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Errorcode *int32  `protobuf:"varint,2,opt,name=errorcode" json:"errorcode,omitempty"`
	Errormsg  *string `protobuf:"bytes,3,opt,name=errormsg" json:"errormsg,omitempty"`
}

func (x *UpdateExtendInfosRsp) Reset() {
	*x = UpdateExtendInfosRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateExtendInfosRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateExtendInfosRsp) ProtoMessage() {}

func (x *UpdateExtendInfosRsp) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateExtendInfosRsp.ProtoReflect.Descriptor instead.
func (*UpdateExtendInfosRsp) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{32}
}

func (x *UpdateExtendInfosRsp) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *UpdateExtendInfosRsp) GetErrorcode() int32 {
	if x != nil && x.Errorcode != nil {
		return *x.Errorcode
	}
	return 0
}

func (x *UpdateExtendInfosRsp) GetErrormsg() string {
	if x != nil && x.Errormsg != nil {
		return *x.Errormsg
	}
	return ""
}

type DeleteFeasReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string  `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	GroupId   *string  `protobuf:"bytes,2,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	FeaIds    []string `protobuf:"bytes,3,rep,name=fea_ids,json=feaIds" json:"fea_ids,omitempty"`
}

func (x *DeleteFeasReq) Reset() {
	*x = DeleteFeasReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFeasReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFeasReq) ProtoMessage() {}

func (x *DeleteFeasReq) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFeasReq.ProtoReflect.Descriptor instead.
func (*DeleteFeasReq) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{33}
}

func (x *DeleteFeasReq) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *DeleteFeasReq) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

func (x *DeleteFeasReq) GetFeaIds() []string {
	if x != nil {
		return x.FeaIds
	}
	return nil
}

// return fea_ids which are deleted succussfully
// includeing fea_ids which not exsit
type DeleteFeasRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string  `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Errorcode *int32   `protobuf:"varint,2,opt,name=errorcode" json:"errorcode,omitempty"`
	Errormsg  *string  `protobuf:"bytes,3,opt,name=errormsg" json:"errormsg,omitempty"`
	FeaIds    []string `protobuf:"bytes,4,rep,name=fea_ids,json=feaIds" json:"fea_ids,omitempty"`
}

func (x *DeleteFeasRsp) Reset() {
	*x = DeleteFeasRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFeasRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFeasRsp) ProtoMessage() {}

func (x *DeleteFeasRsp) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFeasRsp.ProtoReflect.Descriptor instead.
func (*DeleteFeasRsp) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{34}
}

func (x *DeleteFeasRsp) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *DeleteFeasRsp) GetErrorcode() int32 {
	if x != nil && x.Errorcode != nil {
		return *x.Errorcode
	}
	return 0
}

func (x *DeleteFeasRsp) GetErrormsg() string {
	if x != nil && x.Errormsg != nil {
		return *x.Errormsg
	}
	return ""
}

func (x *DeleteFeasRsp) GetFeaIds() []string {
	if x != nil {
		return x.FeaIds
	}
	return nil
}

// ONLY support single entity_id(we use repeated for compatiable in the future)
type DeleteEntitysReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string  `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	GroupId   *string  `protobuf:"bytes,2,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	EntityIds []string `protobuf:"bytes,3,rep,name=entity_ids,json=entityIds" json:"entity_ids,omitempty"`
}

func (x *DeleteEntitysReq) Reset() {
	*x = DeleteEntitysReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteEntitysReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEntitysReq) ProtoMessage() {}

func (x *DeleteEntitysReq) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEntitysReq.ProtoReflect.Descriptor instead.
func (*DeleteEntitysReq) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{35}
}

func (x *DeleteEntitysReq) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *DeleteEntitysReq) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

func (x *DeleteEntitysReq) GetEntityIds() []string {
	if x != nil {
		return x.EntityIds
	}
	return nil
}

// errorcode: OK, entity_id is totally deleted
//
//	ERR_PARTIAL_OK, some fea_ids(beloing same entity_id) are not deleted
//
// fea_ids: fea_ids which are deleted successfully(beloing same entity_id)
type DeleteEntitysRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string  `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Errorcode *int32   `protobuf:"varint,2,opt,name=errorcode" json:"errorcode,omitempty"`
	Errormsg  *string  `protobuf:"bytes,3,opt,name=errormsg" json:"errormsg,omitempty"`
	FeaIds    []string `protobuf:"bytes,4,rep,name=fea_ids,json=feaIds" json:"fea_ids,omitempty"`
}

func (x *DeleteEntitysRsp) Reset() {
	*x = DeleteEntitysRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteEntitysRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEntitysRsp) ProtoMessage() {}

func (x *DeleteEntitysRsp) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEntitysRsp.ProtoReflect.Descriptor instead.
func (*DeleteEntitysRsp) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{36}
}

func (x *DeleteEntitysRsp) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *DeleteEntitysRsp) GetErrorcode() int32 {
	if x != nil && x.Errorcode != nil {
		return *x.Errorcode
	}
	return 0
}

func (x *DeleteEntitysRsp) GetErrormsg() string {
	if x != nil && x.Errormsg != nil {
		return *x.Errormsg
	}
	return ""
}

func (x *DeleteEntitysRsp) GetFeaIds() []string {
	if x != nil {
		return x.FeaIds
	}
	return nil
}

type GetGroupSizeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	GroupId   *string `protobuf:"bytes,2,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
}

func (x *GetGroupSizeReq) Reset() {
	*x = GetGroupSizeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupSizeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupSizeReq) ProtoMessage() {}

func (x *GetGroupSizeReq) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupSizeReq.ProtoReflect.Descriptor instead.
func (*GetGroupSizeReq) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{37}
}

func (x *GetGroupSizeReq) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *GetGroupSizeReq) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

type GetGroupSizeRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Errorcode *int32  `protobuf:"varint,2,opt,name=errorcode" json:"errorcode,omitempty"`
	Errormsg  *string `protobuf:"bytes,3,opt,name=errormsg" json:"errormsg,omitempty"`
	TotalSize *int32  `protobuf:"varint,4,opt,name=total_size,json=totalSize" json:"total_size,omitempty"`
}

func (x *GetGroupSizeRsp) Reset() {
	*x = GetGroupSizeRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupSizeRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupSizeRsp) ProtoMessage() {}

func (x *GetGroupSizeRsp) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupSizeRsp.ProtoReflect.Descriptor instead.
func (*GetGroupSizeRsp) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{38}
}

func (x *GetGroupSizeRsp) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *GetGroupSizeRsp) GetErrorcode() int32 {
	if x != nil && x.Errorcode != nil {
		return *x.Errorcode
	}
	return 0
}

func (x *GetGroupSizeRsp) GetErrormsg() string {
	if x != nil && x.Errormsg != nil {
		return *x.Errormsg
	}
	return ""
}

func (x *GetGroupSizeRsp) GetTotalSize() int32 {
	if x != nil && x.TotalSize != nil {
		return *x.TotalSize
	}
	return 0
}

// limit: request group_size < 100000
// return fea_ids which >= update_time
// return all fea_ids while update_time=0
type GetGroupFeaIdsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId  *string `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	GroupId    *string `protobuf:"bytes,2,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	UpdateTime *int64  `protobuf:"varint,3,opt,name=update_time,json=updateTime,def=0" json:"update_time,omitempty"` // timestamp in milliseconds
}

// Default values for GetGroupFeaIdsReq fields.
const (
	Default_GetGroupFeaIdsReq_UpdateTime = int64(0)
)

func (x *GetGroupFeaIdsReq) Reset() {
	*x = GetGroupFeaIdsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupFeaIdsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupFeaIdsReq) ProtoMessage() {}

func (x *GetGroupFeaIdsReq) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupFeaIdsReq.ProtoReflect.Descriptor instead.
func (*GetGroupFeaIdsReq) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{39}
}

func (x *GetGroupFeaIdsReq) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *GetGroupFeaIdsReq) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

func (x *GetGroupFeaIdsReq) GetUpdateTime() int64 {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return Default_GetGroupFeaIdsReq_UpdateTime
}

type GetGroupFeaIdsRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string  `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Errorcode *int32   `protobuf:"varint,2,opt,name=errorcode" json:"errorcode,omitempty"`
	Errormsg  *string  `protobuf:"bytes,3,opt,name=errormsg" json:"errormsg,omitempty"`
	FeaIds    []string `protobuf:"bytes,4,rep,name=fea_ids,json=feaIds" json:"fea_ids,omitempty"`
}

func (x *GetGroupFeaIdsRsp) Reset() {
	*x = GetGroupFeaIdsRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupFeaIdsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupFeaIdsRsp) ProtoMessage() {}

func (x *GetGroupFeaIdsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupFeaIdsRsp.ProtoReflect.Descriptor instead.
func (*GetGroupFeaIdsRsp) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{40}
}

func (x *GetGroupFeaIdsRsp) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *GetGroupFeaIdsRsp) GetErrorcode() int32 {
	if x != nil && x.Errorcode != nil {
		return *x.Errorcode
	}
	return 0
}

func (x *GetGroupFeaIdsRsp) GetErrormsg() string {
	if x != nil && x.Errormsg != nil {
		return *x.Errormsg
	}
	return ""
}

func (x *GetGroupFeaIdsRsp) GetFeaIds() []string {
	if x != nil {
		return x.FeaIds
	}
	return nil
}

// limit: request limit < 100000
type GetGroupEntityIdsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	GroupId   *string `protobuf:"bytes,2,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	Offset    *int32  `protobuf:"varint,3,opt,name=offset" json:"offset,omitempty"`
	Limit     *int32  `protobuf:"varint,4,opt,name=limit" json:"limit,omitempty"`
}

func (x *GetGroupEntityIdsReq) Reset() {
	*x = GetGroupEntityIdsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupEntityIdsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupEntityIdsReq) ProtoMessage() {}

func (x *GetGroupEntityIdsReq) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupEntityIdsReq.ProtoReflect.Descriptor instead.
func (*GetGroupEntityIdsReq) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{41}
}

func (x *GetGroupEntityIdsReq) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *GetGroupEntityIdsReq) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

func (x *GetGroupEntityIdsReq) GetOffset() int32 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *GetGroupEntityIdsReq) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

type GetGroupEntityIdsRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string  `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Errorcode *int32   `protobuf:"varint,2,opt,name=errorcode" json:"errorcode,omitempty"`
	Errormsg  *string  `protobuf:"bytes,3,opt,name=errormsg" json:"errormsg,omitempty"`
	EntityIds []string `protobuf:"bytes,4,rep,name=entity_ids,json=entityIds" json:"entity_ids,omitempty"`
}

func (x *GetGroupEntityIdsRsp) Reset() {
	*x = GetGroupEntityIdsRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupEntityIdsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupEntityIdsRsp) ProtoMessage() {}

func (x *GetGroupEntityIdsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupEntityIdsRsp.ProtoReflect.Descriptor instead.
func (*GetGroupEntityIdsRsp) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{42}
}

func (x *GetGroupEntityIdsRsp) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *GetGroupEntityIdsRsp) GetErrorcode() int32 {
	if x != nil && x.Errorcode != nil {
		return *x.Errorcode
	}
	return 0
}

func (x *GetGroupEntityIdsRsp) GetErrormsg() string {
	if x != nil && x.Errormsg != nil {
		return *x.Errormsg
	}
	return ""
}

func (x *GetGroupEntityIdsRsp) GetEntityIds() []string {
	if x != nil {
		return x.EntityIds
	}
	return nil
}

// Only be suit with small-scale group(<10000)
// IO throughput is big problem if request a big group
type GetGroupDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId  *string `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	GroupId    *string `protobuf:"bytes,2,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	FeatureIdx *int32  `protobuf:"varint,3,opt,name=feature_idx,json=featureIdx" json:"feature_idx,omitempty"` // =0/1/2
}

func (x *GetGroupDetailReq) Reset() {
	*x = GetGroupDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupDetailReq) ProtoMessage() {}

func (x *GetGroupDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupDetailReq.ProtoReflect.Descriptor instead.
func (*GetGroupDetailReq) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{43}
}

func (x *GetGroupDetailReq) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *GetGroupDetailReq) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

func (x *GetGroupDetailReq) GetFeatureIdx() int32 {
	if x != nil && x.FeatureIdx != nil {
		return *x.FeatureIdx
	}
	return 0
}

type GetGroupDetailRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string    `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Errorcode *int32     `protobuf:"varint,2,opt,name=errorcode" json:"errorcode,omitempty"`
	Errormsg  *string    `protobuf:"bytes,3,opt,name=errormsg" json:"errormsg,omitempty"`
	Items     []*FeaItem `protobuf:"bytes,4,rep,name=items" json:"items,omitempty"`
}

func (x *GetGroupDetailRsp) Reset() {
	*x = GetGroupDetailRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupDetailRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupDetailRsp) ProtoMessage() {}

func (x *GetGroupDetailRsp) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupDetailRsp.ProtoReflect.Descriptor instead.
func (*GetGroupDetailRsp) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{44}
}

func (x *GetGroupDetailRsp) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *GetGroupDetailRsp) GetErrorcode() int32 {
	if x != nil && x.Errorcode != nil {
		return *x.Errorcode
	}
	return 0
}

func (x *GetGroupDetailRsp) GetErrormsg() string {
	if x != nil && x.Errormsg != nil {
		return *x.Errormsg
	}
	return ""
}

func (x *GetGroupDetailRsp) GetItems() []*FeaItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type GetGroupPageIdsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	GroupId   *string `protobuf:"bytes,2,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
}

func (x *GetGroupPageIdsReq) Reset() {
	*x = GetGroupPageIdsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupPageIdsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupPageIdsReq) ProtoMessage() {}

func (x *GetGroupPageIdsReq) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupPageIdsReq.ProtoReflect.Descriptor instead.
func (*GetGroupPageIdsReq) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{45}
}

func (x *GetGroupPageIdsReq) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *GetGroupPageIdsReq) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

type GetGroupPageIdsRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string  `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Errorcode *int32   `protobuf:"varint,2,opt,name=errorcode" json:"errorcode,omitempty"`
	Errormsg  *string  `protobuf:"bytes,3,opt,name=errormsg" json:"errormsg,omitempty"`
	PageIds   []string `protobuf:"bytes,4,rep,name=page_ids,json=pageIds" json:"page_ids,omitempty"`
}

func (x *GetGroupPageIdsRsp) Reset() {
	*x = GetGroupPageIdsRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupPageIdsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupPageIdsRsp) ProtoMessage() {}

func (x *GetGroupPageIdsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupPageIdsRsp.ProtoReflect.Descriptor instead.
func (*GetGroupPageIdsRsp) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{46}
}

func (x *GetGroupPageIdsRsp) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *GetGroupPageIdsRsp) GetErrorcode() int32 {
	if x != nil && x.Errorcode != nil {
		return *x.Errorcode
	}
	return 0
}

func (x *GetGroupPageIdsRsp) GetErrormsg() string {
	if x != nil && x.Errormsg != nil {
		return *x.Errormsg
	}
	return ""
}

func (x *GetGroupPageIdsRsp) GetPageIds() []string {
	if x != nil {
		return x.PageIds
	}
	return nil
}

// page_id empty: only sync Searcher to clear all features of this group
// page_id not empty: clear features of this page in MySQL, but not sync to Searcher
type ClearFeaturesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId  *string `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	GroupId    *string `protobuf:"bytes,2,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	PageId     *string `protobuf:"bytes,3,opt,name=page_id,json=pageId" json:"page_id,omitempty"`
	FeatureIdx *int32  `protobuf:"varint,4,opt,name=feature_idx,json=featureIdx" json:"feature_idx,omitempty"` // =0/1
}

func (x *ClearFeaturesReq) Reset() {
	*x = ClearFeaturesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearFeaturesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearFeaturesReq) ProtoMessage() {}

func (x *ClearFeaturesReq) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearFeaturesReq.ProtoReflect.Descriptor instead.
func (*ClearFeaturesReq) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{47}
}

func (x *ClearFeaturesReq) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *ClearFeaturesReq) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

func (x *ClearFeaturesReq) GetPageId() string {
	if x != nil && x.PageId != nil {
		return *x.PageId
	}
	return ""
}

func (x *ClearFeaturesReq) GetFeatureIdx() int32 {
	if x != nil && x.FeatureIdx != nil {
		return *x.FeatureIdx
	}
	return 0
}

type ClearFeaturesRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Errorcode *int32  `protobuf:"varint,2,opt,name=errorcode" json:"errorcode,omitempty"`
	Errormsg  *string `protobuf:"bytes,3,opt,name=errormsg" json:"errormsg,omitempty"`
}

func (x *ClearFeaturesRsp) Reset() {
	*x = ClearFeaturesRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearFeaturesRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearFeaturesRsp) ProtoMessage() {}

func (x *ClearFeaturesRsp) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearFeaturesRsp.ProtoReflect.Descriptor instead.
func (*ClearFeaturesRsp) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{48}
}

func (x *ClearFeaturesRsp) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *ClearFeaturesRsp) GetErrorcode() int32 {
	if x != nil && x.Errorcode != nil {
		return *x.Errorcode
	}
	return 0
}

func (x *ClearFeaturesRsp) GetErrormsg() string {
	if x != nil && x.Errormsg != nil {
		return *x.Errormsg
	}
	return ""
}

type GetPageFeaEntityIdsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	GroupId   *string `protobuf:"bytes,2,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	PageId    *string `protobuf:"bytes,3,opt,name=page_id,json=pageId" json:"page_id,omitempty"`
}

func (x *GetPageFeaEntityIdsReq) Reset() {
	*x = GetPageFeaEntityIdsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPageFeaEntityIdsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPageFeaEntityIdsReq) ProtoMessage() {}

func (x *GetPageFeaEntityIdsReq) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPageFeaEntityIdsReq.ProtoReflect.Descriptor instead.
func (*GetPageFeaEntityIdsReq) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{49}
}

func (x *GetPageFeaEntityIdsReq) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *GetPageFeaEntityIdsReq) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

func (x *GetPageFeaEntityIdsReq) GetPageId() string {
	if x != nil && x.PageId != nil {
		return *x.PageId
	}
	return ""
}

type GetPageFeaEntityIdsRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string  `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Errorcode *int32   `protobuf:"varint,2,opt,name=errorcode" json:"errorcode,omitempty"`
	Errormsg  *string  `protobuf:"bytes,3,opt,name=errormsg" json:"errormsg,omitempty"`
	FeaIds    []string `protobuf:"bytes,4,rep,name=fea_ids,json=feaIds" json:"fea_ids,omitempty"` // fea_id和entity_id相同idx对应
	EntityIds []string `protobuf:"bytes,5,rep,name=entity_ids,json=entityIds" json:"entity_ids,omitempty"`
}

func (x *GetPageFeaEntityIdsRsp) Reset() {
	*x = GetPageFeaEntityIdsRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPageFeaEntityIdsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPageFeaEntityIdsRsp) ProtoMessage() {}

func (x *GetPageFeaEntityIdsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPageFeaEntityIdsRsp.ProtoReflect.Descriptor instead.
func (*GetPageFeaEntityIdsRsp) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{50}
}

func (x *GetPageFeaEntityIdsRsp) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *GetPageFeaEntityIdsRsp) GetErrorcode() int32 {
	if x != nil && x.Errorcode != nil {
		return *x.Errorcode
	}
	return 0
}

func (x *GetPageFeaEntityIdsRsp) GetErrormsg() string {
	if x != nil && x.Errormsg != nil {
		return *x.Errormsg
	}
	return ""
}

func (x *GetPageFeaEntityIdsRsp) GetFeaIds() []string {
	if x != nil {
		return x.FeaIds
	}
	return nil
}

func (x *GetPageFeaEntityIdsRsp) GetEntityIds() []string {
	if x != nil {
		return x.EntityIds
	}
	return nil
}

type GetPageFeaturesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId  *string `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	GroupId    *string `protobuf:"bytes,2,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	PageId     *string `protobuf:"bytes,3,opt,name=page_id,json=pageId" json:"page_id,omitempty"`
	FeatureIdx *int32  `protobuf:"varint,4,opt,name=feature_idx,json=featureIdx" json:"feature_idx,omitempty"` // =0/1/2
	CreateTime *int32  `protobuf:"varint,5,opt,name=create_time,json=createTime" json:"create_time,omitempty"` // create timestamp
}

func (x *GetPageFeaturesReq) Reset() {
	*x = GetPageFeaturesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPageFeaturesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPageFeaturesReq) ProtoMessage() {}

func (x *GetPageFeaturesReq) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPageFeaturesReq.ProtoReflect.Descriptor instead.
func (*GetPageFeaturesReq) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{51}
}

func (x *GetPageFeaturesReq) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *GetPageFeaturesReq) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

func (x *GetPageFeaturesReq) GetPageId() string {
	if x != nil && x.PageId != nil {
		return *x.PageId
	}
	return ""
}

func (x *GetPageFeaturesReq) GetFeatureIdx() int32 {
	if x != nil && x.FeatureIdx != nil {
		return *x.FeatureIdx
	}
	return 0
}

func (x *GetPageFeaturesReq) GetCreateTime() int32 {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return 0
}

type GetPageFeaturesRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId  *string  `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Errorcode  *int32   `protobuf:"varint,2,opt,name=errorcode" json:"errorcode,omitempty"`
	Errormsg   *string  `protobuf:"bytes,3,opt,name=errormsg" json:"errormsg,omitempty"`
	FeaIds     []string `protobuf:"bytes,4,rep,name=fea_ids,json=feaIds" json:"fea_ids,omitempty"` // fea_id和feature相同idx对应
	Features_0 [][]byte `protobuf:"bytes,5,rep,name=features_0,json=features0" json:"features_0,omitempty"`
	Features_1 [][]byte `protobuf:"bytes,6,rep,name=features_1,json=features1" json:"features_1,omitempty"`
}

func (x *GetPageFeaturesRsp) Reset() {
	*x = GetPageFeaturesRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPageFeaturesRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPageFeaturesRsp) ProtoMessage() {}

func (x *GetPageFeaturesRsp) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPageFeaturesRsp.ProtoReflect.Descriptor instead.
func (*GetPageFeaturesRsp) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{52}
}

func (x *GetPageFeaturesRsp) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *GetPageFeaturesRsp) GetErrorcode() int32 {
	if x != nil && x.Errorcode != nil {
		return *x.Errorcode
	}
	return 0
}

func (x *GetPageFeaturesRsp) GetErrormsg() string {
	if x != nil && x.Errormsg != nil {
		return *x.Errormsg
	}
	return ""
}

func (x *GetPageFeaturesRsp) GetFeaIds() []string {
	if x != nil {
		return x.FeaIds
	}
	return nil
}

func (x *GetPageFeaturesRsp) GetFeatures_0() [][]byte {
	if x != nil {
		return x.Features_0
	}
	return nil
}

func (x *GetPageFeaturesRsp) GetFeatures_1() [][]byte {
	if x != nil {
		return x.Features_1
	}
	return nil
}

type RetrieveCandidate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeaId      *string  `protobuf:"bytes,1,opt,name=fea_id,json=feaId" json:"fea_id,omitempty"`
	EntityId   *string  `protobuf:"bytes,2,opt,name=entity_id,json=entityId" json:"entity_id,omitempty"`
	Confidence *float32 `protobuf:"fixed32,3,opt,name=confidence" json:"confidence,omitempty"`
	ExtendInfo []byte   `protobuf:"bytes,4,opt,name=extend_info,json=extendInfo" json:"extend_info,omitempty"`
}

func (x *RetrieveCandidate) Reset() {
	*x = RetrieveCandidate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveCandidate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveCandidate) ProtoMessage() {}

func (x *RetrieveCandidate) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveCandidate.ProtoReflect.Descriptor instead.
func (*RetrieveCandidate) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{53}
}

func (x *RetrieveCandidate) GetFeaId() string {
	if x != nil && x.FeaId != nil {
		return *x.FeaId
	}
	return ""
}

func (x *RetrieveCandidate) GetEntityId() string {
	if x != nil && x.EntityId != nil {
		return *x.EntityId
	}
	return ""
}

func (x *RetrieveCandidate) GetConfidence() float32 {
	if x != nil && x.Confidence != nil {
		return *x.Confidence
	}
	return 0
}

func (x *RetrieveCandidate) GetExtendInfo() []byte {
	if x != nil {
		return x.ExtendInfo
	}
	return nil
}

type RetrieveItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*RetrieveCandidate `protobuf:"bytes,1,rep,name=result" json:"result,omitempty"`
}

func (x *RetrieveItem) Reset() {
	*x = RetrieveItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveItem) ProtoMessage() {}

func (x *RetrieveItem) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveItem.ProtoReflect.Descriptor instead.
func (*RetrieveItem) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{54}
}

func (x *RetrieveItem) GetResult() []*RetrieveCandidate {
	if x != nil {
		return x.Result
	}
	return nil
}

type GroupRetrieveItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId            *string         `protobuf:"bytes,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	Items              []*RetrieveItem `protobuf:"bytes,2,rep,name=items" json:"items,omitempty"`
	GroupSize          *int64          `protobuf:"varint,3,opt,name=group_size,json=groupSize" json:"group_size,omitempty"` // < 0: invalid; >=0 valid size
	FeatureIdx         *int32          `protobuf:"varint,4,opt,name=feature_idx,json=featureIdx" json:"feature_idx,omitempty"`
	RetrieveTimecostMs *int32          `protobuf:"varint,5,opt,name=retrieve_timecost_ms,json=retrieveTimecostMs" json:"retrieve_timecost_ms,omitempty"`
}

func (x *GroupRetrieveItem) Reset() {
	*x = GroupRetrieveItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupRetrieveItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupRetrieveItem) ProtoMessage() {}

func (x *GroupRetrieveItem) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupRetrieveItem.ProtoReflect.Descriptor instead.
func (*GroupRetrieveItem) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{55}
}

func (x *GroupRetrieveItem) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

func (x *GroupRetrieveItem) GetItems() []*RetrieveItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *GroupRetrieveItem) GetGroupSize() int64 {
	if x != nil && x.GroupSize != nil {
		return *x.GroupSize
	}
	return 0
}

func (x *GroupRetrieveItem) GetFeatureIdx() int32 {
	if x != nil && x.FeatureIdx != nil {
		return *x.FeatureIdx
	}
	return 0
}

func (x *GroupRetrieveItem) GetRetrieveTimecostMs() int32 {
	if x != nil && x.RetrieveTimecostMs != nil {
		return *x.RetrieveTimecostMs
	}
	return 0
}

type RetrieveControl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CacheStrategy   *RetrieveControl_CacheStrategy `protobuf:"varint,1,opt,name=cache_strategy,json=cacheStrategy,enum=youtu.zeus.RetrieveControl_CacheStrategy" json:"cache_strategy,omitempty"`
	CacheTimeoutSec *int32                         `protobuf:"varint,2,opt,name=cache_timeout_sec,json=cacheTimeoutSec" json:"cache_timeout_sec,omitempty"`
}

func (x *RetrieveControl) Reset() {
	*x = RetrieveControl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveControl) ProtoMessage() {}

func (x *RetrieveControl) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveControl.ProtoReflect.Descriptor instead.
func (*RetrieveControl) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{56}
}

func (x *RetrieveControl) GetCacheStrategy() RetrieveControl_CacheStrategy {
	if x != nil && x.CacheStrategy != nil {
		return *x.CacheStrategy
	}
	return RetrieveControl_FORCE_CHECK
}

func (x *RetrieveControl) GetCacheTimeoutSec() int32 {
	if x != nil && x.CacheTimeoutSec != nil {
		return *x.CacheTimeoutSec
	}
	return 0
}

type GroupPacks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackIds []string `protobuf:"bytes,1,rep,name=pack_ids,json=packIds" json:"pack_ids,omitempty"`
}

func (x *GroupPacks) Reset() {
	*x = GroupPacks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupPacks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupPacks) ProtoMessage() {}

func (x *GroupPacks) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupPacks.ProtoReflect.Descriptor instead.
func (*GroupPacks) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{57}
}

func (x *GroupPacks) GetPackIds() []string {
	if x != nil {
		return x.PackIds
	}
	return nil
}

type RetrieveReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId   *string          `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	GroupIds    []string         `protobuf:"bytes,2,rep,name=group_ids,json=groupIds" json:"group_ids,omitempty"`
	Features    [][]byte         `protobuf:"bytes,3,rep,name=features" json:"features,omitempty"`
	Topn        *uint32          `protobuf:"varint,4,opt,name=topn" json:"topn,omitempty"`
	Threshold   *float32         `protobuf:"fixed32,5,opt,name=threshold" json:"threshold,omitempty"`
	FeatureIdxs []int32          `protobuf:"varint,6,rep,name=feature_idxs,json=featureIdxs" json:"feature_idxs,omitempty"` // =0/1, 和group_ids相同idx对应
	Control     *RetrieveControl `protobuf:"bytes,7,opt,name=control" json:"control,omitempty"`
	GroupPacks  []*GroupPacks    `protobuf:"bytes,8,rep,name=group_packs,json=groupPacks" json:"group_packs,omitempty"`
}

func (x *RetrieveReq) Reset() {
	*x = RetrieveReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveReq) ProtoMessage() {}

func (x *RetrieveReq) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveReq.ProtoReflect.Descriptor instead.
func (*RetrieveReq) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{58}
}

func (x *RetrieveReq) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *RetrieveReq) GetGroupIds() []string {
	if x != nil {
		return x.GroupIds
	}
	return nil
}

func (x *RetrieveReq) GetFeatures() [][]byte {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *RetrieveReq) GetTopn() uint32 {
	if x != nil && x.Topn != nil {
		return *x.Topn
	}
	return 0
}

func (x *RetrieveReq) GetThreshold() float32 {
	if x != nil && x.Threshold != nil {
		return *x.Threshold
	}
	return 0
}

func (x *RetrieveReq) GetFeatureIdxs() []int32 {
	if x != nil {
		return x.FeatureIdxs
	}
	return nil
}

func (x *RetrieveReq) GetControl() *RetrieveControl {
	if x != nil {
		return x.Control
	}
	return nil
}

func (x *RetrieveReq) GetGroupPacks() []*GroupPacks {
	if x != nil {
		return x.GroupPacks
	}
	return nil
}

type RetrieveRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId  *string              `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Errorcode  *int32               `protobuf:"varint,2,opt,name=errorcode" json:"errorcode,omitempty"`
	Errormsg   *string              `protobuf:"bytes,3,opt,name=errormsg" json:"errormsg,omitempty"`
	GroupItems []*GroupRetrieveItem `protobuf:"bytes,4,rep,name=group_items,json=groupItems" json:"group_items,omitempty"`
}

func (x *RetrieveRsp) Reset() {
	*x = RetrieveRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveRsp) ProtoMessage() {}

func (x *RetrieveRsp) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveRsp.ProtoReflect.Descriptor instead.
func (*RetrieveRsp) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{59}
}

func (x *RetrieveRsp) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *RetrieveRsp) GetErrorcode() int32 {
	if x != nil && x.Errorcode != nil {
		return *x.Errorcode
	}
	return 0
}

func (x *RetrieveRsp) GetErrormsg() string {
	if x != nil && x.Errormsg != nil {
		return *x.Errormsg
	}
	return ""
}

func (x *RetrieveRsp) GetGroupItems() []*GroupRetrieveItem {
	if x != nil {
		return x.GroupItems
	}
	return nil
}

// group with touch_num < min_touch_num and group_size < min_group_size
// will be DELETED from cache EXCEPT white_group_ids
type TrimCacheReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId     *string  `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	StatWindowSec *uint64  `protobuf:"varint,2,opt,name=stat_window_sec,json=statWindowSec" json:"stat_window_sec,omitempty"`
	MinTouchNum   *int32   `protobuf:"varint,3,opt,name=min_touch_num,json=minTouchNum" json:"min_touch_num,omitempty"`
	MinGroupSize  *int32   `protobuf:"varint,4,opt,name=min_group_size,json=minGroupSize" json:"min_group_size,omitempty"`
	WhiteGroupIds []string `protobuf:"bytes,5,rep,name=white_group_ids,json=whiteGroupIds" json:"white_group_ids,omitempty"`
}

func (x *TrimCacheReq) Reset() {
	*x = TrimCacheReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrimCacheReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrimCacheReq) ProtoMessage() {}

func (x *TrimCacheReq) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrimCacheReq.ProtoReflect.Descriptor instead.
func (*TrimCacheReq) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{60}
}

func (x *TrimCacheReq) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *TrimCacheReq) GetStatWindowSec() uint64 {
	if x != nil && x.StatWindowSec != nil {
		return *x.StatWindowSec
	}
	return 0
}

func (x *TrimCacheReq) GetMinTouchNum() int32 {
	if x != nil && x.MinTouchNum != nil {
		return *x.MinTouchNum
	}
	return 0
}

func (x *TrimCacheReq) GetMinGroupSize() int32 {
	if x != nil && x.MinGroupSize != nil {
		return *x.MinGroupSize
	}
	return 0
}

func (x *TrimCacheReq) GetWhiteGroupIds() []string {
	if x != nil {
		return x.WhiteGroupIds
	}
	return nil
}

type TrimCacheResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Searcher  *string  `protobuf:"bytes,1,opt,name=searcher" json:"searcher,omitempty"`
	Errorcode *int32   `protobuf:"varint,2,opt,name=errorcode" json:"errorcode,omitempty"`
	GroupIds  []string `protobuf:"bytes,3,rep,name=group_ids,json=groupIds" json:"group_ids,omitempty"`
}

func (x *TrimCacheResult) Reset() {
	*x = TrimCacheResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrimCacheResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrimCacheResult) ProtoMessage() {}

func (x *TrimCacheResult) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrimCacheResult.ProtoReflect.Descriptor instead.
func (*TrimCacheResult) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{61}
}

func (x *TrimCacheResult) GetSearcher() string {
	if x != nil && x.Searcher != nil {
		return *x.Searcher
	}
	return ""
}

func (x *TrimCacheResult) GetErrorcode() int32 {
	if x != nil && x.Errorcode != nil {
		return *x.Errorcode
	}
	return 0
}

func (x *TrimCacheResult) GetGroupIds() []string {
	if x != nil {
		return x.GroupIds
	}
	return nil
}

type TrimCacheRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string            `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Errorcode *int32             `protobuf:"varint,2,opt,name=errorcode" json:"errorcode,omitempty"`
	Errormsg  *string            `protobuf:"bytes,3,opt,name=errormsg" json:"errormsg,omitempty"`
	Results   []*TrimCacheResult `protobuf:"bytes,4,rep,name=results" json:"results,omitempty"`
}

func (x *TrimCacheRsp) Reset() {
	*x = TrimCacheRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrimCacheRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrimCacheRsp) ProtoMessage() {}

func (x *TrimCacheRsp) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrimCacheRsp.ProtoReflect.Descriptor instead.
func (*TrimCacheRsp) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{62}
}

func (x *TrimCacheRsp) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *TrimCacheRsp) GetErrorcode() int32 {
	if x != nil && x.Errorcode != nil {
		return *x.Errorcode
	}
	return 0
}

func (x *TrimCacheRsp) GetErrormsg() string {
	if x != nil && x.Errormsg != nil {
		return *x.Errormsg
	}
	return ""
}

func (x *TrimCacheRsp) GetResults() []*TrimCacheResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type DeleteCacheReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string  `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	GroupIds  []string `protobuf:"bytes,2,rep,name=group_ids,json=groupIds" json:"group_ids,omitempty"`
}

func (x *DeleteCacheReq) Reset() {
	*x = DeleteCacheReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCacheReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCacheReq) ProtoMessage() {}

func (x *DeleteCacheReq) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCacheReq.ProtoReflect.Descriptor instead.
func (*DeleteCacheReq) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{63}
}

func (x *DeleteCacheReq) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *DeleteCacheReq) GetGroupIds() []string {
	if x != nil {
		return x.GroupIds
	}
	return nil
}

type DeleteCacheResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId       *string  `protobuf:"bytes,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	Errorcode     *int32   `protobuf:"varint,2,opt,name=errorcode" json:"errorcode,omitempty"`
	SuccSearchers []string `protobuf:"bytes,3,rep,name=succ_searchers,json=succSearchers" json:"succ_searchers,omitempty"`
	FailSearchers []string `protobuf:"bytes,4,rep,name=fail_searchers,json=failSearchers" json:"fail_searchers,omitempty"`
}

func (x *DeleteCacheResult) Reset() {
	*x = DeleteCacheResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCacheResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCacheResult) ProtoMessage() {}

func (x *DeleteCacheResult) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCacheResult.ProtoReflect.Descriptor instead.
func (*DeleteCacheResult) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{64}
}

func (x *DeleteCacheResult) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

func (x *DeleteCacheResult) GetErrorcode() int32 {
	if x != nil && x.Errorcode != nil {
		return *x.Errorcode
	}
	return 0
}

func (x *DeleteCacheResult) GetSuccSearchers() []string {
	if x != nil {
		return x.SuccSearchers
	}
	return nil
}

func (x *DeleteCacheResult) GetFailSearchers() []string {
	if x != nil {
		return x.FailSearchers
	}
	return nil
}

type DeleteCacheRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string              `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Errorcode *int32               `protobuf:"varint,2,opt,name=errorcode" json:"errorcode,omitempty"`
	Errormsg  *string              `protobuf:"bytes,3,opt,name=errormsg" json:"errormsg,omitempty"`
	Results   []*DeleteCacheResult `protobuf:"bytes,4,rep,name=results" json:"results,omitempty"`
}

func (x *DeleteCacheRsp) Reset() {
	*x = DeleteCacheRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCacheRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCacheRsp) ProtoMessage() {}

func (x *DeleteCacheRsp) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCacheRsp.ProtoReflect.Descriptor instead.
func (*DeleteCacheRsp) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{65}
}

func (x *DeleteCacheRsp) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *DeleteCacheRsp) GetErrorcode() int32 {
	if x != nil && x.Errorcode != nil {
		return *x.Errorcode
	}
	return 0
}

func (x *DeleteCacheRsp) GetErrormsg() string {
	if x != nil && x.Errormsg != nil {
		return *x.Errormsg
	}
	return ""
}

func (x *DeleteCacheRsp) GetResults() []*DeleteCacheResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type WarmUpCacheReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId  *string       `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	GroupIds   []string      `protobuf:"bytes,2,rep,name=group_ids,json=groupIds" json:"group_ids,omitempty"`
	GroupPacks []*GroupPacks `protobuf:"bytes,3,rep,name=group_packs,json=groupPacks" json:"group_packs,omitempty"`
	Force      *bool         `protobuf:"varint,4,opt,name=force" json:"force,omitempty"`
}

func (x *WarmUpCacheReq) Reset() {
	*x = WarmUpCacheReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WarmUpCacheReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WarmUpCacheReq) ProtoMessage() {}

func (x *WarmUpCacheReq) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WarmUpCacheReq.ProtoReflect.Descriptor instead.
func (*WarmUpCacheReq) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{66}
}

func (x *WarmUpCacheReq) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *WarmUpCacheReq) GetGroupIds() []string {
	if x != nil {
		return x.GroupIds
	}
	return nil
}

func (x *WarmUpCacheReq) GetGroupPacks() []*GroupPacks {
	if x != nil {
		return x.GroupPacks
	}
	return nil
}

func (x *WarmUpCacheReq) GetForce() bool {
	if x != nil && x.Force != nil {
		return *x.Force
	}
	return false
}

type WarmUpCacheResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId       *string  `protobuf:"bytes,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	Errorcode     *int32   `protobuf:"varint,2,opt,name=errorcode" json:"errorcode,omitempty"`
	SuccSearchers []string `protobuf:"bytes,3,rep,name=succ_searchers,json=succSearchers" json:"succ_searchers,omitempty"`
	FailSearchers []string `protobuf:"bytes,4,rep,name=fail_searchers,json=failSearchers" json:"fail_searchers,omitempty"`
}

func (x *WarmUpCacheResult) Reset() {
	*x = WarmUpCacheResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WarmUpCacheResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WarmUpCacheResult) ProtoMessage() {}

func (x *WarmUpCacheResult) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WarmUpCacheResult.ProtoReflect.Descriptor instead.
func (*WarmUpCacheResult) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{67}
}

func (x *WarmUpCacheResult) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

func (x *WarmUpCacheResult) GetErrorcode() int32 {
	if x != nil && x.Errorcode != nil {
		return *x.Errorcode
	}
	return 0
}

func (x *WarmUpCacheResult) GetSuccSearchers() []string {
	if x != nil {
		return x.SuccSearchers
	}
	return nil
}

func (x *WarmUpCacheResult) GetFailSearchers() []string {
	if x != nil {
		return x.FailSearchers
	}
	return nil
}

type WarmUpCacheRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string              `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Errorcode *int32               `protobuf:"varint,2,opt,name=errorcode" json:"errorcode,omitempty"`
	Errormsg  *string              `protobuf:"bytes,3,opt,name=errormsg" json:"errormsg,omitempty"`
	Results   []*WarmUpCacheResult `protobuf:"bytes,4,rep,name=results" json:"results,omitempty"`
}

func (x *WarmUpCacheRsp) Reset() {
	*x = WarmUpCacheRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WarmUpCacheRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WarmUpCacheRsp) ProtoMessage() {}

func (x *WarmUpCacheRsp) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WarmUpCacheRsp.ProtoReflect.Descriptor instead.
func (*WarmUpCacheRsp) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{68}
}

func (x *WarmUpCacheRsp) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *WarmUpCacheRsp) GetErrorcode() int32 {
	if x != nil && x.Errorcode != nil {
		return *x.Errorcode
	}
	return 0
}

func (x *WarmUpCacheRsp) GetErrormsg() string {
	if x != nil && x.Errormsg != nil {
		return *x.Errormsg
	}
	return ""
}

func (x *WarmUpCacheRsp) GetResults() []*WarmUpCacheResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type AsyncWarmUpGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	GroupId   *string `protobuf:"bytes,2,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
}

func (x *AsyncWarmUpGroupReq) Reset() {
	*x = AsyncWarmUpGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AsyncWarmUpGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsyncWarmUpGroupReq) ProtoMessage() {}

func (x *AsyncWarmUpGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsyncWarmUpGroupReq.ProtoReflect.Descriptor instead.
func (*AsyncWarmUpGroupReq) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{69}
}

func (x *AsyncWarmUpGroupReq) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *AsyncWarmUpGroupReq) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

type AsyncWarmUpGroupRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Errorcode *int32  `protobuf:"varint,2,opt,name=errorcode" json:"errorcode,omitempty"`
	Errormsg  *string `protobuf:"bytes,3,opt,name=errormsg" json:"errormsg,omitempty"`
}

func (x *AsyncWarmUpGroupRsp) Reset() {
	*x = AsyncWarmUpGroupRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AsyncWarmUpGroupRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsyncWarmUpGroupRsp) ProtoMessage() {}

func (x *AsyncWarmUpGroupRsp) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsyncWarmUpGroupRsp.ProtoReflect.Descriptor instead.
func (*AsyncWarmUpGroupRsp) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{70}
}

func (x *AsyncWarmUpGroupRsp) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *AsyncWarmUpGroupRsp) GetErrorcode() int32 {
	if x != nil && x.Errorcode != nil {
		return *x.Errorcode
	}
	return 0
}

func (x *AsyncWarmUpGroupRsp) GetErrormsg() string {
	if x != nil && x.Errormsg != nil {
		return *x.Errormsg
	}
	return ""
}

type AsyncDeleteGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	GroupId   *string `protobuf:"bytes,2,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
}

func (x *AsyncDeleteGroupReq) Reset() {
	*x = AsyncDeleteGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AsyncDeleteGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsyncDeleteGroupReq) ProtoMessage() {}

func (x *AsyncDeleteGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsyncDeleteGroupReq.ProtoReflect.Descriptor instead.
func (*AsyncDeleteGroupReq) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{71}
}

func (x *AsyncDeleteGroupReq) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *AsyncDeleteGroupReq) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

type AsyncDeleteGroupRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Errorcode *int32  `protobuf:"varint,2,opt,name=errorcode" json:"errorcode,omitempty"`
	Errormsg  *string `protobuf:"bytes,3,opt,name=errormsg" json:"errormsg,omitempty"`
}

func (x *AsyncDeleteGroupRsp) Reset() {
	*x = AsyncDeleteGroupRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AsyncDeleteGroupRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsyncDeleteGroupRsp) ProtoMessage() {}

func (x *AsyncDeleteGroupRsp) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsyncDeleteGroupRsp.ProtoReflect.Descriptor instead.
func (*AsyncDeleteGroupRsp) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{72}
}

func (x *AsyncDeleteGroupRsp) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *AsyncDeleteGroupRsp) GetErrorcode() int32 {
	if x != nil && x.Errorcode != nil {
		return *x.Errorcode
	}
	return 0
}

func (x *AsyncDeleteGroupRsp) GetErrormsg() string {
	if x != nil && x.Errormsg != nil {
		return *x.Errormsg
	}
	return ""
}

type GetAllCacheGroupIdsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
}

func (x *GetAllCacheGroupIdsReq) Reset() {
	*x = GetAllCacheGroupIdsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllCacheGroupIdsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllCacheGroupIdsReq) ProtoMessage() {}

func (x *GetAllCacheGroupIdsReq) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllCacheGroupIdsReq.ProtoReflect.Descriptor instead.
func (*GetAllCacheGroupIdsReq) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{73}
}

func (x *GetAllCacheGroupIdsReq) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

type GetAllCacheGroupIdsRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string  `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Errorcode *int32   `protobuf:"varint,2,opt,name=errorcode" json:"errorcode,omitempty"`
	Errormsg  *string  `protobuf:"bytes,3,opt,name=errormsg" json:"errormsg,omitempty"`
	GroupIds  []string `protobuf:"bytes,4,rep,name=group_ids,json=groupIds" json:"group_ids,omitempty"`
}

func (x *GetAllCacheGroupIdsRsp) Reset() {
	*x = GetAllCacheGroupIdsRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeus_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllCacheGroupIdsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllCacheGroupIdsRsp) ProtoMessage() {}

func (x *GetAllCacheGroupIdsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_zeus_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllCacheGroupIdsRsp.ProtoReflect.Descriptor instead.
func (*GetAllCacheGroupIdsRsp) Descriptor() ([]byte, []int) {
	return file_zeus_proto_rawDescGZIP(), []int{74}
}

func (x *GetAllCacheGroupIdsRsp) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *GetAllCacheGroupIdsRsp) GetErrorcode() int32 {
	if x != nil && x.Errorcode != nil {
		return *x.Errorcode
	}
	return 0
}

func (x *GetAllCacheGroupIdsRsp) GetErrormsg() string {
	if x != nil && x.Errormsg != nil {
		return *x.Errormsg
	}
	return ""
}

func (x *GetAllCacheGroupIdsRsp) GetGroupIds() []string {
	if x != nil {
		return x.GroupIds
	}
	return nil
}

var File_zeus_proto protoreflect.FileDescriptor

var file_zeus_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x7a, 0x65, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x79, 0x6f,
	0x75, 0x74, 0x75, 0x2e, 0x7a, 0x65, 0x75, 0x73, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x6a, 0x6f, 0x62, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9b, 0x01, 0x0a, 0x0d, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x64,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x0c, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0b, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x78, 0x22, 0x9a, 0x03, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x2e, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a,
	0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x39, 0x0a, 0x0c, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x2e, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x2e, 0x7a, 0x65, 0x75, 0x73, 0x2e,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x27, 0x0a, 0x0e,
	0x73, 0x75, 0x62, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x4e, 0x75, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x6f, 0x70,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x6f, 0x70, 0x6e,
	0x12, 0x22, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x08, 0x61, 0x75, 0x74, 0x6f,
	0x53, 0x79, 0x6e, 0x63, 0x22, 0x69, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x6d, 0x73, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x6d, 0x73, 0x67, 0x22,
	0x4a, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x69, 0x0a, 0x0e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x73, 0x70, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x6d, 0x73, 0x67, 0x22, 0x27, 0x0a, 0x0a, 0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22,
	0x57, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0xa5, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x73, 0x79, 0x6e, 0x63,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x6d, 0x73,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x6d, 0x73,
	0x67, 0x12, 0x2d, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x2e, 0x6a, 0x6f, 0x62, 0x2e,
	0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x66, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x67, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x6c, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x73, 0x70, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x6d, 0x73, 0x67, 0x22, 0x4c, 0x0a, 0x10, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61,
	0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x22, 0x6b, 0x0a, 0x10, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x6d, 0x73,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x6d, 0x73,
	0x67, 0x22, 0x91, 0x01, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x6f,
	0x75, 0x74, 0x75, 0x2e, 0x7a, 0x65, 0x75, 0x73, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x6e, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x6d, 0x73, 0x67, 0x22, 0x73, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x78, 0x22, 0x71, 0x0a, 0x16, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x6d, 0x73, 0x67, 0x22, 0x98, 0x01,
	0x0a, 0x07, 0x46, 0x65, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x15, 0x0a, 0x06, 0x66, 0x65, 0x61,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x65, 0x61, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x30, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x30, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x31, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xaf, 0x01, 0x0a, 0x0a, 0x41, 0x64, 0x64,
	0x46, 0x65, 0x61, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x29, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x2e, 0x7a, 0x65, 0x75, 0x73, 0x2e, 0x46, 0x65,
	0x61, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1b, 0x0a, 0x05,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x78, 0x22, 0x7e, 0x0a, 0x0a, 0x41, 0x64,
	0x64, 0x46, 0x65, 0x61, 0x73, 0x52, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x6d, 0x73,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x6d, 0x73,
	0x67, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x66, 0x65, 0x61, 0x49, 0x64, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x0a, 0x47,
	0x65, 0x74, 0x46, 0x65, 0x61, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x65, 0x61, 0x49, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x78, 0x22, 0x90, 0x01,
	0x0a, 0x0a, 0x47, 0x65, 0x74, 0x46, 0x65, 0x61, 0x73, 0x52, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x6d, 0x73, 0x67, 0x12, 0x29, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x2e, 0x7a, 0x65, 0x75,
	0x73, 0x2e, 0x46, 0x65, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x22, 0x8c, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x46, 0x65, 0x61, 0x73, 0x42, 0x79, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x78, 0x22,
	0x98, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x46, 0x65, 0x61, 0x73, 0x42, 0x79, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x6d, 0x73, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x6d, 0x73, 0x67, 0x12,
	0x29, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x2e, 0x7a, 0x65, 0x75, 0x73, 0x2e, 0x46, 0x65, 0x61, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x95, 0x01, 0x0a, 0x0d, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x65, 0x61, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x2e, 0x7a, 0x65,
	0x75, 0x73, 0x2e, 0x46, 0x65, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x78,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49,
	0x64, 0x78, 0x22, 0x68, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x65, 0x61, 0x73,
	0x52, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x6d, 0x73, 0x67, 0x22, 0x83, 0x01, 0x0a,
	0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x66, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66,
	0x65, 0x61, 0x49, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x22, 0x85, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x52, 0x73, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x6d,
	0x73, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x66, 0x65, 0x61, 0x49, 0x64, 0x73, 0x22, 0x8a, 0x02, 0x0a, 0x11, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x65,
	0x61, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x65, 0x61,
	0x49, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x5f,
	0x30, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x09, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x30, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x31,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x09, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x31, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x78,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49,
	0x64, 0x78, 0x12, 0x26, 0x0a, 0x0b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0a,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x79,
	0x6e, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73,
	0x79, 0x6e, 0x63, 0x54, 0x79, 0x70, 0x65, 0x22, 0x6c, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x73, 0x70, 0x12, 0x1c, 0x0a, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x6d, 0x73, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x8a, 0x01, 0x0a, 0x14, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x50, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x78,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49,
	0x64, 0x78, 0x22, 0x6f, 0x0a, 0x14, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x50, 0x61, 0x67,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x6d, 0x73, 0x67, 0x22, 0x8c, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x65, 0x61, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x65, 0x61, 0x49, 0x64, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x22, 0x6f, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x6d, 0x73, 0x67, 0x22, 0x62, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x65, 0x61,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x66, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x66, 0x65, 0x61, 0x49, 0x64, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x46, 0x65, 0x61, 0x73, 0x52, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x6d,
	0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x6d,
	0x73, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x65, 0x61, 0x49, 0x64, 0x73, 0x22, 0x6b, 0x0a, 0x10, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x73, 0x52, 0x65, 0x71, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x73, 0x52, 0x73, 0x70, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x6d, 0x73, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x65, 0x61, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x65, 0x61, 0x49, 0x64, 0x73, 0x22,
	0x4b, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x89, 0x01, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x73, 0x70,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x6d, 0x73, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x71, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x46, 0x65, 0x61, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x3a, 0x01, 0x30, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x65, 0x61, 0x49, 0x64, 0x73, 0x52, 0x73,
	0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x6d, 0x73, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x65,
	0x61, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x65, 0x61,
	0x49, 0x64, 0x73, 0x22, 0x7e, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x22, 0x8e, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x73, 0x52, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x6d, 0x73, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x73, 0x22, 0x6e, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69,
	0x64, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x49, 0x64, 0x78, 0x22, 0x97, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x6d, 0x73, 0x67, 0x12, 0x29, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x2e, 0x7a, 0x65, 0x75, 0x73, 0x2e,
	0x46, 0x65, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x4e,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x88,
	0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x73, 0x52, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x6d, 0x73, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x6d, 0x73, 0x67, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x49, 0x64, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x10, 0x43, 0x6c,
	0x65, 0x61, 0x72, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x78,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49,
	0x64, 0x78, 0x22, 0x6b, 0x0a, 0x10, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x52, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x6d, 0x73, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x6d, 0x73, 0x67, 0x22,
	0x6b, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x61, 0x67, 0x65, 0x46, 0x65, 0x61, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0xa9, 0x01, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x50, 0x61, 0x67, 0x65, 0x46, 0x65, 0x61, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x73, 0x52, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x6d, 0x73, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x6d, 0x73, 0x67,
	0x12, 0x17, 0x0a, 0x07, 0x66, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x66, 0x65, 0x61, 0x49, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x73, 0x22, 0xa9, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64,
	0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x49, 0x64, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0xc4, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x6d, 0x73, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x65, 0x61, 0x49, 0x64, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x30, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x09, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x30, 0x12, 0x1d, 0x0a, 0x0a,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x31, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0c,
	0x52, 0x09, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x31, 0x22, 0x88, 0x01, 0x0a, 0x11,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x15, 0x0a, 0x06, 0x66, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x66, 0x65, 0x61, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x45, 0x0a, 0x0c, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x35, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x2e, 0x7a,
	0x65, 0x75, 0x73, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x43, 0x61, 0x6e, 0x64,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xd0, 0x01,
	0x0a, 0x11, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x2e,
	0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x79, 0x6f, 0x75, 0x74, 0x75, 0x2e, 0x7a, 0x65, 0x75, 0x73, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x78, 0x12, 0x30,
	0x0a, 0x14, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x63,
	0x6f, 0x73, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x72, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x63, 0x6f, 0x73, 0x74, 0x4d, 0x73,
	0x22, 0xc1, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x12, 0x50, 0x0a, 0x0e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x79,
	0x6f, 0x75, 0x74, 0x75, 0x2e, 0x7a, 0x65, 0x75, 0x73, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x0d, 0x63, 0x61, 0x63, 0x68, 0x65, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53,
	0x65, 0x63, 0x22, 0x30, 0x0a, 0x0d, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x48, 0x45,
	0x43, 0x4b, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x48, 0x45,
	0x43, 0x4b, 0x10, 0x02, 0x22, 0x27, 0x0a, 0x0a, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61, 0x63,
	0x6b, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x73, 0x22, 0xaa, 0x02,
	0x0a, 0x0b, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x6f, 0x70, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x69, 0x64, 0x78, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x78, 0x73, 0x12, 0x35, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x79, 0x6f,
	0x75, 0x74, 0x75, 0x2e, 0x7a, 0x65, 0x75, 0x73, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x12, 0x37, 0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x2e, 0x7a,
	0x65, 0x75, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x73, 0x52, 0x0a,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x73, 0x22, 0xa6, 0x01, 0x0a, 0x0b, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x6d, 0x73, 0x67, 0x12, 0x3e, 0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x6f, 0x75, 0x74, 0x75,
	0x2e, 0x7a, 0x65, 0x75, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x22, 0xc7, 0x01, 0x0a, 0x0c, 0x54, 0x72, 0x69, 0x6d, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x77, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x73, 0x74,
	0x61, 0x74, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x65, 0x63, 0x12, 0x22, 0x0a, 0x0d, 0x6d,
	0x69, 0x6e, 0x5f, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x4e, 0x75, 0x6d, 0x12,
	0x24, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d,
	0x77, 0x68, 0x69, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x22, 0x68, 0x0a,
	0x0f, 0x54, 0x72, 0x69, 0x6d, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x22, 0x9e, 0x01, 0x0a, 0x0c, 0x54, 0x72, 0x69, 0x6d,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x6d, 0x73,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x6d, 0x73,
	0x67, 0x12, 0x35, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x2e, 0x7a, 0x65, 0x75, 0x73, 0x2e,
	0x54, 0x72, 0x69, 0x6d, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x4c, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x75, 0x63, 0x63, 0x5f, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x75, 0x63, 0x63, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x66, 0x61, 0x69, 0x6c, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x65, 0x72, 0x73, 0x22, 0xa2, 0x01, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x52, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x6d, 0x73, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x6d, 0x73, 0x67, 0x12,
	0x37, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x2e, 0x7a, 0x65, 0x75, 0x73, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x9b, 0x01, 0x0a, 0x0e, 0x57, 0x61, 0x72,
	0x6d, 0x55, 0x70, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x12, 0x37, 0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79,
	0x6f, 0x75, 0x74, 0x75, 0x2e, 0x7a, 0x65, 0x75, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50,
	0x61, 0x63, 0x6b, 0x73, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x11, 0x57, 0x61, 0x72, 0x6d, 0x55,
	0x70, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x75, 0x63, 0x63, 0x5f, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x75, 0x63, 0x63, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x66, 0x61, 0x69, 0x6c, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x65, 0x72, 0x73, 0x22, 0xa2, 0x01, 0x0a, 0x0e, 0x57, 0x61, 0x72, 0x6d, 0x55, 0x70, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x52, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x6d, 0x73, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x6d, 0x73, 0x67, 0x12,
	0x37, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x2e, 0x7a, 0x65, 0x75, 0x73, 0x2e, 0x57, 0x61,
	0x72, 0x6d, 0x55, 0x70, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x4f, 0x0a, 0x13, 0x41, 0x73, 0x79, 0x6e,
	0x63, 0x57, 0x61, 0x72, 0x6d, 0x55, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x6e, 0x0a, 0x13, 0x41, 0x73, 0x79,
	0x6e, 0x63, 0x57, 0x61, 0x72, 0x6d, 0x55, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x73, 0x70,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x6d, 0x73, 0x67, 0x22, 0x4f, 0x0a, 0x13, 0x41, 0x73, 0x79,
	0x6e, 0x63, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x6e, 0x0a, 0x13, 0x41, 0x73,
	0x79, 0x6e, 0x63, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x73,
	0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x6d, 0x73, 0x67, 0x22, 0x37, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x22, 0x8e, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x52, 0x73, 0x70, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x6d, 0x73, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x73, 0x42, 0x13, 0x5a, 0x0e, 0x61, 0x70, 0x69, 0x2f, 0x79, 0x6f, 0x75, 0x74,
	0x75, 0x5f, 0x7a, 0x65, 0x75, 0x73, 0x80, 0x01, 0x01,
}

var (
	file_zeus_proto_rawDescOnce sync.Once
	file_zeus_proto_rawDescData = file_zeus_proto_rawDesc
)

func file_zeus_proto_rawDescGZIP() []byte {
	file_zeus_proto_rawDescOnce.Do(func() {
		file_zeus_proto_rawDescData = protoimpl.X.CompressGZIP(file_zeus_proto_rawDescData)
	})
	return file_zeus_proto_rawDescData
}

var file_zeus_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_zeus_proto_msgTypes = make([]protoimpl.MessageInfo, 75)
var file_zeus_proto_goTypes = []interface{}{
	(RetrieveControl_CacheStrategy)(0),  // 0: youtu.zeus.RetrieveControl.CacheStrategy
	(*FeatureConfig)(nil),               // 1: youtu.zeus.FeatureConfig
	(*CreateGroupReq)(nil),              // 2: youtu.zeus.CreateGroupReq
	(*CreateGroupRsp)(nil),              // 3: youtu.zeus.CreateGroupRsp
	(*DeleteGroupReq)(nil),              // 4: youtu.zeus.DeleteGroupReq
	(*DeleteGroupRsp)(nil),              // 5: youtu.zeus.DeleteGroupRsp
	(*JobContent)(nil),                  // 6: youtu.zeus.JobContent
	(*GetDeleteGroupAsyncStateReq)(nil), // 7: youtu.zeus.GetDeleteGroupAsyncStateReq
	(*GetDeleteGroupAsyncStateRsp)(nil), // 8: youtu.zeus.GetDeleteGroupAsyncStateRsp
	(*DeletePageDataReq)(nil),           // 9: youtu.zeus.DeletePageDataReq
	(*DeletePageDataRsp)(nil),           // 10: youtu.zeus.DeletePageDataRsp
	(*TruncateGroupReq)(nil),            // 11: youtu.zeus.TruncateGroupReq
	(*TruncateGroupRsp)(nil),            // 12: youtu.zeus.TruncateGroupRsp
	(*AddFeatureConfigReq)(nil),         // 13: youtu.zeus.AddFeatureConfigReq
	(*AddFeatureConfigRsp)(nil),         // 14: youtu.zeus.AddFeatureConfigRsp
	(*DeleteFeatureConfigReq)(nil),      // 15: youtu.zeus.DeleteFeatureConfigReq
	(*DeleteFeatureConfigRsp)(nil),      // 16: youtu.zeus.DeleteFeatureConfigRsp
	(*FeaItem)(nil),                     // 17: youtu.zeus.FeaItem
	(*AddFeasReq)(nil),                  // 18: youtu.zeus.AddFeasReq
	(*AddFeasRsp)(nil),                  // 19: youtu.zeus.AddFeasRsp
	(*GetFeasReq)(nil),                  // 20: youtu.zeus.GetFeasReq
	(*GetFeasRsp)(nil),                  // 21: youtu.zeus.GetFeasRsp
	(*GetFeasByEntityReq)(nil),          // 22: youtu.zeus.GetFeasByEntityReq
	(*GetFeasByEntityRsp)(nil),          // 23: youtu.zeus.GetFeasByEntityRsp
	(*UpdateFeasReq)(nil),               // 24: youtu.zeus.UpdateFeasReq
	(*UpdateFeasRsp)(nil),               // 25: youtu.zeus.UpdateFeasRsp
	(*UpdateEntityIdReq)(nil),           // 26: youtu.zeus.UpdateEntityIdReq
	(*UpdateEntityIdRsp)(nil),           // 27: youtu.zeus.UpdateEntityIdRsp
	(*UpdateFeaturesReq)(nil),           // 28: youtu.zeus.UpdateFeaturesReq
	(*UpdateFeaturesRsp)(nil),           // 29: youtu.zeus.UpdateFeaturesRsp
	(*TriggerPageUpdateReq)(nil),        // 30: youtu.zeus.TriggerPageUpdateReq
	(*TriggerPageUpdateRsp)(nil),        // 31: youtu.zeus.TriggerPageUpdateRsp
	(*UpdateExtendInfosReq)(nil),        // 32: youtu.zeus.UpdateExtendInfosReq
	(*UpdateExtendInfosRsp)(nil),        // 33: youtu.zeus.UpdateExtendInfosRsp
	(*DeleteFeasReq)(nil),               // 34: youtu.zeus.DeleteFeasReq
	(*DeleteFeasRsp)(nil),               // 35: youtu.zeus.DeleteFeasRsp
	(*DeleteEntitysReq)(nil),            // 36: youtu.zeus.DeleteEntitysReq
	(*DeleteEntitysRsp)(nil),            // 37: youtu.zeus.DeleteEntitysRsp
	(*GetGroupSizeReq)(nil),             // 38: youtu.zeus.GetGroupSizeReq
	(*GetGroupSizeRsp)(nil),             // 39: youtu.zeus.GetGroupSizeRsp
	(*GetGroupFeaIdsReq)(nil),           // 40: youtu.zeus.GetGroupFeaIdsReq
	(*GetGroupFeaIdsRsp)(nil),           // 41: youtu.zeus.GetGroupFeaIdsRsp
	(*GetGroupEntityIdsReq)(nil),        // 42: youtu.zeus.GetGroupEntityIdsReq
	(*GetGroupEntityIdsRsp)(nil),        // 43: youtu.zeus.GetGroupEntityIdsRsp
	(*GetGroupDetailReq)(nil),           // 44: youtu.zeus.GetGroupDetailReq
	(*GetGroupDetailRsp)(nil),           // 45: youtu.zeus.GetGroupDetailRsp
	(*GetGroupPageIdsReq)(nil),          // 46: youtu.zeus.GetGroupPageIdsReq
	(*GetGroupPageIdsRsp)(nil),          // 47: youtu.zeus.GetGroupPageIdsRsp
	(*ClearFeaturesReq)(nil),            // 48: youtu.zeus.ClearFeaturesReq
	(*ClearFeaturesRsp)(nil),            // 49: youtu.zeus.ClearFeaturesRsp
	(*GetPageFeaEntityIdsReq)(nil),      // 50: youtu.zeus.GetPageFeaEntityIdsReq
	(*GetPageFeaEntityIdsRsp)(nil),      // 51: youtu.zeus.GetPageFeaEntityIdsRsp
	(*GetPageFeaturesReq)(nil),          // 52: youtu.zeus.GetPageFeaturesReq
	(*GetPageFeaturesRsp)(nil),          // 53: youtu.zeus.GetPageFeaturesRsp
	(*RetrieveCandidate)(nil),           // 54: youtu.zeus.RetrieveCandidate
	(*RetrieveItem)(nil),                // 55: youtu.zeus.RetrieveItem
	(*GroupRetrieveItem)(nil),           // 56: youtu.zeus.GroupRetrieveItem
	(*RetrieveControl)(nil),             // 57: youtu.zeus.RetrieveControl
	(*GroupPacks)(nil),                  // 58: youtu.zeus.GroupPacks
	(*RetrieveReq)(nil),                 // 59: youtu.zeus.RetrieveReq
	(*RetrieveRsp)(nil),                 // 60: youtu.zeus.RetrieveRsp
	(*TrimCacheReq)(nil),                // 61: youtu.zeus.TrimCacheReq
	(*TrimCacheResult)(nil),             // 62: youtu.zeus.TrimCacheResult
	(*TrimCacheRsp)(nil),                // 63: youtu.zeus.TrimCacheRsp
	(*DeleteCacheReq)(nil),              // 64: youtu.zeus.DeleteCacheReq
	(*DeleteCacheResult)(nil),           // 65: youtu.zeus.DeleteCacheResult
	(*DeleteCacheRsp)(nil),              // 66: youtu.zeus.DeleteCacheRsp
	(*WarmUpCacheReq)(nil),              // 67: youtu.zeus.WarmUpCacheReq
	(*WarmUpCacheResult)(nil),           // 68: youtu.zeus.WarmUpCacheResult
	(*WarmUpCacheRsp)(nil),              // 69: youtu.zeus.WarmUpCacheRsp
	(*AsyncWarmUpGroupReq)(nil),         // 70: youtu.zeus.AsyncWarmUpGroupReq
	(*AsyncWarmUpGroupRsp)(nil),         // 71: youtu.zeus.AsyncWarmUpGroupRsp
	(*AsyncDeleteGroupReq)(nil),         // 72: youtu.zeus.AsyncDeleteGroupReq
	(*AsyncDeleteGroupRsp)(nil),         // 73: youtu.zeus.AsyncDeleteGroupRsp
	(*GetAllCacheGroupIdsReq)(nil),      // 74: youtu.zeus.GetAllCacheGroupIdsReq
	(*GetAllCacheGroupIdsRsp)(nil),      // 75: youtu.zeus.GetAllCacheGroupIdsRsp
	(youtu.FeatureType)(0),              // 76: youtu.FeatureType
	(youtu.Platform)(0),                 // 77: youtu.Platform
	(*youtu_job.JobInfo)(nil),           // 78: youtu.job.JobInfo
}
var file_zeus_proto_depIdxs = []int32{
	76, // 0: youtu.zeus.FeatureConfig.feature_type:type_name -> youtu.FeatureType
	77, // 1: youtu.zeus.CreateGroupReq.platform:type_name -> youtu.Platform
	76, // 2: youtu.zeus.CreateGroupReq.feature_type:type_name -> youtu.FeatureType
	1,  // 3: youtu.zeus.CreateGroupReq.feature_config:type_name -> youtu.zeus.FeatureConfig
	78, // 4: youtu.zeus.GetDeleteGroupAsyncStateRsp.job_info:type_name -> youtu.job.JobInfo
	1,  // 5: youtu.zeus.AddFeatureConfigReq.feature_config:type_name -> youtu.zeus.FeatureConfig
	17, // 6: youtu.zeus.AddFeasReq.items:type_name -> youtu.zeus.FeaItem
	17, // 7: youtu.zeus.GetFeasRsp.items:type_name -> youtu.zeus.FeaItem
	17, // 8: youtu.zeus.GetFeasByEntityRsp.items:type_name -> youtu.zeus.FeaItem
	17, // 9: youtu.zeus.UpdateFeasReq.items:type_name -> youtu.zeus.FeaItem
	17, // 10: youtu.zeus.GetGroupDetailRsp.items:type_name -> youtu.zeus.FeaItem
	54, // 11: youtu.zeus.RetrieveItem.result:type_name -> youtu.zeus.RetrieveCandidate
	55, // 12: youtu.zeus.GroupRetrieveItem.items:type_name -> youtu.zeus.RetrieveItem
	0,  // 13: youtu.zeus.RetrieveControl.cache_strategy:type_name -> youtu.zeus.RetrieveControl.CacheStrategy
	57, // 14: youtu.zeus.RetrieveReq.control:type_name -> youtu.zeus.RetrieveControl
	58, // 15: youtu.zeus.RetrieveReq.group_packs:type_name -> youtu.zeus.GroupPacks
	56, // 16: youtu.zeus.RetrieveRsp.group_items:type_name -> youtu.zeus.GroupRetrieveItem
	62, // 17: youtu.zeus.TrimCacheRsp.results:type_name -> youtu.zeus.TrimCacheResult
	65, // 18: youtu.zeus.DeleteCacheRsp.results:type_name -> youtu.zeus.DeleteCacheResult
	58, // 19: youtu.zeus.WarmUpCacheReq.group_packs:type_name -> youtu.zeus.GroupPacks
	68, // 20: youtu.zeus.WarmUpCacheRsp.results:type_name -> youtu.zeus.WarmUpCacheResult
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_zeus_proto_init() }
func file_zeus_proto_init() {
	if File_zeus_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_zeus_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGroupRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGroupRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeleteGroupAsyncStateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeleteGroupAsyncStateRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePageDataReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePageDataRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TruncateGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TruncateGroupRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFeatureConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFeatureConfigRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFeatureConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFeatureConfigRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeaItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFeasReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFeasRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFeasReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFeasRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFeasByEntityReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFeasByEntityRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFeasReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFeasRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateEntityIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateEntityIdRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFeaturesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFeaturesRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerPageUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerPageUpdateRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateExtendInfosReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateExtendInfosRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFeasReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFeasRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteEntitysReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteEntitysRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupSizeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupSizeRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupFeaIdsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupFeaIdsRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupEntityIdsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupEntityIdsRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupDetailRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupPageIdsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupPageIdsRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearFeaturesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearFeaturesRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPageFeaEntityIdsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPageFeaEntityIdsRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPageFeaturesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPageFeaturesRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveCandidate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupRetrieveItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveControl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupPacks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrimCacheReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrimCacheResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrimCacheRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCacheReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCacheResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCacheRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WarmUpCacheReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WarmUpCacheResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WarmUpCacheRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AsyncWarmUpGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AsyncWarmUpGroupRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AsyncDeleteGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AsyncDeleteGroupRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllCacheGroupIdsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeus_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllCacheGroupIdsRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zeus_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   75,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_zeus_proto_goTypes,
		DependencyIndexes: file_zeus_proto_depIdxs,
		EnumInfos:         file_zeus_proto_enumTypes,
		MessageInfos:      file_zeus_proto_msgTypes,
	}.Build()
	File_zeus_proto = out.File
	file_zeus_proto_rawDesc = nil
	file_zeus_proto_goTypes = nil
	file_zeus_proto_depIdxs = nil
}
