syntax = "proto2";

package youtu.job;
import "job_public.proto";

option cc_generic_services = true;
option go_package = "api/youtu_job";

message JobConfig {
    optional int32 run_timeout_sec = 1 [default = 0];
    optional bool atmost_once = 2 [default = false]; // deprecated
    optional bool restart_dead = 3 [default = false]; // deprecated
    optional int32 estimate_run_sec = 4;
    optional bool auto_clear_input = 5 [default = false];
    optional bool auto_delete = 6 [default = false];
    optional int32 max_retry_times = 7 [default = 5];  // 1:once. <0:unlimit
    optional int32 job_expire_time = 8 [default = 0];  // >0: expire work
}

message JobLife {
    optional uint64 create_time = 1;
    optional uint64 enqueue_time = 2;
    optional uint64 start_time = 3;
    optional uint64 end_time = 4;
    optional uint64 cancel_time = 5;
    optional float progress = 6;  // [0-1]
    optional uint64 estimate_end_time = 7;
    optional string worker_token = 8;
    optional string job_token = 9;
    optional uint64 estimate_start_time = 10;
    optional uint64 refresh_estimate_start_time = 11;
    optional uint32 retry_times = 12;
}

message JobInput {
    optional bytes content = 1;
    optional string url = 2;
}

message JobOutput {
    optional bytes content = 1;
    optional string url = 2;
    optional int32 errorcode = 3;
    optional string errormsg = 4;
}

message JobInfo {
    optional string id = 1;
    optional string type = 2;
    optional JobInput input = 3;    // deprecated
    optional JobOutput output = 4;
    optional JobStatus status = 5;
    optional JobLife life = 6;
    optional JobConfig config = 7;
}

message JobQueueRuntime {
    optional uint64 wait_time = 1;
    optional uint64 refresh_time = 2;
}

message AllocJobIdReq {
    optional string session_id = 1;
    optional string job_type = 2;
}

message AllocJobIdRsp {
	optional string session_id = 1;
    optional int32 errorcode = 2;
    optional string errormsg = 3;

    optional string job_id = 4; 
}

message AddJobReq {
    optional string session_id = 1;

    optional string job_type = 2;
    optional JobInput job_input = 3;
    optional JobConfig job_config = 4;
    optional string job_id = 5; 

    optional int32 max_queue_size = 6;
}

message AddJobRsp {
	optional string session_id = 1;
    optional int32 errorcode = 2;
    optional string errormsg = 3;

    optional string job_id = 4; 
}

message QueryJobReq {
    optional string session_id = 1;

    optional string job_id = 2;
    optional bool need_input = 3 [default = false];
}

message QueryJobRsp {
	optional string session_id = 1;
    optional int32 errorcode = 2;
    optional string errormsg = 3;

    optional JobInfo job_info = 4;
    optional JobInput job_input = 5;
}

message QueryJobInQueueReq {
    optional string session_id = 1;

    optional string job_type = 2;
    optional bool verbose = 3;
}

message QueryJobInQueueRsp {
	optional string session_id = 1;
    optional int32 errorcode = 2;
    optional string errormsg = 3;

    repeated JobInfo job_infos = 4;
    repeated string job_ids = 5;
}

message GetQueueSummaryReq {
    optional string session_id = 1;

    optional string job_type = 2;
    optional bool verbose = 3 [default = false];
    optional bool fast = 4 [default = false];
}

message JobSummary {
    optional string job_id = 1;
    optional JobLife job_life = 3;
}

message WorkerSummary {
    optional string worker_token = 1;
    optional int32 job_num = 2;
}

message GetQueueSummaryRsp {
    optional string session_id = 1;
    optional int32 errorcode = 2;
    optional string errormsg = 3;

    optional int32 queue_job_num = 4;
    optional int32 wait_job_num = 5;
    optional int32 run_job_num = 6;
    repeated JobSummary jobs = 7;
    repeated WorkerSummary workers = 8;
}

message GetQueueRuntimeReq {
    optional string session_id = 1;

    optional string job_type = 2;
}

message GetQueueRuntimeRsp {
    optional string session_id = 1;
    optional int32 errorcode = 2;
    optional string errormsg = 3;

    optional JobQueueRuntime runtime = 4;
}

message CancelJobReq {
    optional string session_id = 1;

    optional string job_id = 2;
}

message CancelJobRsp {
	optional string session_id = 1;
    optional int32 errorcode = 2;
    optional string errormsg = 3;
}

message RestartJobReq {
    optional string session_id = 1;

    optional string job_id = 2;
}

message RestartJobRsp {
	optional string session_id = 1;
    optional int32 errorcode = 2;
    optional string errormsg = 3;
}

message FetchJobReq {
    optional string session_id = 1;

    optional string job_type = 2;
    optional string worker_token = 3;
    optional string job_token = 4;
}

message FetchJobRsp {
	optional string session_id = 1;
    optional int32 errorcode = 2;
    optional string errormsg = 3;

    optional string job_id = 4;
    optional JobInput job_input = 5; 
    optional float progress = 6;
}

message ReportJobReq {
    optional string session_id = 1;

    optional string job_id = 2;
    optional JobStatus job_status = 3;
    optional JobOutput job_output = 4;
    optional float progress = 5;
    optional uint64 estimate_end_time = 6;
    optional string worker_token = 7;
    optional string job_token = 8;
    optional int32 job_ret = 9;
}

message ReportJobRsp {
	optional string session_id = 1;
    optional int32 errorcode = 2;
    optional string errormsg = 3;
}

message ReportWorkerReq {
    optional string session_id = 1;

    optional string worker_token = 2;
    optional string job_type = 3;
    repeated string job_ids = 4;
    repeated string job_tokens = 5;
    optional int32 thread_num = 6;
}

message ReportWorkerRsp {
	optional string session_id = 1;
    optional int32 errorcode = 2;
    optional string errormsg = 3;
}

message ClearQueueReq {
    optional string session_id = 1;
    optional string job_type = 2;
}

message ClearQueueRsp {
	optional string session_id = 1;
    optional int32 errorcode = 2;
    optional string errormsg = 3;
}

service JobManagerService {
    rpc AllocJobId(AllocJobIdReq) returns (AllocJobIdRsp);
    rpc AddJob(AddJobReq) returns (AddJobRsp);
    rpc QueryJob(QueryJobReq) returns (QueryJobRsp);
    rpc QueryJobInQueue(QueryJobInQueueReq) returns (QueryJobInQueueRsp);  
    rpc GetQueueSummary(GetQueueSummaryReq) returns (GetQueueSummaryRsp);
    rpc GetQueueRuntime(GetQueueRuntimeReq) returns (GetQueueRuntimeRsp);
    rpc CancelJob(CancelJobReq) returns (CancelJobRsp);
    rpc RestartJob(RestartJobReq) returns (RestartJobRsp); 
    rpc FetchJob(FetchJobReq) returns (FetchJobRsp);
    rpc ReportJob(ReportJobReq) returns (ReportJobRsp);
    rpc ReportWorker(ReportWorkerReq) returns (ReportWorkerRsp);
    rpc ClearQueue(ClearQueueReq) returns (ClearQueueRsp);
}

