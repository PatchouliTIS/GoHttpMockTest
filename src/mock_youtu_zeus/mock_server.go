// Code generated by MockGen. DO NOT EDIT.
// Source: ./zeus_api_grpc.pb.go

// Package mock_youtu_zeus is a generated GoMock package.
package mock_youtu_zeus

import (
	context "context"
	reflect "reflect"
	youtu_zeus "zeus/api/youtu_zeus"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockZeusServiceClient is a mock of ZeusServiceClient interface.
type MockZeusServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockZeusServiceClientMockRecorder
}

// MockZeusServiceClientMockRecorder is the mock recorder for MockZeusServiceClient.
type MockZeusServiceClientMockRecorder struct {
	mock *MockZeusServiceClient
}

// NewMockZeusServiceClient creates a new mock instance.
func NewMockZeusServiceClient(ctrl *gomock.Controller) *MockZeusServiceClient {
	mock := &MockZeusServiceClient{ctrl: ctrl}
	mock.recorder = &MockZeusServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockZeusServiceClient) EXPECT() *MockZeusServiceClientMockRecorder {
	return m.recorder
}

// AddFeas mocks base method.
func (m *MockZeusServiceClient) AddFeas(ctx context.Context, in *youtu_zeus.AddFeasReq, opts ...grpc.CallOption) (*youtu_zeus.AddFeasRsp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddFeas", varargs...)
	ret0, _ := ret[0].(*youtu_zeus.AddFeasRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFeas indicates an expected call of AddFeas.
func (mr *MockZeusServiceClientMockRecorder) AddFeas(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFeas", reflect.TypeOf((*MockZeusServiceClient)(nil).AddFeas), varargs...)
}

// AddFeatureConfig mocks base method.
func (m *MockZeusServiceClient) AddFeatureConfig(ctx context.Context, in *youtu_zeus.AddFeatureConfigReq, opts ...grpc.CallOption) (*youtu_zeus.AddFeatureConfigRsp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddFeatureConfig", varargs...)
	ret0, _ := ret[0].(*youtu_zeus.AddFeatureConfigRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFeatureConfig indicates an expected call of AddFeatureConfig.
func (mr *MockZeusServiceClientMockRecorder) AddFeatureConfig(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFeatureConfig", reflect.TypeOf((*MockZeusServiceClient)(nil).AddFeatureConfig), varargs...)
}

// ClearFeatures mocks base method.
func (m *MockZeusServiceClient) ClearFeatures(ctx context.Context, in *youtu_zeus.ClearFeaturesReq, opts ...grpc.CallOption) (*youtu_zeus.ClearFeaturesRsp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ClearFeatures", varargs...)
	ret0, _ := ret[0].(*youtu_zeus.ClearFeaturesRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClearFeatures indicates an expected call of ClearFeatures.
func (mr *MockZeusServiceClientMockRecorder) ClearFeatures(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearFeatures", reflect.TypeOf((*MockZeusServiceClient)(nil).ClearFeatures), varargs...)
}

// CreateGroup mocks base method.
func (m *MockZeusServiceClient) CreateGroup(ctx context.Context, in *youtu_zeus.CreateGroupReq, opts ...grpc.CallOption) (*youtu_zeus.CreateGroupRsp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGroup", varargs...)
	ret0, _ := ret[0].(*youtu_zeus.CreateGroupRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGroup indicates an expected call of CreateGroup.
func (mr *MockZeusServiceClientMockRecorder) CreateGroup(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*MockZeusServiceClient)(nil).CreateGroup), varargs...)
}

// DeleteCache mocks base method.
func (m *MockZeusServiceClient) DeleteCache(ctx context.Context, in *youtu_zeus.DeleteCacheReq, opts ...grpc.CallOption) (*youtu_zeus.DeleteCacheRsp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCache", varargs...)
	ret0, _ := ret[0].(*youtu_zeus.DeleteCacheRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCache indicates an expected call of DeleteCache.
func (mr *MockZeusServiceClientMockRecorder) DeleteCache(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCache", reflect.TypeOf((*MockZeusServiceClient)(nil).DeleteCache), varargs...)
}

// DeleteEntitys mocks base method.
func (m *MockZeusServiceClient) DeleteEntitys(ctx context.Context, in *youtu_zeus.DeleteEntitysReq, opts ...grpc.CallOption) (*youtu_zeus.DeleteEntitysRsp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteEntitys", varargs...)
	ret0, _ := ret[0].(*youtu_zeus.DeleteEntitysRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEntitys indicates an expected call of DeleteEntitys.
func (mr *MockZeusServiceClientMockRecorder) DeleteEntitys(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEntitys", reflect.TypeOf((*MockZeusServiceClient)(nil).DeleteEntitys), varargs...)
}

// DeleteFeas mocks base method.
func (m *MockZeusServiceClient) DeleteFeas(ctx context.Context, in *youtu_zeus.DeleteFeasReq, opts ...grpc.CallOption) (*youtu_zeus.DeleteFeasRsp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFeas", varargs...)
	ret0, _ := ret[0].(*youtu_zeus.DeleteFeasRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFeas indicates an expected call of DeleteFeas.
func (mr *MockZeusServiceClientMockRecorder) DeleteFeas(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFeas", reflect.TypeOf((*MockZeusServiceClient)(nil).DeleteFeas), varargs...)
}

// DeleteFeatureConfig mocks base method.
func (m *MockZeusServiceClient) DeleteFeatureConfig(ctx context.Context, in *youtu_zeus.DeleteFeatureConfigReq, opts ...grpc.CallOption) (*youtu_zeus.DeleteFeatureConfigRsp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFeatureConfig", varargs...)
	ret0, _ := ret[0].(*youtu_zeus.DeleteFeatureConfigRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFeatureConfig indicates an expected call of DeleteFeatureConfig.
func (mr *MockZeusServiceClientMockRecorder) DeleteFeatureConfig(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFeatureConfig", reflect.TypeOf((*MockZeusServiceClient)(nil).DeleteFeatureConfig), varargs...)
}

// DeleteGroup mocks base method.
func (m *MockZeusServiceClient) DeleteGroup(ctx context.Context, in *youtu_zeus.DeleteGroupReq, opts ...grpc.CallOption) (*youtu_zeus.DeleteGroupRsp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGroup", varargs...)
	ret0, _ := ret[0].(*youtu_zeus.DeleteGroupRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGroup indicates an expected call of DeleteGroup.
func (mr *MockZeusServiceClientMockRecorder) DeleteGroup(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroup", reflect.TypeOf((*MockZeusServiceClient)(nil).DeleteGroup), varargs...)
}

// DeleteGroupAsync mocks base method.
func (m *MockZeusServiceClient) DeleteGroupAsync(ctx context.Context, in *youtu_zeus.DeleteGroupReq, opts ...grpc.CallOption) (*youtu_zeus.DeleteGroupRsp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGroupAsync", varargs...)
	ret0, _ := ret[0].(*youtu_zeus.DeleteGroupRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGroupAsync indicates an expected call of DeleteGroupAsync.
func (mr *MockZeusServiceClientMockRecorder) DeleteGroupAsync(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroupAsync", reflect.TypeOf((*MockZeusServiceClient)(nil).DeleteGroupAsync), varargs...)
}

// GetDeleteGroupAsyncState mocks base method.
func (m *MockZeusServiceClient) GetDeleteGroupAsyncState(ctx context.Context, in *youtu_zeus.GetDeleteGroupAsyncStateReq, opts ...grpc.CallOption) (*youtu_zeus.GetDeleteGroupAsyncStateRsp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDeleteGroupAsyncState", varargs...)
	ret0, _ := ret[0].(*youtu_zeus.GetDeleteGroupAsyncStateRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeleteGroupAsyncState indicates an expected call of GetDeleteGroupAsyncState.
func (mr *MockZeusServiceClientMockRecorder) GetDeleteGroupAsyncState(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeleteGroupAsyncState", reflect.TypeOf((*MockZeusServiceClient)(nil).GetDeleteGroupAsyncState), varargs...)
}

// GetFeas mocks base method.
func (m *MockZeusServiceClient) GetFeas(ctx context.Context, in *youtu_zeus.GetFeasReq, opts ...grpc.CallOption) (*youtu_zeus.GetFeasRsp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFeas", varargs...)
	ret0, _ := ret[0].(*youtu_zeus.GetFeasRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeas indicates an expected call of GetFeas.
func (mr *MockZeusServiceClientMockRecorder) GetFeas(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeas", reflect.TypeOf((*MockZeusServiceClient)(nil).GetFeas), varargs...)
}

// GetFeasByEntity mocks base method.
func (m *MockZeusServiceClient) GetFeasByEntity(ctx context.Context, in *youtu_zeus.GetFeasByEntityReq, opts ...grpc.CallOption) (*youtu_zeus.GetFeasByEntityRsp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFeasByEntity", varargs...)
	ret0, _ := ret[0].(*youtu_zeus.GetFeasByEntityRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeasByEntity indicates an expected call of GetFeasByEntity.
func (mr *MockZeusServiceClientMockRecorder) GetFeasByEntity(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeasByEntity", reflect.TypeOf((*MockZeusServiceClient)(nil).GetFeasByEntity), varargs...)
}

// GetGroupDetail mocks base method.
func (m *MockZeusServiceClient) GetGroupDetail(ctx context.Context, in *youtu_zeus.GetGroupDetailReq, opts ...grpc.CallOption) (*youtu_zeus.GetGroupDetailRsp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGroupDetail", varargs...)
	ret0, _ := ret[0].(*youtu_zeus.GetGroupDetailRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupDetail indicates an expected call of GetGroupDetail.
func (mr *MockZeusServiceClientMockRecorder) GetGroupDetail(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupDetail", reflect.TypeOf((*MockZeusServiceClient)(nil).GetGroupDetail), varargs...)
}

// GetGroupEntityIds mocks base method.
func (m *MockZeusServiceClient) GetGroupEntityIds(ctx context.Context, in *youtu_zeus.GetGroupEntityIdsReq, opts ...grpc.CallOption) (*youtu_zeus.GetGroupEntityIdsRsp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGroupEntityIds", varargs...)
	ret0, _ := ret[0].(*youtu_zeus.GetGroupEntityIdsRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupEntityIds indicates an expected call of GetGroupEntityIds.
func (mr *MockZeusServiceClientMockRecorder) GetGroupEntityIds(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupEntityIds", reflect.TypeOf((*MockZeusServiceClient)(nil).GetGroupEntityIds), varargs...)
}

// GetGroupFeaIds mocks base method.
func (m *MockZeusServiceClient) GetGroupFeaIds(ctx context.Context, in *youtu_zeus.GetGroupFeaIdsReq, opts ...grpc.CallOption) (*youtu_zeus.GetGroupFeaIdsRsp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGroupFeaIds", varargs...)
	ret0, _ := ret[0].(*youtu_zeus.GetGroupFeaIdsRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupFeaIds indicates an expected call of GetGroupFeaIds.
func (mr *MockZeusServiceClientMockRecorder) GetGroupFeaIds(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupFeaIds", reflect.TypeOf((*MockZeusServiceClient)(nil).GetGroupFeaIds), varargs...)
}

// GetGroupPageIds mocks base method.
func (m *MockZeusServiceClient) GetGroupPageIds(ctx context.Context, in *youtu_zeus.GetGroupPageIdsReq, opts ...grpc.CallOption) (*youtu_zeus.GetGroupPageIdsRsp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGroupPageIds", varargs...)
	ret0, _ := ret[0].(*youtu_zeus.GetGroupPageIdsRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupPageIds indicates an expected call of GetGroupPageIds.
func (mr *MockZeusServiceClientMockRecorder) GetGroupPageIds(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupPageIds", reflect.TypeOf((*MockZeusServiceClient)(nil).GetGroupPageIds), varargs...)
}

// GetGroupSize mocks base method.
func (m *MockZeusServiceClient) GetGroupSize(ctx context.Context, in *youtu_zeus.GetGroupSizeReq, opts ...grpc.CallOption) (*youtu_zeus.GetGroupSizeRsp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGroupSize", varargs...)
	ret0, _ := ret[0].(*youtu_zeus.GetGroupSizeRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupSize indicates an expected call of GetGroupSize.
func (mr *MockZeusServiceClientMockRecorder) GetGroupSize(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupSize", reflect.TypeOf((*MockZeusServiceClient)(nil).GetGroupSize), varargs...)
}

// GetPageFeaEntityIds mocks base method.
func (m *MockZeusServiceClient) GetPageFeaEntityIds(ctx context.Context, in *youtu_zeus.GetPageFeaEntityIdsReq, opts ...grpc.CallOption) (*youtu_zeus.GetPageFeaEntityIdsRsp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPageFeaEntityIds", varargs...)
	ret0, _ := ret[0].(*youtu_zeus.GetPageFeaEntityIdsRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPageFeaEntityIds indicates an expected call of GetPageFeaEntityIds.
func (mr *MockZeusServiceClientMockRecorder) GetPageFeaEntityIds(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPageFeaEntityIds", reflect.TypeOf((*MockZeusServiceClient)(nil).GetPageFeaEntityIds), varargs...)
}

// GetPageFeatures mocks base method.
func (m *MockZeusServiceClient) GetPageFeatures(ctx context.Context, in *youtu_zeus.GetPageFeaturesReq, opts ...grpc.CallOption) (*youtu_zeus.GetPageFeaturesRsp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPageFeatures", varargs...)
	ret0, _ := ret[0].(*youtu_zeus.GetPageFeaturesRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPageFeatures indicates an expected call of GetPageFeatures.
func (mr *MockZeusServiceClientMockRecorder) GetPageFeatures(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPageFeatures", reflect.TypeOf((*MockZeusServiceClient)(nil).GetPageFeatures), varargs...)
}

// Retrieve mocks base method.
func (m *MockZeusServiceClient) Retrieve(ctx context.Context, in *youtu_zeus.RetrieveReq, opts ...grpc.CallOption) (*youtu_zeus.RetrieveRsp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Retrieve", varargs...)
	ret0, _ := ret[0].(*youtu_zeus.RetrieveRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Retrieve indicates an expected call of Retrieve.
func (mr *MockZeusServiceClientMockRecorder) Retrieve(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Retrieve", reflect.TypeOf((*MockZeusServiceClient)(nil).Retrieve), varargs...)
}

// TriggerPageUpdate mocks base method.
func (m *MockZeusServiceClient) TriggerPageUpdate(ctx context.Context, in *youtu_zeus.TriggerPageUpdateReq, opts ...grpc.CallOption) (*youtu_zeus.TriggerPageUpdateRsp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TriggerPageUpdate", varargs...)
	ret0, _ := ret[0].(*youtu_zeus.TriggerPageUpdateRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TriggerPageUpdate indicates an expected call of TriggerPageUpdate.
func (mr *MockZeusServiceClientMockRecorder) TriggerPageUpdate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TriggerPageUpdate", reflect.TypeOf((*MockZeusServiceClient)(nil).TriggerPageUpdate), varargs...)
}

// TrimCache mocks base method.
func (m *MockZeusServiceClient) TrimCache(ctx context.Context, in *youtu_zeus.TrimCacheReq, opts ...grpc.CallOption) (*youtu_zeus.TrimCacheRsp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TrimCache", varargs...)
	ret0, _ := ret[0].(*youtu_zeus.TrimCacheRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrimCache indicates an expected call of TrimCache.
func (mr *MockZeusServiceClientMockRecorder) TrimCache(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrimCache", reflect.TypeOf((*MockZeusServiceClient)(nil).TrimCache), varargs...)
}

// TruncateGroup mocks base method.
func (m *MockZeusServiceClient) TruncateGroup(ctx context.Context, in *youtu_zeus.TruncateGroupReq, opts ...grpc.CallOption) (*youtu_zeus.TruncateGroupRsp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TruncateGroup", varargs...)
	ret0, _ := ret[0].(*youtu_zeus.TruncateGroupRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TruncateGroup indicates an expected call of TruncateGroup.
func (mr *MockZeusServiceClientMockRecorder) TruncateGroup(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TruncateGroup", reflect.TypeOf((*MockZeusServiceClient)(nil).TruncateGroup), varargs...)
}

// UpdateEntityId mocks base method.
func (m *MockZeusServiceClient) UpdateEntityId(ctx context.Context, in *youtu_zeus.UpdateEntityIdReq, opts ...grpc.CallOption) (*youtu_zeus.UpdateEntityIdRsp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateEntityId", varargs...)
	ret0, _ := ret[0].(*youtu_zeus.UpdateEntityIdRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEntityId indicates an expected call of UpdateEntityId.
func (mr *MockZeusServiceClientMockRecorder) UpdateEntityId(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEntityId", reflect.TypeOf((*MockZeusServiceClient)(nil).UpdateEntityId), varargs...)
}

// UpdateExtendInfos mocks base method.
func (m *MockZeusServiceClient) UpdateExtendInfos(ctx context.Context, in *youtu_zeus.UpdateExtendInfosReq, opts ...grpc.CallOption) (*youtu_zeus.UpdateExtendInfosRsp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateExtendInfos", varargs...)
	ret0, _ := ret[0].(*youtu_zeus.UpdateExtendInfosRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateExtendInfos indicates an expected call of UpdateExtendInfos.
func (mr *MockZeusServiceClientMockRecorder) UpdateExtendInfos(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExtendInfos", reflect.TypeOf((*MockZeusServiceClient)(nil).UpdateExtendInfos), varargs...)
}

// UpdateFeas mocks base method.
func (m *MockZeusServiceClient) UpdateFeas(ctx context.Context, in *youtu_zeus.UpdateFeasReq, opts ...grpc.CallOption) (*youtu_zeus.UpdateFeasRsp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFeas", varargs...)
	ret0, _ := ret[0].(*youtu_zeus.UpdateFeasRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFeas indicates an expected call of UpdateFeas.
func (mr *MockZeusServiceClientMockRecorder) UpdateFeas(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFeas", reflect.TypeOf((*MockZeusServiceClient)(nil).UpdateFeas), varargs...)
}

// UpdateFeatures mocks base method.
func (m *MockZeusServiceClient) UpdateFeatures(ctx context.Context, in *youtu_zeus.UpdateFeaturesReq, opts ...grpc.CallOption) (*youtu_zeus.UpdateFeaturesRsp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFeatures", varargs...)
	ret0, _ := ret[0].(*youtu_zeus.UpdateFeaturesRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFeatures indicates an expected call of UpdateFeatures.
func (mr *MockZeusServiceClientMockRecorder) UpdateFeatures(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFeatures", reflect.TypeOf((*MockZeusServiceClient)(nil).UpdateFeatures), varargs...)
}

// WarmUpCache mocks base method.
func (m *MockZeusServiceClient) WarmUpCache(ctx context.Context, in *youtu_zeus.WarmUpCacheReq, opts ...grpc.CallOption) (*youtu_zeus.WarmUpCacheRsp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WarmUpCache", varargs...)
	ret0, _ := ret[0].(*youtu_zeus.WarmUpCacheRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WarmUpCache indicates an expected call of WarmUpCache.
func (mr *MockZeusServiceClientMockRecorder) WarmUpCache(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WarmUpCache", reflect.TypeOf((*MockZeusServiceClient)(nil).WarmUpCache), varargs...)
}

// MockZeusServiceServer is a mock of ZeusServiceServer interface.
type MockZeusServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockZeusServiceServerMockRecorder
}

// MockZeusServiceServerMockRecorder is the mock recorder for MockZeusServiceServer.
type MockZeusServiceServerMockRecorder struct {
	mock *MockZeusServiceServer
}

// NewMockZeusServiceServer creates a new mock instance.
func NewMockZeusServiceServer(ctrl *gomock.Controller) *MockZeusServiceServer {
	mock := &MockZeusServiceServer{ctrl: ctrl}
	mock.recorder = &MockZeusServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockZeusServiceServer) EXPECT() *MockZeusServiceServerMockRecorder {
	return m.recorder
}

// AddFeas mocks base method.
func (m *MockZeusServiceServer) AddFeas(arg0 context.Context, arg1 *youtu_zeus.AddFeasReq) (*youtu_zeus.AddFeasRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFeas", arg0, arg1)
	ret0, _ := ret[0].(*youtu_zeus.AddFeasRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFeas indicates an expected call of AddFeas.
func (mr *MockZeusServiceServerMockRecorder) AddFeas(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFeas", reflect.TypeOf((*MockZeusServiceServer)(nil).AddFeas), arg0, arg1)
}

// AddFeatureConfig mocks base method.
func (m *MockZeusServiceServer) AddFeatureConfig(arg0 context.Context, arg1 *youtu_zeus.AddFeatureConfigReq) (*youtu_zeus.AddFeatureConfigRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFeatureConfig", arg0, arg1)
	ret0, _ := ret[0].(*youtu_zeus.AddFeatureConfigRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFeatureConfig indicates an expected call of AddFeatureConfig.
func (mr *MockZeusServiceServerMockRecorder) AddFeatureConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFeatureConfig", reflect.TypeOf((*MockZeusServiceServer)(nil).AddFeatureConfig), arg0, arg1)
}

// ClearFeatures mocks base method.
func (m *MockZeusServiceServer) ClearFeatures(arg0 context.Context, arg1 *youtu_zeus.ClearFeaturesReq) (*youtu_zeus.ClearFeaturesRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearFeatures", arg0, arg1)
	ret0, _ := ret[0].(*youtu_zeus.ClearFeaturesRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClearFeatures indicates an expected call of ClearFeatures.
func (mr *MockZeusServiceServerMockRecorder) ClearFeatures(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearFeatures", reflect.TypeOf((*MockZeusServiceServer)(nil).ClearFeatures), arg0, arg1)
}

// CreateGroup mocks base method.
func (m *MockZeusServiceServer) CreateGroup(arg0 context.Context, arg1 *youtu_zeus.CreateGroupReq) (*youtu_zeus.CreateGroupRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroup", arg0, arg1)
	ret0, _ := ret[0].(*youtu_zeus.CreateGroupRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGroup indicates an expected call of CreateGroup.
func (mr *MockZeusServiceServerMockRecorder) CreateGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*MockZeusServiceServer)(nil).CreateGroup), arg0, arg1)
}

// DeleteCache mocks base method.
func (m *MockZeusServiceServer) DeleteCache(arg0 context.Context, arg1 *youtu_zeus.DeleteCacheReq) (*youtu_zeus.DeleteCacheRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCache", arg0, arg1)
	ret0, _ := ret[0].(*youtu_zeus.DeleteCacheRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCache indicates an expected call of DeleteCache.
func (mr *MockZeusServiceServerMockRecorder) DeleteCache(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCache", reflect.TypeOf((*MockZeusServiceServer)(nil).DeleteCache), arg0, arg1)
}

// DeleteEntitys mocks base method.
func (m *MockZeusServiceServer) DeleteEntitys(arg0 context.Context, arg1 *youtu_zeus.DeleteEntitysReq) (*youtu_zeus.DeleteEntitysRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEntitys", arg0, arg1)
	ret0, _ := ret[0].(*youtu_zeus.DeleteEntitysRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEntitys indicates an expected call of DeleteEntitys.
func (mr *MockZeusServiceServerMockRecorder) DeleteEntitys(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEntitys", reflect.TypeOf((*MockZeusServiceServer)(nil).DeleteEntitys), arg0, arg1)
}

// DeleteFeas mocks base method.
func (m *MockZeusServiceServer) DeleteFeas(arg0 context.Context, arg1 *youtu_zeus.DeleteFeasReq) (*youtu_zeus.DeleteFeasRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFeas", arg0, arg1)
	ret0, _ := ret[0].(*youtu_zeus.DeleteFeasRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFeas indicates an expected call of DeleteFeas.
func (mr *MockZeusServiceServerMockRecorder) DeleteFeas(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFeas", reflect.TypeOf((*MockZeusServiceServer)(nil).DeleteFeas), arg0, arg1)
}

// DeleteFeatureConfig mocks base method.
func (m *MockZeusServiceServer) DeleteFeatureConfig(arg0 context.Context, arg1 *youtu_zeus.DeleteFeatureConfigReq) (*youtu_zeus.DeleteFeatureConfigRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFeatureConfig", arg0, arg1)
	ret0, _ := ret[0].(*youtu_zeus.DeleteFeatureConfigRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFeatureConfig indicates an expected call of DeleteFeatureConfig.
func (mr *MockZeusServiceServerMockRecorder) DeleteFeatureConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFeatureConfig", reflect.TypeOf((*MockZeusServiceServer)(nil).DeleteFeatureConfig), arg0, arg1)
}

// DeleteGroup mocks base method.
func (m *MockZeusServiceServer) DeleteGroup(arg0 context.Context, arg1 *youtu_zeus.DeleteGroupReq) (*youtu_zeus.DeleteGroupRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroup", arg0, arg1)
	ret0, _ := ret[0].(*youtu_zeus.DeleteGroupRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGroup indicates an expected call of DeleteGroup.
func (mr *MockZeusServiceServerMockRecorder) DeleteGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroup", reflect.TypeOf((*MockZeusServiceServer)(nil).DeleteGroup), arg0, arg1)
}

// DeleteGroupAsync mocks base method.
func (m *MockZeusServiceServer) DeleteGroupAsync(arg0 context.Context, arg1 *youtu_zeus.DeleteGroupReq) (*youtu_zeus.DeleteGroupRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroupAsync", arg0, arg1)
	ret0, _ := ret[0].(*youtu_zeus.DeleteGroupRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGroupAsync indicates an expected call of DeleteGroupAsync.
func (mr *MockZeusServiceServerMockRecorder) DeleteGroupAsync(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroupAsync", reflect.TypeOf((*MockZeusServiceServer)(nil).DeleteGroupAsync), arg0, arg1)
}

// GetDeleteGroupAsyncState mocks base method.
func (m *MockZeusServiceServer) GetDeleteGroupAsyncState(arg0 context.Context, arg1 *youtu_zeus.GetDeleteGroupAsyncStateReq) (*youtu_zeus.GetDeleteGroupAsyncStateRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeleteGroupAsyncState", arg0, arg1)
	ret0, _ := ret[0].(*youtu_zeus.GetDeleteGroupAsyncStateRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeleteGroupAsyncState indicates an expected call of GetDeleteGroupAsyncState.
func (mr *MockZeusServiceServerMockRecorder) GetDeleteGroupAsyncState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeleteGroupAsyncState", reflect.TypeOf((*MockZeusServiceServer)(nil).GetDeleteGroupAsyncState), arg0, arg1)
}

// GetFeas mocks base method.
func (m *MockZeusServiceServer) GetFeas(arg0 context.Context, arg1 *youtu_zeus.GetFeasReq) (*youtu_zeus.GetFeasRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeas", arg0, arg1)
	ret0, _ := ret[0].(*youtu_zeus.GetFeasRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeas indicates an expected call of GetFeas.
func (mr *MockZeusServiceServerMockRecorder) GetFeas(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeas", reflect.TypeOf((*MockZeusServiceServer)(nil).GetFeas), arg0, arg1)
}

// GetFeasByEntity mocks base method.
func (m *MockZeusServiceServer) GetFeasByEntity(arg0 context.Context, arg1 *youtu_zeus.GetFeasByEntityReq) (*youtu_zeus.GetFeasByEntityRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeasByEntity", arg0, arg1)
	ret0, _ := ret[0].(*youtu_zeus.GetFeasByEntityRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeasByEntity indicates an expected call of GetFeasByEntity.
func (mr *MockZeusServiceServerMockRecorder) GetFeasByEntity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeasByEntity", reflect.TypeOf((*MockZeusServiceServer)(nil).GetFeasByEntity), arg0, arg1)
}

// GetGroupDetail mocks base method.
func (m *MockZeusServiceServer) GetGroupDetail(arg0 context.Context, arg1 *youtu_zeus.GetGroupDetailReq) (*youtu_zeus.GetGroupDetailRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupDetail", arg0, arg1)
	ret0, _ := ret[0].(*youtu_zeus.GetGroupDetailRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupDetail indicates an expected call of GetGroupDetail.
func (mr *MockZeusServiceServerMockRecorder) GetGroupDetail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupDetail", reflect.TypeOf((*MockZeusServiceServer)(nil).GetGroupDetail), arg0, arg1)
}

// GetGroupEntityIds mocks base method.
func (m *MockZeusServiceServer) GetGroupEntityIds(arg0 context.Context, arg1 *youtu_zeus.GetGroupEntityIdsReq) (*youtu_zeus.GetGroupEntityIdsRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupEntityIds", arg0, arg1)
	ret0, _ := ret[0].(*youtu_zeus.GetGroupEntityIdsRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupEntityIds indicates an expected call of GetGroupEntityIds.
func (mr *MockZeusServiceServerMockRecorder) GetGroupEntityIds(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupEntityIds", reflect.TypeOf((*MockZeusServiceServer)(nil).GetGroupEntityIds), arg0, arg1)
}

// GetGroupFeaIds mocks base method.
func (m *MockZeusServiceServer) GetGroupFeaIds(arg0 context.Context, arg1 *youtu_zeus.GetGroupFeaIdsReq) (*youtu_zeus.GetGroupFeaIdsRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupFeaIds", arg0, arg1)
	ret0, _ := ret[0].(*youtu_zeus.GetGroupFeaIdsRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupFeaIds indicates an expected call of GetGroupFeaIds.
func (mr *MockZeusServiceServerMockRecorder) GetGroupFeaIds(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupFeaIds", reflect.TypeOf((*MockZeusServiceServer)(nil).GetGroupFeaIds), arg0, arg1)
}

// GetGroupPageIds mocks base method.
func (m *MockZeusServiceServer) GetGroupPageIds(arg0 context.Context, arg1 *youtu_zeus.GetGroupPageIdsReq) (*youtu_zeus.GetGroupPageIdsRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupPageIds", arg0, arg1)
	ret0, _ := ret[0].(*youtu_zeus.GetGroupPageIdsRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupPageIds indicates an expected call of GetGroupPageIds.
func (mr *MockZeusServiceServerMockRecorder) GetGroupPageIds(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupPageIds", reflect.TypeOf((*MockZeusServiceServer)(nil).GetGroupPageIds), arg0, arg1)
}

// GetGroupSize mocks base method.
func (m *MockZeusServiceServer) GetGroupSize(arg0 context.Context, arg1 *youtu_zeus.GetGroupSizeReq) (*youtu_zeus.GetGroupSizeRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupSize", arg0, arg1)
	ret0, _ := ret[0].(*youtu_zeus.GetGroupSizeRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupSize indicates an expected call of GetGroupSize.
func (mr *MockZeusServiceServerMockRecorder) GetGroupSize(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupSize", reflect.TypeOf((*MockZeusServiceServer)(nil).GetGroupSize), arg0, arg1)
}

// GetPageFeaEntityIds mocks base method.
func (m *MockZeusServiceServer) GetPageFeaEntityIds(arg0 context.Context, arg1 *youtu_zeus.GetPageFeaEntityIdsReq) (*youtu_zeus.GetPageFeaEntityIdsRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPageFeaEntityIds", arg0, arg1)
	ret0, _ := ret[0].(*youtu_zeus.GetPageFeaEntityIdsRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPageFeaEntityIds indicates an expected call of GetPageFeaEntityIds.
func (mr *MockZeusServiceServerMockRecorder) GetPageFeaEntityIds(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPageFeaEntityIds", reflect.TypeOf((*MockZeusServiceServer)(nil).GetPageFeaEntityIds), arg0, arg1)
}

// GetPageFeatures mocks base method.
func (m *MockZeusServiceServer) GetPageFeatures(arg0 context.Context, arg1 *youtu_zeus.GetPageFeaturesReq) (*youtu_zeus.GetPageFeaturesRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPageFeatures", arg0, arg1)
	ret0, _ := ret[0].(*youtu_zeus.GetPageFeaturesRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPageFeatures indicates an expected call of GetPageFeatures.
func (mr *MockZeusServiceServerMockRecorder) GetPageFeatures(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPageFeatures", reflect.TypeOf((*MockZeusServiceServer)(nil).GetPageFeatures), arg0, arg1)
}

// Retrieve mocks base method.
func (m *MockZeusServiceServer) Retrieve(arg0 context.Context, arg1 *youtu_zeus.RetrieveReq) (*youtu_zeus.RetrieveRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Retrieve", arg0, arg1)
	ret0, _ := ret[0].(*youtu_zeus.RetrieveRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Retrieve indicates an expected call of Retrieve.
func (mr *MockZeusServiceServerMockRecorder) Retrieve(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Retrieve", reflect.TypeOf((*MockZeusServiceServer)(nil).Retrieve), arg0, arg1)
}

// TriggerPageUpdate mocks base method.
func (m *MockZeusServiceServer) TriggerPageUpdate(arg0 context.Context, arg1 *youtu_zeus.TriggerPageUpdateReq) (*youtu_zeus.TriggerPageUpdateRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TriggerPageUpdate", arg0, arg1)
	ret0, _ := ret[0].(*youtu_zeus.TriggerPageUpdateRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TriggerPageUpdate indicates an expected call of TriggerPageUpdate.
func (mr *MockZeusServiceServerMockRecorder) TriggerPageUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TriggerPageUpdate", reflect.TypeOf((*MockZeusServiceServer)(nil).TriggerPageUpdate), arg0, arg1)
}

// TrimCache mocks base method.
func (m *MockZeusServiceServer) TrimCache(arg0 context.Context, arg1 *youtu_zeus.TrimCacheReq) (*youtu_zeus.TrimCacheRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrimCache", arg0, arg1)
	ret0, _ := ret[0].(*youtu_zeus.TrimCacheRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrimCache indicates an expected call of TrimCache.
func (mr *MockZeusServiceServerMockRecorder) TrimCache(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrimCache", reflect.TypeOf((*MockZeusServiceServer)(nil).TrimCache), arg0, arg1)
}

// TruncateGroup mocks base method.
func (m *MockZeusServiceServer) TruncateGroup(arg0 context.Context, arg1 *youtu_zeus.TruncateGroupReq) (*youtu_zeus.TruncateGroupRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TruncateGroup", arg0, arg1)
	ret0, _ := ret[0].(*youtu_zeus.TruncateGroupRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TruncateGroup indicates an expected call of TruncateGroup.
func (mr *MockZeusServiceServerMockRecorder) TruncateGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TruncateGroup", reflect.TypeOf((*MockZeusServiceServer)(nil).TruncateGroup), arg0, arg1)
}

// UpdateEntityId mocks base method.
func (m *MockZeusServiceServer) UpdateEntityId(arg0 context.Context, arg1 *youtu_zeus.UpdateEntityIdReq) (*youtu_zeus.UpdateEntityIdRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEntityId", arg0, arg1)
	ret0, _ := ret[0].(*youtu_zeus.UpdateEntityIdRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEntityId indicates an expected call of UpdateEntityId.
func (mr *MockZeusServiceServerMockRecorder) UpdateEntityId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEntityId", reflect.TypeOf((*MockZeusServiceServer)(nil).UpdateEntityId), arg0, arg1)
}

// UpdateExtendInfos mocks base method.
func (m *MockZeusServiceServer) UpdateExtendInfos(arg0 context.Context, arg1 *youtu_zeus.UpdateExtendInfosReq) (*youtu_zeus.UpdateExtendInfosRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExtendInfos", arg0, arg1)
	ret0, _ := ret[0].(*youtu_zeus.UpdateExtendInfosRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateExtendInfos indicates an expected call of UpdateExtendInfos.
func (mr *MockZeusServiceServerMockRecorder) UpdateExtendInfos(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExtendInfos", reflect.TypeOf((*MockZeusServiceServer)(nil).UpdateExtendInfos), arg0, arg1)
}

// UpdateFeas mocks base method.
func (m *MockZeusServiceServer) UpdateFeas(arg0 context.Context, arg1 *youtu_zeus.UpdateFeasReq) (*youtu_zeus.UpdateFeasRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFeas", arg0, arg1)
	ret0, _ := ret[0].(*youtu_zeus.UpdateFeasRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFeas indicates an expected call of UpdateFeas.
func (mr *MockZeusServiceServerMockRecorder) UpdateFeas(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFeas", reflect.TypeOf((*MockZeusServiceServer)(nil).UpdateFeas), arg0, arg1)
}

// UpdateFeatures mocks base method.
func (m *MockZeusServiceServer) UpdateFeatures(arg0 context.Context, arg1 *youtu_zeus.UpdateFeaturesReq) (*youtu_zeus.UpdateFeaturesRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFeatures", arg0, arg1)
	ret0, _ := ret[0].(*youtu_zeus.UpdateFeaturesRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFeatures indicates an expected call of UpdateFeatures.
func (mr *MockZeusServiceServerMockRecorder) UpdateFeatures(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFeatures", reflect.TypeOf((*MockZeusServiceServer)(nil).UpdateFeatures), arg0, arg1)
}

// WarmUpCache mocks base method.
func (m *MockZeusServiceServer) WarmUpCache(arg0 context.Context, arg1 *youtu_zeus.WarmUpCacheReq) (*youtu_zeus.WarmUpCacheRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WarmUpCache", arg0, arg1)
	ret0, _ := ret[0].(*youtu_zeus.WarmUpCacheRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WarmUpCache indicates an expected call of WarmUpCache.
func (mr *MockZeusServiceServerMockRecorder) WarmUpCache(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WarmUpCache", reflect.TypeOf((*MockZeusServiceServer)(nil).WarmUpCache), arg0, arg1)
}

// mustEmbedUnimplementedZeusServiceServer mocks base method.
func (m *MockZeusServiceServer) mustEmbedUnimplementedZeusServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedZeusServiceServer")
}

// mustEmbedUnimplementedZeusServiceServer indicates an expected call of mustEmbedUnimplementedZeusServiceServer.
func (mr *MockZeusServiceServerMockRecorder) mustEmbedUnimplementedZeusServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedZeusServiceServer", reflect.TypeOf((*MockZeusServiceServer)(nil).mustEmbedUnimplementedZeusServiceServer))
}

// MockUnsafeZeusServiceServer is a mock of UnsafeZeusServiceServer interface.
type MockUnsafeZeusServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeZeusServiceServerMockRecorder
}

// MockUnsafeZeusServiceServerMockRecorder is the mock recorder for MockUnsafeZeusServiceServer.
type MockUnsafeZeusServiceServerMockRecorder struct {
	mock *MockUnsafeZeusServiceServer
}

// NewMockUnsafeZeusServiceServer creates a new mock instance.
func NewMockUnsafeZeusServiceServer(ctrl *gomock.Controller) *MockUnsafeZeusServiceServer {
	mock := &MockUnsafeZeusServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeZeusServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeZeusServiceServer) EXPECT() *MockUnsafeZeusServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedZeusServiceServer mocks base method.
func (m *MockUnsafeZeusServiceServer) mustEmbedUnimplementedZeusServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedZeusServiceServer")
}

// mustEmbedUnimplementedZeusServiceServer indicates an expected call of mustEmbedUnimplementedZeusServiceServer.
func (mr *MockUnsafeZeusServiceServerMockRecorder) mustEmbedUnimplementedZeusServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedZeusServiceServer", reflect.TypeOf((*MockUnsafeZeusServiceServer)(nil).mustEmbedUnimplementedZeusServiceServer))
}
